import api from "../API";
import { SoundCloudComment, SoundCloudSecretToken, SoundCloudTrack, SoundCloudTrackFilter, SoundCloudUser } from "../types";
export declare class Tracks {
    private readonly api;
    private readonly resolve;
    constructor(api: api);
    /**
     * Searches for tracks.
     */
    search: (params?: SoundCloudTrackFilter) => Promise<SoundCloudTrack[]>;
    /**
     * Fetches a track by URL or ID.
     */
    get: (trackResolvable: string | number) => Promise<any>;
    /**
     * Fetches all comments on a track.
     */
    comments: (trackResolvable: string | number) => Promise<SoundCloudComment[]>;
    /**
     * Gets a specific comment.
     */
    comment: (trackResolvable: string | number, commentID: number) => Promise<SoundCloudComment>;
    /**
     * Get all users who favorited the track.
     */
    favoriters: (trackResolvable: string | number) => Promise<SoundCloudUser[]>;
    /**
     * Get a specific favoriter.
     */
    favoriter: (trackResolvable: string | number, userResolvable: string | number) => Promise<SoundCloudUser>;
    /**
     * Requires Authentication - Gets the secret token from one of your own tracks.
     */
    secretToken: (trackResolvable: string | number) => Promise<SoundCloudSecretToken>;
    /**
     * Searches for tracks (web scraping)
     */
    scrape: (query: string) => Promise<SoundCloudTrack[]>;
    /**
     * Gets a track by URL (web scraping)
     */
    getURL: (url: string) => Promise<SoundCloudTrack>;
}
