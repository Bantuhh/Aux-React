import api from "../API";
import { SoundCloudComment, SoundCloudPlaylist, SoundCloudTrack, SoundCloudUser, SoundCloudUserCollection, SoundCloudUserFilter, SoundCloudWebProfile } from "../types";
export declare class Users {
    private readonly api;
    private readonly resolve;
    constructor(api: api);
    /**
     * Searches for users.
     */
    search: (params?: SoundCloudUserFilter) => Promise<SoundCloudUser[]>;
    /**
     * Gets a user by URL or ID.
     */
    get: (userResolvable: string | number) => Promise<any>;
    /**
     * Gets all the tracks by the user.
     */
    tracks: (userResolvable: string | number) => Promise<SoundCloudTrack[]>;
    /**
     * Gets all the playlists by the user.
     */
    playlists: (userResolvable: string | number) => Promise<SoundCloudPlaylist[]>;
    /**
     * Gets all the users the user is following.
     */
    followings: (userResolvable: string | number) => Promise<SoundCloudUserCollection>;
    /**
     * Gets a specific following.
     */
    following: (userResolvable: string | number, anotherUserResolvable: string | number) => Promise<SoundCloudUser>;
    /**
     * Gets all of a users followers.
     */
    followers: (userResolvable: string | number) => Promise<SoundCloudUserCollection>;
    /**
     * Gets a specific follower.
     */
    follower: (userResolvable: string | number, anotherUserResolvable: string | number) => Promise<SoundCloudUser>;
    /**
     * Gets all comments by the user.
     */
    comments: (userResolvable: string | number) => Promise<SoundCloudComment[]>;
    /**
     * Gets all of a users favorite tracks.
     */
    favorites: (userResolvable: string | number) => Promise<SoundCloudTrack[]>;
    /**
     * Gets a specific favorite track.
     */
    favorite: (userResolvable: string | number, trackResolvable: string | number) => Promise<SoundCloudTrack>;
    /**
     * Gets all the web profiles on a users sidebar.
     */
    webProfiles: (userResolvable: string | number) => Promise<SoundCloudWebProfile[]>;
    /**
     * Searches for users (web scraping)
     */
    scrape: (query: string) => Promise<SoundCloudUser[]>;
    /**
     * Gets a user by URL (web scraping)
     */
    getURL: (url: string) => Promise<SoundCloudUser>;
}
