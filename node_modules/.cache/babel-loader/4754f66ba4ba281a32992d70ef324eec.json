{"ast":null,"code":"import { playURI } from \"./utils/spotifyInterface\";\nimport { popQueue } from \"./utils/queueInterface\";\nglobal.spotifyLoggedIn = false;\nglobal.spotifyAccessToken = \"\";\nglobal.spotifyFavoritesResults = {};\nglobal.spoitfyPlaylistsResults = {};\nglobal.spotifyTrackSearchResults = {};\nglobal.lastSpotifySearchQuery = \"\"; // Queue\n\nclass QueueItem {\n  constructor(platform, songInfo) {\n    this.platform = platform;\n    this.songInfo = songInfo;\n  }\n\n}\n\nglobal.QueueItem = QueueItem;\nglobal.sessionQueue = [];\nglobal.currentlyPlaying = \"\";\nglobal.isContentPlaying = false;\nglobal.spotifyDeviceID = \"\"; // Tries to skip song one too many times, only do it on attempt 2\n\nglobal.trackEndSkipAttempt = 0;\n\nglobal.skipSong = () => {\n  console.log(\"Skipping song...\"); // queue may be empty, but there may be a song playing\n\n  if (global.sessionQueue.length === 0) {\n    console.log(\"queue empty\");\n\n    if (!global.isContentPlaying) {\n      // no song playing and queue empty\n      global.isContentPlaying = false;\n      global.currentlyPlaying = \"\";\n    }\n\n    return;\n  }\n\n  var upNext = popQueue();\n  console.log(\"popped song\", upNext); // Check Platform\n\n  if (upNext[0] === \"Spotify\") {\n    console.log(\"Playing next song\");\n    var songURI = upNext[1][\"uri\"];\n    playURI(songURI, global.spotifyAccessToken);\n    global.isContentPlaying = true; // Set song as currently playing\n\n    global.currentlyPlaying = upNext;\n  }\n};\n\nglobal.youtubeSearchResults = [];","map":{"version":3,"sources":["/Users/dbanta/Desktop/Aux React/aux-pwa/src/global.js"],"names":["playURI","popQueue","global","spotifyLoggedIn","spotifyAccessToken","spotifyFavoritesResults","spoitfyPlaylistsResults","spotifyTrackSearchResults","lastSpotifySearchQuery","QueueItem","constructor","platform","songInfo","sessionQueue","currentlyPlaying","isContentPlaying","spotifyDeviceID","trackEndSkipAttempt","skipSong","console","log","length","upNext","songURI","youtubeSearchResults"],"mappings":"AAAA,SAASA,OAAT,QAAwB,0BAAxB;AACA,SAASC,QAAT,QAAyB,wBAAzB;AAEAC,MAAM,CAACC,eAAP,GAAyB,KAAzB;AAEAD,MAAM,CAACE,kBAAP,GAA4B,EAA5B;AAEAF,MAAM,CAACG,uBAAP,GAAiC,EAAjC;AACAH,MAAM,CAACI,uBAAP,GAAiC,EAAjC;AAEAJ,MAAM,CAACK,yBAAP,GAAmC,EAAnC;AAEAL,MAAM,CAACM,sBAAP,GAAgC,EAAhC,C,CAEA;;AACA,MAAMC,SAAN,CAAgB;AACdC,EAAAA,WAAW,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAC9B,SAAKD,QAAL,GAAgBA,QAAhB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACD;;AAJa;;AAOhBV,MAAM,CAACO,SAAP,GAAmBA,SAAnB;AAEAP,MAAM,CAACW,YAAP,GAAsB,EAAtB;AAEAX,MAAM,CAACY,gBAAP,GAA0B,EAA1B;AAEAZ,MAAM,CAACa,gBAAP,GAA0B,KAA1B;AAEAb,MAAM,CAACc,eAAP,GAAyB,EAAzB,C,CAEA;;AACAd,MAAM,CAACe,mBAAP,GAA6B,CAA7B;;AAEAf,MAAM,CAACgB,QAAP,GAAkB,MAAM;AACtBC,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EADsB,CAGtB;;AACA,MAAIlB,MAAM,CAACW,YAAP,CAAoBQ,MAApB,KAA+B,CAAnC,EAAsC;AACpCF,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;;AACA,QAAI,CAAClB,MAAM,CAACa,gBAAZ,EAA8B;AAC5B;AACAb,MAAAA,MAAM,CAACa,gBAAP,GAA0B,KAA1B;AACAb,MAAAA,MAAM,CAACY,gBAAP,GAA0B,EAA1B;AACD;;AACD;AACD;;AAED,MAAIQ,MAAM,GAAGrB,QAAQ,EAArB;AACAkB,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BE,MAA3B,EAfsB,CAiBtB;;AACA,MAAIA,MAAM,CAAC,CAAD,CAAN,KAAc,SAAlB,EAA6B;AAC3BH,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,QAAIG,OAAO,GAAGD,MAAM,CAAC,CAAD,CAAN,CAAU,KAAV,CAAd;AAEAtB,IAAAA,OAAO,CAACuB,OAAD,EAAUrB,MAAM,CAACE,kBAAjB,CAAP;AAEAF,IAAAA,MAAM,CAACa,gBAAP,GAA0B,IAA1B,CAN2B,CAQ3B;;AACAb,IAAAA,MAAM,CAACY,gBAAP,GAA0BQ,MAA1B;AACD;AACF,CA7BD;;AA+BApB,MAAM,CAACsB,oBAAP,GAA8B,EAA9B","sourcesContent":["import { playURI } from \"./utils/spotifyInterface\";\nimport { popQueue } from \"./utils/queueInterface\";\n\nglobal.spotifyLoggedIn = false;\n\nglobal.spotifyAccessToken = \"\";\n\nglobal.spotifyFavoritesResults = {};\nglobal.spoitfyPlaylistsResults = {};\n\nglobal.spotifyTrackSearchResults = {};\n\nglobal.lastSpotifySearchQuery = \"\";\n\n// Queue\nclass QueueItem {\n  constructor(platform, songInfo) {\n    this.platform = platform;\n    this.songInfo = songInfo;\n  }\n}\n\nglobal.QueueItem = QueueItem;\n\nglobal.sessionQueue = [];\n\nglobal.currentlyPlaying = \"\";\n\nglobal.isContentPlaying = false;\n\nglobal.spotifyDeviceID = \"\";\n\n// Tries to skip song one too many times, only do it on attempt 2\nglobal.trackEndSkipAttempt = 0;\n\nglobal.skipSong = () => {\n  console.log(\"Skipping song...\");\n\n  // queue may be empty, but there may be a song playing\n  if (global.sessionQueue.length === 0) {\n    console.log(\"queue empty\");\n    if (!global.isContentPlaying) {\n      // no song playing and queue empty\n      global.isContentPlaying = false;\n      global.currentlyPlaying = \"\";\n    }\n    return;\n  }\n\n  var upNext = popQueue();\n  console.log(\"popped song\", upNext);\n\n  // Check Platform\n  if (upNext[0] === \"Spotify\") {\n    console.log(\"Playing next song\");\n    var songURI = upNext[1][\"uri\"];\n\n    playURI(songURI, global.spotifyAccessToken);\n\n    global.isContentPlaying = true;\n\n    // Set song as currently playing\n    global.currentlyPlaying = upNext;\n  }\n};\n\nglobal.youtubeSearchResults = [];\n"]},"metadata":{},"sourceType":"module"}