{"ast":null,"code":"var _jsxFileName = \"/Users/dbanta/Desktop/Aux React/aux-pwa/src/components/session/sessionRight.jsx\";\nimport React, { Component } from 'react';\nimport { addSongToQueue } from \"../../utils/queueInterface\";\nimport { viewOnYoutube } from \"../../utils/youtubeInterface\";\nimport { viewOnSpotify } from \"../../utils/spotifyInterface\";\n\nclass SessionRight extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.createNotification = type => {\n      console.log(\"GOT TO CREATE NOTIFICATION\");\n\n      switch (type) {\n        case \"info\":\n          NotificationManager.info(\"Info message\");\n          break;\n\n        case \"success\":\n          NotificationManager.success(\"I knew you could do it.\", \"Song added to queue\", 1500);\n          break;\n\n        case \"warning\":\n          NotificationManager.warning(\"Warning message\", \"Close after 3000ms\", 3000);\n          break;\n\n        case \"error\":\n          NotificationManager.error(\"Make sure you are logged into your Spotify\", \"Error!\", 5000, () => {//alert(\"callback\");\n          });\n          break;\n      }\n\n      return () => {};\n    };\n\n    this.addSongToQueue = (platform, songInfo) => {\n      addSongToQueue(platform, songInfo);\n      this.createNotification(\"success\");\n    };\n\n    this.formatArtistString = artistObj => {\n      var artistString = \"\";\n      var numArtists = 0;\n\n      for (var key in Object.keys(artistObj)) {\n        var artist = artistObj[key];\n\n        if (numArtists > 0) {\n          artistString = artistString + \", \" + artist.name;\n        } else {\n          artistString = artist.name;\n        }\n\n        numArtists += 1;\n      }\n\n      return artistString;\n    };\n  }\n\n  render() {\n    const {\n      songOptionsSelected,\n      selectedPlatform,\n      selectedContentInfo\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sessionRightContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }\n    }, songOptionsSelected ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sessionRight\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"songOptionsAlbumImg\",\n      src: selectedPlatform === \"Spotify\" ? selectedContentInfo.album.images[0].url : selectedContentInfo.snippet.thumbnails.default.url,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"songOptionsTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }\n    }, selectedPlatform === \"Spotify\" ? selectedContentInfo.name : selectedContentInfo.snippet.title), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"songOptionsArtist\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }\n    }, selectedPlatform === \"Spotify\" ? this.formatArtistString(selectedContentInfo.artists) : selectedContentInfo.snippet.channelTitle), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"firstSeparatorLine\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"addToQueueBtn\",\n      onClick: () => this.addSongToQueue(selectedPlatform, selectedContentInfo),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"secondSeparatorLine\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      id: selectedPlatform === \"Spotify\" ? \"viewOnSpotifyBtn\" : \"viewOnYoutubeBtn\",\n      onClick: selectedPlatform === \"Spotify\" ? () => viewOnSpotify(this.state.selectedContentInfo) : () => viewOnYoutube(this.state.selectedContentInfo),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }\n    })) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sessionRight\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 15\n      }\n    }) // If nothing selected, show nothing on right side\n    , /*#__PURE__*/React.createElement(NotificationContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport default SessionRight;","map":{"version":3,"sources":["/Users/dbanta/Desktop/Aux React/aux-pwa/src/components/session/sessionRight.jsx"],"names":["React","Component","addSongToQueue","viewOnYoutube","viewOnSpotify","SessionRight","createNotification","type","console","log","NotificationManager","info","success","warning","error","platform","songInfo","formatArtistString","artistObj","artistString","numArtists","key","Object","keys","artist","name","render","songOptionsSelected","selectedPlatform","selectedContentInfo","props","album","images","url","snippet","thumbnails","default","title","artists","channelTitle","state"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { addSongToQueue } from \"../../utils/queueInterface\";\nimport { viewOnYoutube } from \"../../utils/youtubeInterface\";\nimport { viewOnSpotify } from \"../../utils/spotifyInterface\";\n\nclass SessionRight extends Component {\n\n    createNotification = (type) => {\n        console.log(\"GOT TO CREATE NOTIFICATION\");\n        switch (type) {\n          case \"info\":\n            NotificationManager.info(\"Info message\");\n            break;\n          case \"success\":\n            NotificationManager.success(\n              \"I knew you could do it.\",\n              \"Song added to queue\",\n              1500\n            );\n            break;\n          case \"warning\":\n            NotificationManager.warning(\n              \"Warning message\",\n              \"Close after 3000ms\",\n              3000\n            );\n            break;\n          case \"error\":\n            NotificationManager.error(\n              \"Make sure you are logged into your Spotify\",\n              \"Error!\",\n              5000,\n              () => {\n                //alert(\"callback\");\n              }\n            );\n            break;\n        }\n        return () => {};\n      };\n\n    // Add Spotify song to queue and send notification\n    addSongToQueue = (platform, songInfo) => {\n        addSongToQueue(platform, songInfo);\n        this.createNotification(\"success\");\n    };\n\n    formatArtistString = (artistObj) => {\n        var artistString = \"\";\n        var numArtists = 0;\n\n        for (var key in Object.keys(artistObj)) {\n        var artist = artistObj[key];\n\n        if (numArtists > 0) {\n            artistString = artistString + \", \" + artist.name;\n        } else {\n            artistString = artist.name;\n        }\n        numArtists += 1;\n        }\n\n        return artistString;\n    };\n\n    render() {\n        const { songOptionsSelected, selectedPlatform, selectedContentInfo } = this.props;\n        return (\n            <div className=\"sessionRightContainer\">\n            {/* If Song Options was selected, show selected song info on right side */}\n            {songOptionsSelected ? (\n              <div className=\"sessionRight\">\n                <img\n                  className=\"songOptionsAlbumImg\"\n                  src={(selectedPlatform === \"Spotify\") ? selectedContentInfo.album.images[0].url : selectedContentInfo.snippet.thumbnails.default.url}\n                  alt=\"\"></img>\n  \n                <p className=\"songOptionsTitle\">\n                  {(selectedPlatform === \"Spotify\") ? selectedContentInfo.name : selectedContentInfo.snippet.title}\n                </p>\n                <p className=\"songOptionsArtist\">\n                  {(selectedPlatform === \"Spotify\") ? this.formatArtistString(\n                    selectedContentInfo.artists\n                  ) : selectedContentInfo.snippet.channelTitle}\n                </p>\n                <div id=\"firstSeparatorLine\"></div>\n                <button\n                  id=\"addToQueueBtn\"\n                  onClick={() =>\n                    this.addSongToQueue(\n                      selectedPlatform,\n                      selectedContentInfo\n                    )\n                  }></button>\n                <div id=\"secondSeparatorLine\"></div>\n                <button\n                  id={(selectedPlatform === \"Spotify\") ? \"viewOnSpotifyBtn\" : \"viewOnYoutubeBtn\"}\n                  onClick={(selectedPlatform === \"Spotify\") ? () =>\n                    viewOnSpotify(this.state.selectedContentInfo) : () =>\n                    viewOnYoutube(this.state.selectedContentInfo)\n                  }></button>\n              </div>\n              ) : (\n              <div className=\"sessionRight\"></div>\n            )\n            // If nothing selected, show nothing on right side\n            }\n            <NotificationContainer />\n            </div>\n            \n        );\n    }\n}\nexport default SessionRight;"]},"metadata":{},"sourceType":"module"}