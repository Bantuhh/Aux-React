{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { Platform, StyleSheet, View } from 'react-native';\nimport { Screen, screensEnabled // @ts-ignore\n, shouldUseActivityState } from 'react-native-screens';\nconst FAR_FAR_AWAY = 30000; // this should be big enough to move the whole view out of its container\n\nexport default class ResourceSavingScene extends React.Component {\n  render() {\n    // react-native-screens is buggy on web\n    if ((screensEnabled === null || screensEnabled === void 0 ? void 0 : screensEnabled()) && Platform.OS !== 'web') {\n      const {\n        isVisible,\n        ...rest\n      } = this.props;\n\n      if (shouldUseActivityState) {\n        return (\n          /*#__PURE__*/\n          // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n          React.createElement(Screen, _extends({\n            activityState: isVisible ? 2 : 0\n          }, rest))\n        );\n      } else {\n        return (\n          /*#__PURE__*/\n          // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n          React.createElement(Screen, _extends({\n            active: isVisible ? 1 : 0\n          }, rest))\n        );\n      }\n    }\n\n    const {\n      isVisible,\n      children,\n      style,\n      ...rest\n    } = this.props;\n    return /*#__PURE__*/React.createElement(View, _extends({\n      style: [styles.container, Platform.OS === 'web' ? {\n        display: isVisible ? 'flex' : 'none'\n      } : null, style],\n      collapsable: false,\n      removeClippedSubviews: // On iOS, set removeClippedSubviews to true only when not focused\n      // This is an workaround for a bug where the clipped view never re-appears\n      Platform.OS === 'ios' ? !isVisible : true,\n      pointerEvents: isVisible ? 'auto' : 'none'\n    }, rest), /*#__PURE__*/React.createElement(View, {\n      style: isVisible ? styles.attached : styles.detached\n    }, children));\n  }\n\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  attached: {\n    flex: 1\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY\n  }\n});","map":{"version":3,"sources":["ResourceSavingScene.tsx"],"names":["FAR_FAR_AWAY","React","render","Platform","rest","isVisible","styles","display","detached","container","flex","overflow","attached","top"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,QAAA,EAAA,UAAA,EAAA,IAAA,QAAA,cAAA;AACA,SAAA,MAAA,EAAA,cAAA,CAGE;AAHF,EAAA,sBAAA,QAAA,sBAAA;AAcA,MAAMA,YAAY,GAAlB,KAAA,C,CAA4B;;AAE5B,eAAe,MAAA,mBAAA,SAAkCC,KAAK,CAAvC,SAAA,CAAyD;AACtEC,EAAAA,MAAM,GAAG;AACP;AACA,QAAI,CAAA,cAAc,KAAd,IAAA,IAAA,cAAc,KAAA,KAAd,CAAA,GAAA,KAAA,CAAA,GAAA,cAAc,EAAd,KAAsBC,QAAQ,CAARA,EAAAA,KAA1B,KAAA,EAAiD;AAC/C,YAAM;AAAA,QAAA,SAAA;AAAa,WAAGC;AAAhB,UAAyB,KAA/B,KAAA;;AAEA,UAAA,sBAAA,EAA4B;AAC1B;AAAA;AACE;AACA,UAAA,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,QAAA,CAAA;AAAQ,YAAA,aAAa,EAAEC,SAAS,GAAA,CAAA,GAAO;AAAvC,WAAA,EAAA,IAAA,CAAA;AAFF;AADF,OAAA,MAKO;AACL;AAAA;AACE;AACA,UAAA,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,QAAA,CAAA;AAAQ,YAAA,MAAM,EAAEA,SAAS,GAAA,CAAA,GAAO;AAAhC,WAAA,EAAA,IAAA,CAAA;AAFF;AAID;AACF;;AAED,UAAM;AAAA,MAAA,SAAA;AAAA,MAAA,QAAA;AAAA,MAAA,KAAA;AAA8B,SAAGD;AAAjC,QAA0C,KAAhD,KAAA;AAEA,WAAA,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA;AACE,MAAA,KAAK,EAAE,CACLE,MAAM,CADD,SAAA,EAEL,QAAQ,CAAR,EAAA,KAAA,KAAA,GACI;AAAEC,QAAAA,OAAO,EAAEF,SAAS,GAAA,MAAA,GAAY;AAAhC,OADJ,GAFK,IAAA,EADT,KACS,CADT;AAQE,MAAA,WAAW,EARb,KAAA;AASE,MAAA,qBAAqB,EACnB;AACA;AACAF,MAAAA,QAAQ,CAARA,EAAAA,KAAAA,KAAAA,GAAwB,CAAxBA,SAAAA,GAZJ,IAAA;AAcE,MAAA,aAAa,EAAEE,SAAS,GAAA,MAAA,GAAY;AAdtC,KAAA,EAAA,IAAA,CAAA,EAAA,aAiBE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;AAAM,MAAA,KAAK,EAAEA,SAAS,GAAGC,MAAM,CAAT,QAAA,GAAqBA,MAAM,CAACE;AAAlD,KAAA,EAlBJ,QAkBI,CAjBF,CADF;AAuBD;;AA5CqE;AA+CxE,MAAMF,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;AAC/BG,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EADK,CAAA;AAETC,IAAAA,QAAQ,EAAE;AAFD,GADoB;AAK/BC,EAAAA,QAAQ,EAAE;AACRF,IAAAA,IAAI,EAAE;AADE,GALqB;AAQ/BF,EAAAA,QAAQ,EAAE;AACRE,IAAAA,IAAI,EADI,CAAA;AAERG,IAAAA,GAAG,EAAEb;AAFG;AARqB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { Platform, StyleSheet, View } from 'react-native';\nimport {\n  Screen,\n  screensEnabled,\n  // @ts-ignore\n  shouldUseActivityState,\n} from 'react-native-screens';\n\ntype Props = {\n  isVisible: boolean;\n  children: React.ReactNode;\n  enabled: boolean;\n  style?: any;\n};\n\nconst FAR_FAR_AWAY = 30000; // this should be big enough to move the whole view out of its container\n\nexport default class ResourceSavingScene extends React.Component<Props> {\n  render() {\n    // react-native-screens is buggy on web\n    if (screensEnabled?.() && Platform.OS !== 'web') {\n      const { isVisible, ...rest } = this.props;\n\n      if (shouldUseActivityState) {\n        return (\n          // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n          <Screen activityState={isVisible ? 2 : 0} {...rest} />\n        );\n      } else {\n        return (\n          // @ts-expect-error: there was an `active` prop and no `activityState` in older version and stackPresentation was required\n          <Screen active={isVisible ? 1 : 0} {...rest} />\n        );\n      }\n    }\n\n    const { isVisible, children, style, ...rest } = this.props;\n\n    return (\n      <View\n        style={[\n          styles.container,\n          Platform.OS === 'web'\n            ? { display: isVisible ? 'flex' : 'none' }\n            : null,\n          style,\n        ]}\n        collapsable={false}\n        removeClippedSubviews={\n          // On iOS, set removeClippedSubviews to true only when not focused\n          // This is an workaround for a bug where the clipped view never re-appears\n          Platform.OS === 'ios' ? !isVisible : true\n        }\n        pointerEvents={isVisible ? 'auto' : 'none'}\n        {...rest}\n      >\n        <View style={isVisible ? styles.attached : styles.detached}>\n          {children}\n        </View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  attached: {\n    flex: 1,\n  },\n  detached: {\n    flex: 1,\n    top: FAR_FAR_AWAY,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}