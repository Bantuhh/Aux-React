{"ast":null,"code":"var _jsxFileName = \"/Users/dbanta/Desktop/Aux React/aux-pwa/src/components/session/sessionController.jsx\";\nimport React, { Component } from \"react\";\nimport \"../../styles/SessionController.css\";\nimport { SessionContext } from \"../../session-context\";\nimport { play, pause, playURI } from \"../../utils/spotifyInterface\";\nimport { formatYTTitle } from \"../../utils/youtubeInterface\";\nimport { popQueue } from \"../../utils/queueInterface\";\nimport spotifyIcon from \"../../resources/images/Spotify.png\";\nimport youtubeIcon from \"../../resources/images/Youtube.png\";\nimport SeekBar from \"./seekbar\";\n\nclass SessionController extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isPlaying: global.isContentPlaying,\n      currentPosition: 0,\n      totalLength: 0\n    };\n\n    this.playButtonPress = () => {\n      if (global.isContentPlaying) {\n        global.isContentPlaying = false;\n        this.setState({\n          isPlaying: false\n        }); // Check Platform\n\n        if (global.currentlyPlaying[0] === \"Youtube\") {\n          global.youtubePlayer.pauseVideo();\n        } else if (global.currentlyPlaying[0] === \"Spotify\") {\n          pause(global.spotifyAccessToken);\n        }\n      } else {\n        global.isContentPlaying = true;\n        this.setState({\n          isPlaying: true\n        }); // Check Platform\n\n        if (global.currentlyPlaying[0] === \"Youtube\") {\n          global.youtubePlayer.playVideo();\n        } else if (global.currentlyPlaying[0] === \"Spotify\") {\n          play(global.spotifyAccessToken);\n        }\n      }\n    };\n\n    this.skipPressed = () => {\n      if (global.sessionQueue.length === 0) {\n        console.log(\"queue empty\");\n        return;\n      } // Pop Queue\n\n\n      var upNext = popQueue(); // Read next song and determine platform\n\n      if (upNext[0] === \"Spotify\") {\n        var songURI = upNext[1][\"uri\"]; // Pause Youtube if it was playing\n\n        global.youtubePlayer.pauseVideo();\n        playURI(songURI, global.spotifyAccessToken);\n      } else if (upNext[0] === \"Youtube\") {\n        // Pause Spotify if it was playing\n        pause(global.spotifyAccessToken);\n        global.youtubePlayer.loadVideoById(upNext[1].id.videoId, 0);\n      }\n\n      global.isContentPlaying = true;\n      global.currentlyPlaying = upNext;\n      this.context.updateSessionQueue(global.sessionQueue);\n    };\n\n    this.restartPressed = () => {\n      var songInfo = global.currentlyPlaying[1];\n\n      if (global.currentlyPlaying[0] === \"Youtube\") {\n        global.youtubePlayer.loadVideoById(songInfo.id.videoId, 0);\n      } else if (global.currentlyPlaying[1] === \"Spotify\") {\n        const songURI = songInfo[\"uri\"];\n        playURI(songURI, global.spotifyAccessToken);\n      }\n    };\n\n    this.formatArtistString = artistObj => {\n      var artistString = \"\";\n      var numArtists = 0;\n\n      for (var key in Object.keys(artistObj)) {\n        var artist = artistObj[key];\n\n        if (numArtists > 0) {\n          artistString = artistString + \", \" + artist.name;\n        } else {\n          artistString = artist.name;\n        }\n\n        numArtists += 1;\n      }\n\n      return artistString;\n    };\n\n    this.timer = null;\n\n    this.durationCounter = duration => {\n      this.timer = setInterval(async () => {\n        this.setState({\n          currentTime: duration\n        });\n      }, 1000);\n    };\n\n    this.getCurrentTrackLength = () => {\n      var currTrack = global.currentlyPlaying;\n      var trackLength = 0;\n\n      if (currTrack === \"\") {\n        trackLength = 0;\n      } else if (currTrack[0] === \"Spotify\") {\n        trackLength = Math.round(currTrack[1].duration_ms / 1000);\n      } else if (currTrack[0] === \"Youtube\") {\n        var duration = currTrack[1].contentDetails.duration; // Parse out hours minutes and seconds from duration string \"PT4M15S\" \"4 Mins, 15 Secs\"\n\n        var hourStr = duration.split(\"H\")[0];\n\n        if (hourStr === duration) {\n          // Duration does not have Hour\n          var minStr = duration.split(\"M\")[0];\n          minStr = minStr.split(\"T\")[1];\n          var minutes = parseInt(minStr);\n          var secStr = duration.split(\"M\")[1];\n          secStr = secStr.split(\"S\")[0];\n          var seconds = parseInt(secStr);\n          trackLength = minutes * 60 + seconds;\n        } else {\n          // Duration does have Hour\n          hourStr = hourStr.split(\"T\")[1];\n          var hours = parseInt(hourStr);\n          var minStr = duration.split(\"M\")[0];\n          minStr = minStr.split(\"H\")[1];\n          var minutes = parseInt(minStr);\n          var secStr = duration.split(\"M\")[1];\n          secStr = secStr.split(\"S\")[0];\n          var seconds = parseInt(secStr);\n          trackLength = hours * 60 * 60 + minutes * 60 + seconds;\n        }\n      }\n\n      return trackLength;\n    };\n  }\n\n  // Seek Bar\n  setDuration(data) {\n    this.setState({\n      totalLength: Math.floor(data.duration)\n    });\n  }\n\n  setTime(data) {\n    this.setState({\n      currentPosition: Math.floor(data.currentTime)\n    });\n  }\n\n  seek(time) {\n    time = Math.round(time);\n    this.setState({\n      currentPosition: time,\n      paused: false\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(SessionContext.Consumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 7\n      }\n    }, ({\n      isContentPlaying\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"controllerDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"currentTrackPic\",\n      src: global.currentlyPlaying === \"\" ? \"\" : global.currentlyPlaying[0] === \"Youtube\" ? global.currentlyPlaying[1].snippet.thumbnails.high.url : global.currentlyPlaying[1].album.images[0].url,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"controllerButtons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"restartButton\",\n      onClick: this.restartPressed,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"playButton\",\n      style: {\n        background: global.isContentPlaying ? \"url(\" + require(\"../../resources/images/PauseButton.png\") + \")\" : \"url(\" + require(\"../../resources/images/PlayButton.png\") + \")\",\n        left: global.isContentPlaying ? \"-5px\" : \"\"\n      },\n      onClick: this.playButtonPress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"skipButton\",\n      onClick: this.skipPressed,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"songText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"TitleandPlatform\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      id: \"songTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 17\n      }\n    }, global.currentlyPlaying === \"\" ? \"Nothings playing!\" : global.currentlyPlaying[0] === \"Youtube\" ? formatYTTitle(global.currentlyPlaying[1].snippet.title) : global.currentlyPlaying[1].name), global.currentlyPlaying[0] === \"Youtube\" ? /*#__PURE__*/React.createElement(\"img\", {\n      src: youtubeIcon,\n      alt: \"\",\n      className: \"youtubeIconCP\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 19\n      }\n    }) : global.currentlyPlaying[0] === \"Spotify\" ? /*#__PURE__*/React.createElement(\"img\", {\n      src: spotifyIcon,\n      alt: \"\",\n      className: \"spotifyIconCP\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 19\n      }\n    }) : \"\"), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"songArtist\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 15\n      }\n    }, global.currentlyPlaying === \"\" ? \"Search a song or choose from your Library\" : global.currentlyPlaying[0] === \"Youtube\" ? global.currentlyPlaying[1].snippet.channelTitle : this.formatArtistString(global.currentlyPlaying[1].artists))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"seekbarDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(SeekBar, {\n      onSeek: this.seek.bind(this),\n      trackLength: this.getCurrentTrackLength(),\n      onSlidingStart: () => console.log(\"Sliding Start\") //this.setState({paused: true})\n      ,\n      currentPosition: this.state.currentPosition,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 15\n      }\n    }))));\n  }\n\n}\n\nSessionController.contextType = SessionContext;\nexport default SessionController;","map":{"version":3,"sources":["/Users/dbanta/Desktop/Aux React/aux-pwa/src/components/session/sessionController.jsx"],"names":["React","Component","SessionContext","play","pause","playURI","formatYTTitle","popQueue","spotifyIcon","youtubeIcon","SeekBar","SessionController","state","isPlaying","global","isContentPlaying","currentPosition","totalLength","playButtonPress","setState","currentlyPlaying","youtubePlayer","pauseVideo","spotifyAccessToken","playVideo","skipPressed","sessionQueue","length","console","log","upNext","songURI","loadVideoById","id","videoId","context","updateSessionQueue","restartPressed","songInfo","formatArtistString","artistObj","artistString","numArtists","key","Object","keys","artist","name","timer","durationCounter","duration","setInterval","currentTime","getCurrentTrackLength","currTrack","trackLength","Math","round","duration_ms","contentDetails","hourStr","split","minStr","minutes","parseInt","secStr","seconds","hours","setDuration","data","floor","setTime","seek","time","paused","render","snippet","thumbnails","high","url","album","images","background","require","left","title","channelTitle","artists","bind","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"../../styles/SessionController.css\";\n\nimport { SessionContext } from \"../../session-context\";\n\nimport { play, pause, playURI } from \"../../utils/spotifyInterface\";\nimport { formatYTTitle } from \"../../utils/youtubeInterface\";\n\nimport { popQueue } from \"../../utils/queueInterface\";\n\nimport spotifyIcon from \"../../resources/images/Spotify.png\";\nimport youtubeIcon from \"../../resources/images/Youtube.png\";\n\nimport SeekBar from \"./seekbar\"\n\n\nclass SessionController extends Component {\n  state = {\n    isPlaying: global.isContentPlaying,\n    currentPosition: 0, \n    totalLength: 0\n  };\n\n  \n\n  playButtonPress = () => {\n    if (global.isContentPlaying) {\n      global.isContentPlaying = false;\n      this.setState({ isPlaying: false });\n      // Check Platform\n      if (global.currentlyPlaying[0] === \"Youtube\") {\n        global.youtubePlayer.pauseVideo();\n      } else if (global.currentlyPlaying[0] === \"Spotify\") {\n        pause(global.spotifyAccessToken);\n      }\n    } else {\n      global.isContentPlaying = true;\n      this.setState({ isPlaying: true });\n      // Check Platform\n      if (global.currentlyPlaying[0] === \"Youtube\") {\n        global.youtubePlayer.playVideo();\n      } else if (global.currentlyPlaying[0] === \"Spotify\") {\n        play(global.spotifyAccessToken);\n\n      }\n    }\n  };\n\n  skipPressed = () => {\n    if (global.sessionQueue.length === 0) {\n      console.log(\"queue empty\");\n      return;\n    }\n\n    // Pop Queue\n    var upNext = popQueue();\n\n    // Read next song and determine platform\n    if (upNext[0] === \"Spotify\") {\n      var songURI = upNext[1][\"uri\"];\n      // Pause Youtube if it was playing\n      global.youtubePlayer.pauseVideo();\n      playURI(songURI, global.spotifyAccessToken);\n    } else if (upNext[0] === \"Youtube\") {\n      // Pause Spotify if it was playing\n      pause(global.spotifyAccessToken);\n      global.youtubePlayer.loadVideoById(upNext[1].id.videoId, 0);\n    }\n\n    global.isContentPlaying = true;\n    global.currentlyPlaying = upNext;\n\n    this.context.updateSessionQueue(global.sessionQueue);\n  };\n\n  restartPressed = () => {\n    var songInfo = global.currentlyPlaying[1];\n\n    if (global.currentlyPlaying[0] === \"Youtube\") {\n      global.youtubePlayer.loadVideoById(songInfo.id.videoId, 0);\n    } else if (global.currentlyPlaying[1] === \"Spotify\") {\n      const songURI = songInfo[\"uri\"];\n      playURI(songURI, global.spotifyAccessToken);\n    }\n  };\n\n  formatArtistString = (artistObj) => {\n    var artistString = \"\";\n    var numArtists = 0;\n\n    for (var key in Object.keys(artistObj)) {\n      var artist = artistObj[key];\n\n      if (numArtists > 0) {\n        artistString = artistString + \", \" + artist.name;\n      } else {\n        artistString = artist.name;\n      }\n      numArtists += 1;\n    }\n\n    return artistString;\n  };\n\n  // Seek Bar\n  setDuration(data) {\n    this.setState({totalLength: Math.floor(data.duration)});\n  }\n\n  setTime(data) {\n    this.setState({currentPosition: Math.floor(data.currentTime)});\n  }\n\n  seek(time) {\n    time = Math.round(time);\n    this.setState({\n      currentPosition: time,\n      paused: false,\n    });\n  }\n\n  timer = null;\n\n  durationCounter = (duration) => {\n    this.timer = setInterval(async () => {\n      \n      this.setState({\n        currentTime: duration\n      });\n    }, 1000);\n  };\n\n// componentDidMount = () => {\n//   SoundPlayer.onFinishedLoading(async success => {\n//     this.durationCounter();\n//   });\n// }\n\n// componentWillMount = () => {\n//   this.timer && clearInterval(this.timer);\n// };\n\n  getCurrentTrackLength = () => {\n    var currTrack = global.currentlyPlaying\n    var trackLength = 0;\n\n    if (currTrack === \"\") {\n      trackLength = 0;\n    } else if (currTrack[0] === \"Spotify\") {\n      trackLength = Math.round(currTrack[1].duration_ms / 1000)\n    } else if (currTrack[0] === \"Youtube\") {\n      var duration = currTrack[1].contentDetails.duration;\n\n      // Parse out hours minutes and seconds from duration string \"PT4M15S\" \"4 Mins, 15 Secs\"\n      var hourStr = duration.split(\"H\")[0];\n\n      if (hourStr === duration) { // Duration does not have Hour\n        var minStr = duration.split(\"M\")[0];\n        minStr = minStr.split(\"T\")[1];\n        var minutes = parseInt(minStr);\n\n        var secStr = duration.split(\"M\")[1];\n        secStr = secStr.split(\"S\")[0];\n        var seconds = parseInt(secStr);\n        \n        trackLength = (minutes * 60) + seconds\n\n      } else { // Duration does have Hour\n        hourStr = hourStr.split(\"T\")[1];\n        var hours = parseInt(hourStr);\n\n        var minStr = duration.split(\"M\")[0];\n        minStr = minStr.split(\"H\")[1];\n        var minutes = parseInt(minStr);\n\n        var secStr = duration.split(\"M\")[1];\n        secStr = secStr.split(\"S\")[0];\n        var seconds = parseInt(secStr);\n        \n        trackLength = (hours * 60 * 60) + (minutes * 60) + seconds\n      }\n      \n\n      \n    }\n\n    return trackLength\n  }\n\n  render() {\n    return (\n      <SessionContext.Consumer>\n        {({ isContentPlaying }) => (\n          <div className=\"controllerDiv\">\n\n            <img\n              className=\"currentTrackPic\"\n              src={\n                global.currentlyPlaying === \"\"\n                  ? \"\"\n                  : global.currentlyPlaying[0] === \"Youtube\"\n                  ? global.currentlyPlaying[1].snippet.thumbnails.high.url\n                  : global.currentlyPlaying[1].album.images[0].url\n              }\n              alt=\"\"></img>\n            <div className=\"controllerButtons\">\n              <button\n                className=\"restartButton\"\n                onClick={this.restartPressed}></button>\n              <button\n                className=\"playButton\"\n                style={{\n                  background: global.isContentPlaying\n                    ? \"url(\" +\n                      require(\"../../resources/images/PauseButton.png\") +\n                      \")\"\n                    : \"url(\" +\n                      require(\"../../resources/images/PlayButton.png\") +\n                      \")\",\n                  left: global.isContentPlaying ? \"-5px\" : \"\",\n                }}\n                onClick={this.playButtonPress}></button>\n              <button\n                className=\"skipButton\"\n                onClick={this.skipPressed}></button>\n            </div>\n            <div className=\"songText\">\n              <div className=\"TitleandPlatform\">\n                <p id=\"songTitle\">\n                  {global.currentlyPlaying === \"\"\n                    ? \"Nothings playing!\"\n                    : global.currentlyPlaying[0] === \"Youtube\"\n                    ? formatYTTitle(global.currentlyPlaying[1].snippet.title)\n                    : global.currentlyPlaying[1].name}\n                </p>\n                {global.currentlyPlaying[0] === \"Youtube\" ? (\n                  <img src={youtubeIcon} alt=\"\" className=\"youtubeIconCP\"></img>\n                ) : global.currentlyPlaying[0] === \"Spotify\" ? (\n                  <img src={spotifyIcon} alt=\"\" className=\"spotifyIconCP\"></img>\n                ) : (\n                  \"\"\n                )}\n              </div>\n\n              <p id=\"songArtist\">\n                {global.currentlyPlaying === \"\"\n                  ? \"Search a song or choose from your Library\"\n                  : global.currentlyPlaying[0] === \"Youtube\"\n                  ? global.currentlyPlaying[1].snippet.channelTitle\n                  : this.formatArtistString(global.currentlyPlaying[1].artists)}\n              </p>\n            </div>\n            <div className=\"seekbarDiv\">\n\n              <SeekBar\n                onSeek={this.seek.bind(this)}\n                trackLength={this.getCurrentTrackLength()}\n                onSlidingStart={() => console.log(\"Sliding Start\")} //this.setState({paused: true})\n                currentPosition={this.state.currentPosition} />\n            </div>\n          </div>\n        )}\n      </SessionContext.Consumer>\n    );\n  }\n}\nSessionController.contextType = SessionContext;\n\nexport default SessionController;\n"]},"metadata":{},"sourceType":"module"}