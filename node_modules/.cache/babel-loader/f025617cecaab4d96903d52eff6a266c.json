{"ast":null,"code":"var _jsxFileName = \"/Users/dbanta/Desktop/Aux React/aux-pwa/src/components/library/libraryWeb.jsx\";\nimport React, { Component } from \"react\";\nimport \"../../styles/LibraryWeb.css\";\nimport { NotificationContainer, NotificationManager } from \"react-notifications\";\nimport \"react-notifications/lib/notifications.css\";\nimport LibraryResults from \"./libraryResults\";\nimport Spotify from \"spotify-web-api-js\";\nconst spotifyWebApi = new Spotify();\n\nclass LibraryWeb extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      spotifyFavoritesResults: global.spotifyFavoritesResults,\n      spoitfyPlaylistsResults: global.spoitfyPlaylistsResults,\n      selectedTab: \"Favorites\",\n      playlistSelected: false,\n      selectedPlaylistInfo: \"\",\n      selectedPlaylistTracksInfo: \"\",\n      songOptionsSelected: false,\n      selectedSongInfo: \"HI\",\n      playlistOptionsSelected: false\n    };\n\n    this.createNotification = type => {\n      console.log(\"GOT TO CREATE NOTIFICATION\");\n\n      switch (type) {\n        case \"info\":\n          NotificationManager.info(\"Info message\");\n          break;\n\n        case \"success\":\n          NotificationManager.success(\"Success message\", \"Title here\");\n          break;\n\n        case \"warning\":\n          NotificationManager.warning(\"Warning message\", \"Close after 3000ms\", 3000);\n          break;\n\n        case \"error\":\n          NotificationManager.error(\"Make sure you are logged into your Spotify\", \"Error!\", 5000, () => {//alert(\"callback\");\n          });\n          break;\n      }\n\n      return () => {};\n    };\n\n    this.getSpotifyLibrary = () => {\n      spotifyWebApi.getMySavedTracks({\n        limit: 50\n      }).then(response => {\n        this.setState({\n          spotifyFavoritesResults: response.items\n        });\n        global.spotifyFavoritesResults = response.items;\n      }, reason => {\n        console.log(\"GOT TO ERROR\");\n        console.error(reason); // Error!\n      });\n      spotifyWebApi.getUserPlaylists().then(response => {\n        this.setState({\n          spoitfyPlaylistsResults: response.items\n        });\n        global.spoitfyPlaylistsResults = response.items;\n      }, reason => {\n        console.log(\"GOT TO ERROR\");\n        console.error(reason); // Error!\n      });\n      spotifyWebApi.getMe().then(response => {\n        global.spotifyUserID = response.id;\n      }, reason => {\n        console.log(\"GOT TO ERROR (getME)\");\n        console.error(reason); // Error!\n\n        this.createNotification(\"error\");\n      });\n    };\n\n    this.tabClick = tabName => {\n      var i, tablinks;\n      tablinks = document.getElementsByClassName(\"tablinks\");\n\n      for (i = 0; i < tablinks.length; i++) {\n        if (tablinks[i].id === tabName) {\n          tablinks[i].className = \"tablinks active\";\n        } else {\n          tablinks[i].className = \"tablinks\";\n        }\n      }\n\n      this.setState({\n        selectedTab: tabName\n      });\n    };\n\n    this.getPlaylistTracks = playlistID => {\n      const userID = global.spotifyUserID;\n      spotifyWebApi.getPlaylistTracks(userID, playlistID).then(response => {\n        this.setState({\n          selectedPlaylistTracksInfo: response.items\n        });\n      }, reason => {\n        console.log(\"GOT TO ERROR (getPlaylistTracks)\");\n        this.createNotification(\"error\");\n        console.error(reason); // Error!\n      });\n    };\n\n    this.showPlaylist = playlistInfo => {\n      console.log(playlistInfo);\n      var div = document.getElementsByClassName(\"libraryDiv\")[0];\n      div.style.height = \"69%\";\n      this.getPlaylistTracks(playlistInfo.id);\n      this.setState({\n        playlistSelected: true,\n        selectedPlaylistInfo: playlistInfo\n      });\n    };\n\n    this.backToLibraryFromPlaylist = () => {\n      var div = document.getElementsByClassName(\"libraryDiv\")[0];\n      div.style.height = \"78%\";\n      this.setState({\n        playlistSelected: false,\n        selectedPlaylistInfo: \"playlistInfo\"\n      });\n    };\n\n    this.showSongOptions = songInfo => {\n      var songInfoCopy = songInfo.track;\n      this.setState({\n        songOptionsSelected: true,\n        playlistOptionsSelected: false,\n        selectedSongInfo: songInfoCopy\n      });\n    };\n\n    this.showPlaylistOptions = playlistInfo => {\n      this.setState({\n        playlistOptionsSelected: true,\n        songOptionsSelected: false,\n        selectedPlaylistInfo: playlistInfo\n      });\n    };\n\n    this.formatArtistString = artistObj => {\n      var artistString = \"\";\n      var numArtists = 0;\n\n      for (var key in Object.keys(artistObj)) {\n        var artist = artistObj[key];\n\n        if (numArtists > 0) {\n          artistString = artistString + \", \" + artist.name;\n        } else {\n          artistString = artist.name;\n        }\n\n        numArtists += 1;\n      }\n\n      return artistString;\n    };\n\n    this.addToQueue = () => {};\n\n    this.viewOnSpotify = songInfo => {\n      let url = songInfo.external_urls.spotify;\n      var win = window.open(url, \"_blank\");\n      win.focus();\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"libraryFlex\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, !this.state.playlistSelected ? React.createElement(\"div\", {\n      className: \"libraryMiddle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"libraryQueryDiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"libraryTabDiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      class: \"tablinks active\",\n      onClick: () => this.tabClick(\"Favorites\"),\n      id: \"Favorites\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, \"Favorites\"), React.createElement(\"button\", {\n      class: \"tablinks\",\n      onClick: () => this.tabClick(\"Playlists\"),\n      id: \"Playlists\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, \"Playlists\")), React.createElement(\"div\", {\n      className: \"libraryButtonDiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      id: \"spotifyLibraryBtn\",\n      onClick: this.getSpotifyLibrary,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      id: \"libraryDivHeader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, this.state.spotifyFavoritesResults.length > 0 ? \"Spotify \" + this.state.selectedTab : \"Click desired platform to see library..\")), React.createElement(LibraryResults, {\n      selectedTab: this.state.selectedTab,\n      showPlaylist: this.showPlaylist,\n      showSongOptions: this.showSongOptions,\n      libraryPullResults: this.state.selectedTab === \"Favorites\" ? this.state.spotifyFavoritesResults : this.state.spoitfyPlaylistsResults,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    })) : // Else, if a playlist is selected, show playlist tracks\n    React.createElement(\"div\", {\n      className: \"libraryMiddle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"playlistHeaderDiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      id: \"backToLibraryBtn\",\n      onClick: this.backToLibraryFromPlaylist,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      id: \"playlistOptionsBtn\",\n      onClick: () => this.showPlaylistOptions(this.state.selectedPlaylistInfo),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"playlistHeaderInfoDiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      id: \"playlistHeaderImg\",\n      src: this.state.selectedPlaylistInfo.images[0].url,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"playlistHeaderTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261\n      },\n      __self: this\n    }, this.state.selectedPlaylistInfo.name), React.createElement(\"p\", {\n      className: \"numTracksHeader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, this.state.selectedPlaylistInfo.tracks.total + \" songs\"))), React.createElement(LibraryResults, {\n      selectedTab: \"Favorites\",\n      showPlaylist: this.showPlaylist,\n      showSongOptions: this.showSongOptions,\n      libraryPullResults: this.state.selectedPlaylistTracksInfo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    })), React.createElement(NotificationContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }), this.state.songOptionsSelected ? React.createElement(\"div\", {\n      className: \"libraryRight\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"songOptionsAlbumImg\",\n      src: this.state.selectedSongInfo.album.images[0].url,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"songOptionsTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }, this.state.selectedSongInfo.name), React.createElement(\"p\", {\n      className: \"songOptionsArtist\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }, this.formatArtistString(this.state.selectedSongInfo.artists)), React.createElement(\"div\", {\n      id: \"firstSeparatorLine\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      id: \"addToQueueBtn\",\n      onClick: this.addToQueue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"secondSeparatorLine\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      id: \"viewOnSpotifyBtn\",\n      onClick: () => this.viewOnSpotify(this.state.selectedSongInfo),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297\n      },\n      __self: this\n    })) : // If Playlist Options was selected, show selected playlist info on right side\n    this.state.playlistOptionsSelected ? React.createElement(\"div\", {\n      className: \"libraryRight\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"songOptionsAlbumImg\",\n      src: this.state.selectedPlaylistInfo.images[0].url,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"songOptionsTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, this.state.selectedPlaylistInfo.name), React.createElement(\"p\", {\n      className: \"songOptionsArtist\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, this.state.selectedPlaylistInfo.tracks.total + \" songs\"), React.createElement(\"div\", {\n      id: \"firstSeparatorLine\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      id: \"addToQueueBtn\",\n      onClick: this.addToQueue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      id: \"secondSeparatorLine\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      id: \"viewOnSpotifyBtn\",\n      onClick: () => this.viewOnSpotify(this.state.selectedPlaylistInfo),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    })) : // If nothing selected, show nothing on right side\n    React.createElement(\"div\", {\n      className: \"libraryRight\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default LibraryWeb;","map":{"version":3,"sources":["/Users/dbanta/Desktop/Aux React/aux-pwa/src/components/library/libraryWeb.jsx"],"names":["React","Component","NotificationContainer","NotificationManager","LibraryResults","Spotify","spotifyWebApi","LibraryWeb","state","spotifyFavoritesResults","global","spoitfyPlaylistsResults","selectedTab","playlistSelected","selectedPlaylistInfo","selectedPlaylistTracksInfo","songOptionsSelected","selectedSongInfo","playlistOptionsSelected","createNotification","type","console","log","info","success","warning","error","getSpotifyLibrary","getMySavedTracks","limit","then","response","setState","items","reason","getUserPlaylists","getMe","spotifyUserID","id","tabClick","tabName","i","tablinks","document","getElementsByClassName","length","className","getPlaylistTracks","playlistID","userID","showPlaylist","playlistInfo","div","style","height","backToLibraryFromPlaylist","showSongOptions","songInfo","songInfoCopy","track","showPlaylistOptions","formatArtistString","artistObj","artistString","numArtists","key","Object","keys","artist","name","addToQueue","viewOnSpotify","url","external_urls","spotify","win","window","open","focus","render","images","tracks","total","album","artists"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"../../styles/LibraryWeb.css\";\nimport {\n  NotificationContainer,\n  NotificationManager,\n} from \"react-notifications\";\nimport \"react-notifications/lib/notifications.css\";\n\nimport LibraryResults from \"./libraryResults\";\n\nimport Spotify from \"spotify-web-api-js\";\nconst spotifyWebApi = new Spotify();\n\nclass LibraryWeb extends Component {\n  state = {\n    spotifyFavoritesResults: global.spotifyFavoritesResults,\n    spoitfyPlaylistsResults: global.spoitfyPlaylistsResults,\n    selectedTab: \"Favorites\",\n    playlistSelected: false,\n    selectedPlaylistInfo: \"\",\n    selectedPlaylistTracksInfo: \"\",\n    songOptionsSelected: false,\n    selectedSongInfo: \"HI\",\n    playlistOptionsSelected: false,\n  };\n\n  createNotification = (type) => {\n    console.log(\"GOT TO CREATE NOTIFICATION\");\n    switch (type) {\n      case \"info\":\n        NotificationManager.info(\"Info message\");\n        break;\n      case \"success\":\n        NotificationManager.success(\"Success message\", \"Title here\");\n        break;\n      case \"warning\":\n        NotificationManager.warning(\n          \"Warning message\",\n          \"Close after 3000ms\",\n          3000\n        );\n        break;\n      case \"error\":\n        NotificationManager.error(\n          \"Make sure you are logged into your Spotify\",\n          \"Error!\",\n          5000,\n          () => {\n            //alert(\"callback\");\n          }\n        );\n        break;\n    }\n    return () => {};\n  };\n\n  getSpotifyLibrary = () => {\n    spotifyWebApi.getMySavedTracks({ limit: 50 }).then(\n      (response) => {\n        this.setState({\n          spotifyFavoritesResults: response.items,\n        });\n        global.spotifyFavoritesResults = response.items;\n      },\n      (reason) => {\n        console.log(\"GOT TO ERROR\");\n        console.error(reason); // Error!\n      }\n    );\n\n    spotifyWebApi.getUserPlaylists().then(\n      (response) => {\n        this.setState({\n          spoitfyPlaylistsResults: response.items,\n        });\n        global.spoitfyPlaylistsResults = response.items;\n      },\n      (reason) => {\n        console.log(\"GOT TO ERROR\");\n        console.error(reason); // Error!\n      }\n    );\n\n    spotifyWebApi.getMe().then(\n      (response) => {\n        global.spotifyUserID = response.id;\n      },\n      (reason) => {\n        console.log(\"GOT TO ERROR (getME)\");\n        console.error(reason); // Error!\n        this.createNotification(\"error\");\n      }\n    );\n  };\n\n  tabClick = (tabName) => {\n    var i, tablinks;\n\n    tablinks = document.getElementsByClassName(\"tablinks\");\n\n    for (i = 0; i < tablinks.length; i++) {\n      if (tablinks[i].id === tabName) {\n        tablinks[i].className = \"tablinks active\";\n      } else {\n        tablinks[i].className = \"tablinks\";\n      }\n    }\n\n    this.setState({\n      selectedTab: tabName,\n    });\n  };\n\n  getPlaylistTracks = (playlistID) => {\n    const userID = global.spotifyUserID;\n\n    spotifyWebApi.getPlaylistTracks(userID, playlistID).then(\n      (response) => {\n        this.setState({\n          selectedPlaylistTracksInfo: response.items,\n        });\n      },\n      (reason) => {\n        console.log(\"GOT TO ERROR (getPlaylistTracks)\");\n        this.createNotification(\"error\");\n        console.error(reason); // Error!\n      }\n    );\n  };\n\n  showPlaylist = (playlistInfo) => {\n    console.log(playlistInfo);\n\n    var div = document.getElementsByClassName(\"libraryDiv\")[0];\n    div.style.height = \"69%\";\n\n    this.getPlaylistTracks(playlistInfo.id);\n\n    this.setState({\n      playlistSelected: true,\n      selectedPlaylistInfo: playlistInfo,\n    });\n  };\n\n  backToLibraryFromPlaylist = () => {\n    var div = document.getElementsByClassName(\"libraryDiv\")[0];\n    div.style.height = \"78%\";\n\n    this.setState({\n      playlistSelected: false,\n      selectedPlaylistInfo: \"playlistInfo\",\n    });\n  };\n\n  showSongOptions = (songInfo) => {\n    var songInfoCopy = songInfo.track;\n\n    this.setState({\n      songOptionsSelected: true,\n      playlistOptionsSelected: false,\n      selectedSongInfo: songInfoCopy,\n    });\n  };\n\n  showPlaylistOptions = (playlistInfo) => {\n    this.setState({\n      playlistOptionsSelected: true,\n      songOptionsSelected: false,\n      selectedPlaylistInfo: playlistInfo,\n    });\n  };\n\n  formatArtistString = (artistObj) => {\n    var artistString = \"\";\n    var numArtists = 0;\n\n    for (var key in Object.keys(artistObj)) {\n      var artist = artistObj[key];\n\n      if (numArtists > 0) {\n        artistString = artistString + \", \" + artist.name;\n      } else {\n        artistString = artist.name;\n      }\n      numArtists += 1;\n    }\n\n    return artistString;\n  };\n\n  addToQueue = () => {};\n\n  viewOnSpotify = (songInfo) => {\n    let url = songInfo.external_urls.spotify;\n\n    var win = window.open(url, \"_blank\");\n    win.focus();\n  };\n\n  render() {\n    return (\n      <div className=\"libraryFlex\">\n        {/* If a playlist is not selected, show library */}\n        {!this.state.playlistSelected ? (\n          <div className=\"libraryMiddle\">\n            <div className=\"libraryQueryDiv\">\n              <div className=\"libraryTabDiv\">\n                <button\n                  class=\"tablinks active\"\n                  onClick={() => this.tabClick(\"Favorites\")}\n                  id=\"Favorites\">\n                  Favorites\n                </button>\n                <button\n                  class=\"tablinks\"\n                  onClick={() => this.tabClick(\"Playlists\")}\n                  id=\"Playlists\">\n                  Playlists\n                </button>\n              </div>\n              <div className=\"libraryButtonDiv\">\n                <button\n                  id=\"spotifyLibraryBtn\"\n                  onClick={this.getSpotifyLibrary}></button>\n              </div>\n              <p id=\"libraryDivHeader\">\n                {this.state.spotifyFavoritesResults.length > 0\n                  ? \"Spotify \" + this.state.selectedTab\n                  : \"Click desired platform to see library..\"}\n              </p>\n            </div>\n            <LibraryResults\n              selectedTab={this.state.selectedTab}\n              showPlaylist={this.showPlaylist}\n              showSongOptions={this.showSongOptions}\n              libraryPullResults={\n                this.state.selectedTab === \"Favorites\"\n                  ? this.state.spotifyFavoritesResults\n                  : this.state.spoitfyPlaylistsResults\n              }></LibraryResults>\n          </div>\n        ) : (\n          // Else, if a playlist is selected, show playlist tracks\n          <div className=\"libraryMiddle\">\n            <div className=\"playlistHeaderDiv\">\n              <button\n                id=\"backToLibraryBtn\"\n                onClick={this.backToLibraryFromPlaylist}></button>\n              <button\n                id=\"playlistOptionsBtn\"\n                onClick={() =>\n                  this.showPlaylistOptions(this.state.selectedPlaylistInfo)\n                }></button>\n\n              <div className=\"playlistHeaderInfoDiv\">\n                <img\n                  id=\"playlistHeaderImg\"\n                  src={this.state.selectedPlaylistInfo.images[0].url}\n                  alt=\"\"></img>\n                <p className=\"playlistHeaderTitle\">\n                  {this.state.selectedPlaylistInfo.name}\n                </p>\n                <p className=\"numTracksHeader\">\n                  {this.state.selectedPlaylistInfo.tracks.total + \" songs\"}\n                </p>\n              </div>\n            </div>\n            <LibraryResults\n              selectedTab={\"Favorites\"}\n              showPlaylist={this.showPlaylist}\n              showSongOptions={this.showSongOptions}\n              libraryPullResults={\n                this.state.selectedPlaylistTracksInfo\n              }></LibraryResults>\n          </div>\n        )}\n        <NotificationContainer />\n\n        {/* If Song Options was selected, show selected song info on right side */}\n        {this.state.songOptionsSelected ? (\n          <div className=\"libraryRight\">\n            <img\n              className=\"songOptionsAlbumImg\"\n              src={this.state.selectedSongInfo.album.images[0].url}\n              alt=\"\"></img>\n\n            <p className=\"songOptionsTitle\">\n              {this.state.selectedSongInfo.name}\n            </p>\n            <p className=\"songOptionsArtist\">\n              {this.formatArtistString(this.state.selectedSongInfo.artists)}\n            </p>\n            <div id=\"firstSeparatorLine\"></div>\n            <button id=\"addToQueueBtn\" onClick={this.addToQueue}></button>\n            <div id=\"secondSeparatorLine\"></div>\n            <button\n              id=\"viewOnSpotifyBtn\"\n              onClick={() =>\n                this.viewOnSpotify(this.state.selectedSongInfo)\n              }></button>\n          </div>\n        ) : // If Playlist Options was selected, show selected playlist info on right side\n        this.state.playlistOptionsSelected ? (\n          <div className=\"libraryRight\">\n            <img\n              className=\"songOptionsAlbumImg\"\n              src={this.state.selectedPlaylistInfo.images[0].url}\n              alt=\"\"></img>\n\n            <p className=\"songOptionsTitle\">\n              {this.state.selectedPlaylistInfo.name}\n            </p>\n            <p className=\"songOptionsArtist\">\n              {this.state.selectedPlaylistInfo.tracks.total + \" songs\"}\n            </p>\n            <div id=\"firstSeparatorLine\"></div>\n            <button id=\"addToQueueBtn\" onClick={this.addToQueue}></button>\n            <div id=\"secondSeparatorLine\"></div>\n            <button\n              id=\"viewOnSpotifyBtn\"\n              onClick={() =>\n                this.viewOnSpotify(this.state.selectedPlaylistInfo)\n              }></button>\n          </div>\n        ) : (\n          // If nothing selected, show nothing on right side\n          <div className=\"libraryRight\"></div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default LibraryWeb;\n"]},"metadata":{},"sourceType":"module"}