{"ast":null,"code":"var _jsxFileName = \"/Users/dbanta/Desktop/Aux React/aux-pwa/src/components/session/sessionWeb.jsx\";\nimport React, { Component, useEffect } from \"react\";\nimport { viewOnSpotify, queueSpotifySong, skipSongSpotify } from \"../../utils/spotifyInterface\";\nimport \"../../styles/SessionWeb.css\";\nimport SessionController from \"./sessionController\";\nimport SessionQueue from \"./sessionQueue\";\nimport SpotifyPlayer from \"react-spotify-web-playback\";\n\nclass SessionWeb extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentSong: [],\n      queue: [],\n      spotifyURIQueue: [\"spotify:track:2aPTvyE09vUCRwVvj0I8WK\"],\n      timeToSkip: true,\n      currentSongsPlatform: \"Spotify\"\n    };\n\n    this.popQueue = queue => {\n      if (queue.length == 0) {\n        return [\"None\", []];\n      }\n\n      var currentSong = queue.pop(0);\n      return [currentSong, queue];\n    };\n\n    this.readGlobalQueue = () => {\n      if (global.sessionQueue.length === 0) {\n        return;\n      } else if (global.isContentPlaying) {}\n    };\n\n    this.checkPlayerStatus = state => {\n      console.log(\"Player Status: \", state);\n    };\n  }\n\n  render() {\n    // TODO: Figure out how to start songs and add to queue, song skips everytime you go to session tab\n    if (this.state.timeToSkip) {\n      // pop queue to get current song and new queue\n      var queuePop = this.popQueue(global.sessionQueue);\n      var currentSong = queuePop[0];\n      var newQueue = queuePop[1];\n      console.log(\"Current Song:\", currentSong);\n      console.log(\"New Queue:\", newQueue); // Check if there are songs in the queue\n\n      if (currentSong != \"None\") {\n        // Check the platform of the song\n        if (currentSong[0] == \"Spotify\") {\n          var songURI = currentSong[1][\"uri\"];\n          console.log(\"songURI\", songURI);\n          queueSpotifySong(songURI, global.spotifyAccessToken);\n          skipSongSpotify(global.spotifyAccessToken);\n          global.isContentPlaying = true;\n        }\n      } else {\n        global.isContentPlaying = false;\n      }\n\n      global.sessionQueue = newQueue;\n      global.currentlyPlaying = currentSong;\n    }\n\n    return /*#__PURE__*/React.createElement(React.Suspense, {\n      fallback: /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 33\n        }\n      }, \"Loading...\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sessionFlex\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sessionMiddle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(SessionController, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(SessionQueue, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sessionRight\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\n\nexport default SessionWeb;","map":{"version":3,"sources":["/Users/dbanta/Desktop/Aux React/aux-pwa/src/components/session/sessionWeb.jsx"],"names":["React","Component","useEffect","viewOnSpotify","queueSpotifySong","skipSongSpotify","SessionController","SessionQueue","SpotifyPlayer","SessionWeb","state","currentSong","queue","spotifyURIQueue","timeToSkip","currentSongsPlatform","popQueue","length","pop","readGlobalQueue","global","sessionQueue","isContentPlaying","checkPlayerStatus","console","log","render","queuePop","newQueue","songURI","spotifyAccessToken","currentlyPlaying"],"mappings":"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","sourcesContent":["import React, { Component, useEffect } from \"react\";\n\nimport {\n  viewOnSpotify,\n  queueSpotifySong,\n  skipSongSpotify,\n} from \"../../utils/spotifyInterface\";\n\nimport \"../../styles/SessionWeb.css\";\n\nimport SessionController from \"./sessionController\";\nimport SessionQueue from \"./sessionQueue\";\n\nimport SpotifyPlayer from \"react-spotify-web-playback\";\n\nclass SessionWeb extends Component {\n  state = {\n    currentSong: [],\n    queue: [],\n    spotifyURIQueue: [\"spotify:track:2aPTvyE09vUCRwVvj0I8WK\"],\n    timeToSkip: true,\n    currentSongsPlatform: \"Spotify\",\n  };\n\n  popQueue = (queue) => {\n    if (queue.length == 0) {\n      return [\"None\", []];\n    }\n\n    var currentSong = queue.pop(0);\n\n    return [currentSong, queue];\n  };\n\n  readGlobalQueue = () => {\n    if (global.sessionQueue.length === 0) {\n      return;\n    } else if (global.isContentPlaying) {\n    }\n  };\n\n  checkPlayerStatus = (state) => {\n    console.log(\"Player Status: \", state);\n  };\n\n  render() {\n    // TODO: Figure out how to start songs and add to queue, song skips everytime you go to session tab\n    if (this.state.timeToSkip) {\n      // pop queue to get current song and new queue\n      var queuePop = this.popQueue(global.sessionQueue);\n\n      var currentSong = queuePop[0];\n\n      var newQueue = queuePop[1];\n\n      console.log(\"Current Song:\", currentSong);\n      console.log(\"New Queue:\", newQueue);\n\n      // Check if there are songs in the queue\n      if (currentSong != \"None\") {\n        // Check the platform of the song\n        if (currentSong[0] == \"Spotify\") {\n          var songURI = currentSong[1][\"uri\"];\n          console.log(\"songURI\", songURI);\n\n          queueSpotifySong(songURI, global.spotifyAccessToken);\n          skipSongSpotify(global.spotifyAccessToken);\n\n          global.isContentPlaying = true;\n        }\n      } else {\n        global.isContentPlaying = false;\n      }\n\n      global.sessionQueue = newQueue;\n      global.currentlyPlaying = currentSong;\n    }\n\n    return (\n      <React.Suspense fallback={<div>Loading...</div>}>\n        <div className=\"sessionFlex\">\n          <div className=\"sessionMiddle\">\n            <SessionController></SessionController>\n            <SessionQueue></SessionQueue>\n          </div>\n          <div className=\"sessionRight\"></div>\n        </div>\n      </React.Suspense>\n    );\n  }\n}\n\nexport default SessionWeb;\n"]},"metadata":{},"sourceType":"module"}