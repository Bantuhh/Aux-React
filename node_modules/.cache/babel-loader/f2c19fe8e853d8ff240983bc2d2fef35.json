{"ast":null,"code":"var _jsxFileName = \"/Users/dbanta/Desktop/Aux React/aux-pwa/src/components/library/libraryWeb.jsx\";\nimport React, { Component } from \"react\";\nimport \"../../styles/LibraryWeb.css\";\nimport { NotificationContainer, NotificationManager } from \"react-notifications\";\nimport \"react-notifications/lib/notifications.css\";\nimport LibraryResults from \"./libraryResults\";\nimport Spotify from \"spotify-web-api-js\";\nconst spotifyWebApi = new Spotify();\n\nclass LibraryWeb extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      spotifyFavoritesResults: global.spotifyFavoritesResults,\n      spoitfyPlaylistsResults: global.spoitfyPlaylistsResults,\n      selectedTab: \"Favorites\",\n      playlistSelected: false,\n      selectedPlaylistInfo: \"\",\n      selectedPlaylistTracksInfo: \"\",\n      songOptionsSelected: false,\n      selectedSongInfo: \"\"\n    };\n\n    this.createNotification = type => {\n      console.log(\"GOT TO CREATE NOTIFICATION\");\n\n      switch (type) {\n        case \"info\":\n          NotificationManager.info(\"Info message\");\n          break;\n\n        case \"success\":\n          NotificationManager.success(\"Success message\", \"Title here\");\n          break;\n\n        case \"warning\":\n          NotificationManager.warning(\"Warning message\", \"Close after 3000ms\", 3000);\n          break;\n\n        case \"error\":\n          NotificationManager.error(\"Make sure you are logged into your Spotify\", \"Error!\", 5000, () => {//alert(\"callback\");\n          });\n          break;\n      }\n\n      return () => {};\n    };\n\n    this.getSpotifyLibrary = () => {\n      spotifyWebApi.getMySavedTracks({\n        limit: 50\n      }).then(response => {\n        this.setState({\n          spotifyFavoritesResults: response.items\n        });\n        global.spotifyFavoritesResults = response.items;\n      }, reason => {\n        console.log(\"GOT TO ERROR\");\n        console.error(reason); // Error!\n      });\n      spotifyWebApi.getUserPlaylists().then(response => {\n        this.setState({\n          spoitfyPlaylistsResults: response.items\n        });\n        global.spoitfyPlaylistsResults = response.items;\n      }, reason => {\n        console.log(\"GOT TO ERROR\");\n        console.error(reason); // Error!\n      });\n      spotifyWebApi.getMe().then(response => {\n        global.spotifyUserID = response.id;\n      }, reason => {\n        console.log(\"GOT TO ERROR (getME)\");\n        console.error(reason); // Error!\n\n        this.createNotification(\"error\");\n      });\n    };\n\n    this.tabClick = tabName => {\n      var i, tablinks;\n      tablinks = document.getElementsByClassName(\"tablinks\");\n\n      for (i = 0; i < tablinks.length; i++) {\n        if (tablinks[i].id === tabName) {\n          tablinks[i].className = \"tablinks active\";\n        } else {\n          tablinks[i].className = \"tablinks\";\n        }\n      }\n\n      this.setState({\n        selectedTab: tabName\n      });\n    };\n\n    this.getPlaylistTracks = playlistID => {\n      const userID = global.spotifyUserID;\n      spotifyWebApi.getPlaylistTracks(userID, playlistID).then(response => {\n        this.setState({\n          selectedPlaylistTracksInfo: response.items\n        });\n      }, reason => {\n        console.log(\"GOT TO ERROR (getPlaylistTracks)\");\n        this.createNotification(\"error\");\n        console.error(reason); // Error!\n      });\n    };\n\n    this.showPlaylist = playlistInfo => {\n      console.log(playlistInfo);\n      var div = document.getElementsByClassName(\"libraryDiv\")[0];\n      console.log(div);\n      div.style.height = \"69%\";\n      this.getPlaylistTracks(playlistInfo.id);\n      this.setState({\n        playlistSelected: true,\n        selectedPlaylistInfo: playlistInfo\n      });\n    };\n\n    this.backToLibraryFromPlaylist = () => {\n      var div = document.getElementsByClassName(\"libraryDiv\")[0];\n      div.style.height = \"78%\";\n      this.setState({\n        playlistSelected: false,\n        selectedPlaylistInfo: \"playlistInfo\"\n      });\n    };\n\n    this.showSongOptions = songInfo => {\n      console.log(songInfo);\n      this.setState({\n        songOptionsSelected: true,\n        selectedSongInfo: songInfo\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"libraryFlex\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, !this.state.playlistSelected ? React.createElement(\"div\", {\n      className: \"libraryMiddle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"libraryQueryDiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"libraryTabDiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      class: \"tablinks active\",\n      onClick: () => this.tabClick(\"Favorites\"),\n      id: \"Favorites\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, \"Favorites\"), React.createElement(\"button\", {\n      class: \"tablinks\",\n      onClick: () => this.tabClick(\"Playlists\"),\n      id: \"Playlists\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, \"Playlists\")), React.createElement(\"div\", {\n      className: \"libraryButtonDiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      id: \"spotifyLibraryBtn\",\n      onClick: this.getSpotifyLibrary,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      id: \"libraryDivHeader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, this.state.spotifyFavoritesResults.length > 0 ? \"Spotify \" + this.state.selectedTab : \"Click desired platform to see library..\")), React.createElement(LibraryResults, {\n      selectedTab: this.state.selectedTab,\n      showPlaylist: this.showPlaylist,\n      showSongOptions: this.showSongOptions,\n      libraryPullResults: this.state.selectedTab === \"Favorites\" ? this.state.spotifyFavoritesResults : this.state.spoitfyPlaylistsResults,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    })) : React.createElement(\"div\", {\n      className: \"libraryMiddle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"playlistHeaderDiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      id: \"backToLibraryBtn\",\n      onClick: this.backToLibraryFromPlaylist,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      id: \"playlistOptionsBtn\",\n      onClick: this.getSpotifyLibrary,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"playlistHeaderInfoDiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      id: \"playlistHeaderImg\",\n      src: this.state.selectedPlaylistInfo.images[0].url,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"playlistHeaderTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }, this.state.selectedPlaylistInfo.name), React.createElement(\"p\", {\n      className: \"numTracksHeader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, this.state.selectedPlaylistInfo.tracks.total + \" songs\"))), React.createElement(LibraryResults, {\n      selectedTab: \"Favorites\",\n      showPlaylist: this.showPlaylist,\n      showSongOptions: this.showSongOptions,\n      libraryPullResults: this.state.selectedPlaylistTracksInfo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    })), React.createElement(NotificationContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }), this.state.songOptionsSelected ? React.createElement(\"div\", {\n      className: \"libraryRight\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"albumImg\",\n      src: albumImgPath,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      className: \"songTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, songInfo.name), React.createElement(\"p\", {\n      className: \"songArtist\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, artistString)) : React.createElement(\"div\", {\n      className: \"libraryRight\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default LibraryWeb;","map":{"version":3,"sources":["/Users/dbanta/Desktop/Aux React/aux-pwa/src/components/library/libraryWeb.jsx"],"names":["React","Component","NotificationContainer","NotificationManager","LibraryResults","Spotify","spotifyWebApi","LibraryWeb","state","spotifyFavoritesResults","global","spoitfyPlaylistsResults","selectedTab","playlistSelected","selectedPlaylistInfo","selectedPlaylistTracksInfo","songOptionsSelected","selectedSongInfo","createNotification","type","console","log","info","success","warning","error","getSpotifyLibrary","getMySavedTracks","limit","then","response","setState","items","reason","getUserPlaylists","getMe","spotifyUserID","id","tabClick","tabName","i","tablinks","document","getElementsByClassName","length","className","getPlaylistTracks","playlistID","userID","showPlaylist","playlistInfo","div","style","height","backToLibraryFromPlaylist","showSongOptions","songInfo","render","images","url","name","tracks","total","albumImgPath","artistString"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"../../styles/LibraryWeb.css\";\nimport {\n  NotificationContainer,\n  NotificationManager,\n} from \"react-notifications\";\nimport \"react-notifications/lib/notifications.css\";\n\nimport LibraryResults from \"./libraryResults\";\n\nimport Spotify from \"spotify-web-api-js\";\nconst spotifyWebApi = new Spotify();\n\nclass LibraryWeb extends Component {\n  state = {\n    spotifyFavoritesResults: global.spotifyFavoritesResults,\n    spoitfyPlaylistsResults: global.spoitfyPlaylistsResults,\n    selectedTab: \"Favorites\",\n    playlistSelected: false,\n    selectedPlaylistInfo: \"\",\n    selectedPlaylistTracksInfo: \"\",\n    songOptionsSelected: false,\n    selectedSongInfo: \"\",\n  };\n\n  createNotification = (type) => {\n    console.log(\"GOT TO CREATE NOTIFICATION\");\n    switch (type) {\n      case \"info\":\n        NotificationManager.info(\"Info message\");\n        break;\n      case \"success\":\n        NotificationManager.success(\"Success message\", \"Title here\");\n        break;\n      case \"warning\":\n        NotificationManager.warning(\n          \"Warning message\",\n          \"Close after 3000ms\",\n          3000\n        );\n        break;\n      case \"error\":\n        NotificationManager.error(\n          \"Make sure you are logged into your Spotify\",\n          \"Error!\",\n          5000,\n          () => {\n            //alert(\"callback\");\n          }\n        );\n        break;\n    }\n    return () => {};\n  };\n\n  getSpotifyLibrary = () => {\n    spotifyWebApi.getMySavedTracks({ limit: 50 }).then(\n      (response) => {\n        this.setState({\n          spotifyFavoritesResults: response.items,\n        });\n        global.spotifyFavoritesResults = response.items;\n      },\n      (reason) => {\n        console.log(\"GOT TO ERROR\");\n        console.error(reason); // Error!\n      }\n    );\n\n    spotifyWebApi.getUserPlaylists().then(\n      (response) => {\n        this.setState({\n          spoitfyPlaylistsResults: response.items,\n        });\n        global.spoitfyPlaylistsResults = response.items;\n      },\n      (reason) => {\n        console.log(\"GOT TO ERROR\");\n        console.error(reason); // Error!\n      }\n    );\n\n    spotifyWebApi.getMe().then(\n      (response) => {\n        global.spotifyUserID = response.id;\n      },\n      (reason) => {\n        console.log(\"GOT TO ERROR (getME)\");\n        console.error(reason); // Error!\n        this.createNotification(\"error\");\n      }\n    );\n  };\n\n  tabClick = (tabName) => {\n    var i, tablinks;\n\n    tablinks = document.getElementsByClassName(\"tablinks\");\n\n    for (i = 0; i < tablinks.length; i++) {\n      if (tablinks[i].id === tabName) {\n        tablinks[i].className = \"tablinks active\";\n      } else {\n        tablinks[i].className = \"tablinks\";\n      }\n    }\n\n    this.setState({\n      selectedTab: tabName,\n    });\n  };\n\n  getPlaylistTracks = (playlistID) => {\n    const userID = global.spotifyUserID;\n\n    spotifyWebApi.getPlaylistTracks(userID, playlistID).then(\n      (response) => {\n        this.setState({\n          selectedPlaylistTracksInfo: response.items,\n        });\n      },\n      (reason) => {\n        console.log(\"GOT TO ERROR (getPlaylistTracks)\");\n        this.createNotification(\"error\");\n        console.error(reason); // Error!\n      }\n    );\n  };\n\n  showPlaylist = (playlistInfo) => {\n    console.log(playlistInfo);\n\n    var div = document.getElementsByClassName(\"libraryDiv\")[0];\n    console.log(div);\n    div.style.height = \"69%\";\n\n    this.getPlaylistTracks(playlistInfo.id);\n\n    this.setState({\n      playlistSelected: true,\n      selectedPlaylistInfo: playlistInfo,\n    });\n  };\n\n  backToLibraryFromPlaylist = () => {\n    var div = document.getElementsByClassName(\"libraryDiv\")[0];\n    div.style.height = \"78%\";\n\n    this.setState({\n      playlistSelected: false,\n      selectedPlaylistInfo: \"playlistInfo\",\n    });\n  };\n\n  showSongOptions = (songInfo) => {\n    console.log(songInfo);\n\n    this.setState({\n      songOptionsSelected: true,\n      selectedSongInfo: songInfo,\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"libraryFlex\">\n        {!this.state.playlistSelected ? (\n          <div className=\"libraryMiddle\">\n            <div className=\"libraryQueryDiv\">\n              <div className=\"libraryTabDiv\">\n                <button\n                  class=\"tablinks active\"\n                  onClick={() => this.tabClick(\"Favorites\")}\n                  id=\"Favorites\">\n                  Favorites\n                </button>\n                <button\n                  class=\"tablinks\"\n                  onClick={() => this.tabClick(\"Playlists\")}\n                  id=\"Playlists\">\n                  Playlists\n                </button>\n              </div>\n              <div className=\"libraryButtonDiv\">\n                <button\n                  id=\"spotifyLibraryBtn\"\n                  onClick={this.getSpotifyLibrary}></button>\n              </div>\n              <p id=\"libraryDivHeader\">\n                {this.state.spotifyFavoritesResults.length > 0\n                  ? \"Spotify \" + this.state.selectedTab\n                  : \"Click desired platform to see library..\"}\n              </p>\n            </div>\n            <LibraryResults\n              selectedTab={this.state.selectedTab}\n              showPlaylist={this.showPlaylist}\n              showSongOptions={this.showSongOptions}\n              libraryPullResults={\n                this.state.selectedTab === \"Favorites\"\n                  ? this.state.spotifyFavoritesResults\n                  : this.state.spoitfyPlaylistsResults\n              }></LibraryResults>\n          </div>\n        ) : (\n          <div className=\"libraryMiddle\">\n            <div className=\"playlistHeaderDiv\">\n              <button\n                id=\"backToLibraryBtn\"\n                onClick={this.backToLibraryFromPlaylist}></button>\n              <button\n                id=\"playlistOptionsBtn\"\n                onClick={this.getSpotifyLibrary}></button>\n\n              <div className=\"playlistHeaderInfoDiv\">\n                <img\n                  id=\"playlistHeaderImg\"\n                  src={this.state.selectedPlaylistInfo.images[0].url}\n                  alt=\"\"></img>\n                <p className=\"playlistHeaderTitle\">\n                  {this.state.selectedPlaylistInfo.name}\n                </p>\n                <p className=\"numTracksHeader\">\n                  {this.state.selectedPlaylistInfo.tracks.total + \" songs\"}\n                </p>\n              </div>\n            </div>\n            <LibraryResults\n              selectedTab={\"Favorites\"}\n              showPlaylist={this.showPlaylist}\n              showSongOptions={this.showSongOptions}\n              libraryPullResults={\n                this.state.selectedPlaylistTracksInfo\n              }></LibraryResults>\n          </div>\n        )}\n        <NotificationContainer />\n        {this.state.songOptionsSelected ? (\n          <div className=\"libraryRight\">\n            <img className=\"albumImg\" src={albumImgPath} alt=\"\"></img>\n\n            <p className=\"songTitle\">{songInfo.name}</p>\n            <p className=\"songArtist\">{artistString}</p>\n          </div>\n        ) : (\n          <div className=\"libraryRight\"></div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default LibraryWeb;\n"]},"metadata":{},"sourceType":"module"}