{"ast":null,"code":"var _jsxFileName = \"/Users/dbanta/Desktop/Aux React/aux-pwa/src/components/session/sessionController.jsx\";\nimport React, { Component } from \"react\";\nimport \"../../styles/SessionController.css\";\nimport { SessionContext } from \"../../session-context\";\nimport { play, pause, playURI } from \"../../utils/spotifyInterface\";\nimport { formatYTTitle } from \"../../utils/youtubeInterface\";\nimport { popQueue } from \"../../utils/queueInterface\";\nimport spotifyIcon from \"../../resources/images/Spotify.png\";\nimport youtubeIcon from \"../../resources/images/Youtube.png\";\nimport SeekBar from \"./seekbar\";\n\nclass SessionController extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isPlaying: global.isContentPlaying,\n      currentPosition: 0\n    };\n\n    this.playButtonPress = () => {\n      if (global.isContentPlaying) {\n        global.isContentPlaying = false;\n        this.setState({\n          isPlaying: false\n        }); // Check Platform\n\n        if (global.currentlyPlaying[0] === \"Youtube\") {\n          global.youtubePlayer.pauseVideo();\n        } else if (global.currentlyPlaying[0] === \"Spotify\") {\n          pause(global.spotifyAccessToken);\n        }\n      } else {\n        global.isContentPlaying = true;\n        this.setState({\n          isPlaying: true\n        }); // Check Platform\n\n        if (global.currentlyPlaying[0] === \"Youtube\") {\n          global.youtubePlayer.playVideo();\n        } else if (global.currentlyPlaying[0] === \"Spotify\") {\n          play(global.spotifyAccessToken);\n        }\n      }\n    };\n\n    this.skipPressed = () => {\n      if (global.sessionQueue.length === 0) {\n        console.log(\"queue empty\");\n        return;\n      } // Pop Queue\n\n\n      var upNext = popQueue(); // Read next song and determine platform\n\n      if (upNext[0] === \"Spotify\") {\n        var songURI = upNext[1][\"uri\"]; // Pause Youtube if it was playing\n\n        global.youtubePlayer.pauseVideo();\n        playURI(songURI, global.spotifyAccessToken);\n      } else if (upNext[0] === \"Youtube\") {\n        // Pause Spotify if it was playing\n        pause(global.spotifyAccessToken);\n        global.youtubePlayer.loadVideoById(upNext[1].id.videoId, 0);\n      }\n\n      global.isContentPlaying = true;\n      global.currentlyPlaying = upNext;\n      this.context.updateSessionQueue(global.sessionQueue);\n    };\n\n    this.restartPressed = () => {\n      var songInfo = global.currentlyPlaying[1];\n\n      if (global.currentlyPlaying[0] === \"Youtube\") {\n        global.youtubePlayer.loadVideoById(songInfo.id.videoId, 0);\n      } else if (global.currentlyPlaying[1] === \"Spotify\") {\n        const songURI = songInfo[\"uri\"];\n        playURI(songURI, global.spotifyAccessToken);\n      }\n    };\n\n    this.formatArtistString = artistObj => {\n      var artistString = \"\";\n      var numArtists = 0;\n\n      for (var key in Object.keys(artistObj)) {\n        var artist = artistObj[key];\n\n        if (numArtists > 0) {\n          artistString = artistString + \", \" + artist.name;\n        } else {\n          artistString = artist.name;\n        }\n\n        numArtists += 1;\n      }\n\n      return artistString;\n    };\n  }\n\n  // Seek Bar\n  setDuration(data) {\n    this.setState({\n      totalLength: Math.floor(data.duration)\n    });\n  }\n\n  setTime(data) {\n    this.setState({\n      currentPosition: Math.floor(data.currentTime)\n    });\n  }\n\n  seek(time) {\n    time = Math.round(time);\n    this.refs.audioElement && this.refs.audioElement.seek(time);\n    this.setState({\n      currentPosition: time,\n      paused: false\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(SessionContext.Consumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 7\n      }\n    }, ({\n      isContentPlaying\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"controllerDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"currentTrackPic\",\n      src: global.currentlyPlaying === \"\" ? \"\" : global.currentlyPlaying[0] === \"Youtube\" ? global.currentlyPlaying[1].snippet.thumbnails.high.url : global.currentlyPlaying[1].album.images[0].url,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"controllerButtons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"restartButton\",\n      onClick: this.restartPressed,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"playButton\",\n      style: {\n        background: global.isContentPlaying ? \"url(\" + require(\"../../resources/images/PauseButton.png\") + \")\" : \"url(\" + require(\"../../resources/images/PlayButton.png\") + \")\",\n        left: global.isContentPlaying ? \"-5px\" : \"\"\n      },\n      onClick: this.playButtonPress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"skipButton\",\n      onClick: this.skipPressed,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"songText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"TitleandPlatform\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      id: \"songTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }\n    }, global.currentlyPlaying === \"\" ? \"Nothings playing!\" : global.currentlyPlaying[0] === \"Youtube\" ? formatYTTitle(global.currentlyPlaying[1].snippet.title) : global.currentlyPlaying[1].name), global.currentlyPlaying[0] === \"Youtube\" ? /*#__PURE__*/React.createElement(\"img\", {\n      src: youtubeIcon,\n      alt: \"\",\n      className: \"youtubeIconCP\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 19\n      }\n    }) : global.currentlyPlaying[0] === \"Spotify\" ? /*#__PURE__*/React.createElement(\"img\", {\n      src: spotifyIcon,\n      alt: \"\",\n      className: \"spotifyIconCP\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 19\n      }\n    }) : \"\"), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"songArtist\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 15\n      }\n    }, global.currentlyPlaying === \"\" ? \"Search a song or choose from your Library\" : global.currentlyPlaying[0] === \"Youtube\" ? global.currentlyPlaying[1].snippet.channelTitle : this.formatArtistString(global.currentlyPlaying[1].artists))), /*#__PURE__*/React.createElement(SeekBar, {\n      onSeek: this.seek.bind(this),\n      trackLength: this.state.totalLength,\n      onSlidingStart: () => this.setState({\n        paused: true\n      }),\n      currentPosition: this.state.currentPosition,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 13\n      }\n    })));\n  }\n\n}\n\nSessionController.contextType = SessionContext;\nexport default SessionController;","map":{"version":3,"sources":["/Users/dbanta/Desktop/Aux React/aux-pwa/src/components/session/sessionController.jsx"],"names":["React","Component","SessionContext","play","pause","playURI","formatYTTitle","popQueue","spotifyIcon","youtubeIcon","SeekBar","SessionController","state","isPlaying","global","isContentPlaying","currentPosition","playButtonPress","setState","currentlyPlaying","youtubePlayer","pauseVideo","spotifyAccessToken","playVideo","skipPressed","sessionQueue","length","console","log","upNext","songURI","loadVideoById","id","videoId","context","updateSessionQueue","restartPressed","songInfo","formatArtistString","artistObj","artistString","numArtists","key","Object","keys","artist","name","setDuration","data","totalLength","Math","floor","duration","setTime","currentTime","seek","time","round","refs","audioElement","paused","render","snippet","thumbnails","high","url","album","images","background","require","left","title","channelTitle","artists","bind","contextType"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAO,oCAAP;AAEA,SAASC,cAAT,QAA+B,uBAA/B;AAEA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,OAAtB,QAAqC,8BAArC;AACA,SAASC,aAAT,QAA8B,8BAA9B;AAEA,SAASC,QAAT,QAAyB,4BAAzB;AAEA,OAAOC,WAAP,MAAwB,oCAAxB;AACA,OAAOC,WAAP,MAAwB,oCAAxB;AAEA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,iBAAN,SAAgCV,SAAhC,CAA0C;AAAA;AAAA;AAAA,SACxCW,KADwC,GAChC;AACNC,MAAAA,SAAS,EAAEC,MAAM,CAACC,gBADZ;AAENC,MAAAA,eAAe,EAAE;AAFX,KADgC;;AAAA,SAQxCC,eARwC,GAQtB,MAAM;AACtB,UAAIH,MAAM,CAACC,gBAAX,EAA6B;AAC3BD,QAAAA,MAAM,CAACC,gBAAP,GAA0B,KAA1B;AACA,aAAKG,QAAL,CAAc;AAAEL,UAAAA,SAAS,EAAE;AAAb,SAAd,EAF2B,CAG3B;;AACA,YAAIC,MAAM,CAACK,gBAAP,CAAwB,CAAxB,MAA+B,SAAnC,EAA8C;AAC5CL,UAAAA,MAAM,CAACM,aAAP,CAAqBC,UAArB;AACD,SAFD,MAEO,IAAIP,MAAM,CAACK,gBAAP,CAAwB,CAAxB,MAA+B,SAAnC,EAA8C;AACnDf,UAAAA,KAAK,CAACU,MAAM,CAACQ,kBAAR,CAAL;AACD;AACF,OATD,MASO;AACLR,QAAAA,MAAM,CAACC,gBAAP,GAA0B,IAA1B;AACA,aAAKG,QAAL,CAAc;AAAEL,UAAAA,SAAS,EAAE;AAAb,SAAd,EAFK,CAGL;;AACA,YAAIC,MAAM,CAACK,gBAAP,CAAwB,CAAxB,MAA+B,SAAnC,EAA8C;AAC5CL,UAAAA,MAAM,CAACM,aAAP,CAAqBG,SAArB;AACD,SAFD,MAEO,IAAIT,MAAM,CAACK,gBAAP,CAAwB,CAAxB,MAA+B,SAAnC,EAA8C;AACnDhB,UAAAA,IAAI,CAACW,MAAM,CAACQ,kBAAR,CAAJ;AAED;AACF;AACF,KA7BuC;;AAAA,SA+BxCE,WA/BwC,GA+B1B,MAAM;AAClB,UAAIV,MAAM,CAACW,YAAP,CAAoBC,MAApB,KAA+B,CAAnC,EAAsC;AACpCC,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA;AACD,OAJiB,CAMlB;;;AACA,UAAIC,MAAM,GAAGtB,QAAQ,EAArB,CAPkB,CASlB;;AACA,UAAIsB,MAAM,CAAC,CAAD,CAAN,KAAc,SAAlB,EAA6B;AAC3B,YAAIC,OAAO,GAAGD,MAAM,CAAC,CAAD,CAAN,CAAU,KAAV,CAAd,CAD2B,CAE3B;;AACAf,QAAAA,MAAM,CAACM,aAAP,CAAqBC,UAArB;AACAhB,QAAAA,OAAO,CAACyB,OAAD,EAAUhB,MAAM,CAACQ,kBAAjB,CAAP;AACD,OALD,MAKO,IAAIO,MAAM,CAAC,CAAD,CAAN,KAAc,SAAlB,EAA6B;AAClC;AACAzB,QAAAA,KAAK,CAACU,MAAM,CAACQ,kBAAR,CAAL;AACAR,QAAAA,MAAM,CAACM,aAAP,CAAqBW,aAArB,CAAmCF,MAAM,CAAC,CAAD,CAAN,CAAUG,EAAV,CAAaC,OAAhD,EAAyD,CAAzD;AACD;;AAEDnB,MAAAA,MAAM,CAACC,gBAAP,GAA0B,IAA1B;AACAD,MAAAA,MAAM,CAACK,gBAAP,GAA0BU,MAA1B;AAEA,WAAKK,OAAL,CAAaC,kBAAb,CAAgCrB,MAAM,CAACW,YAAvC;AACD,KAxDuC;;AAAA,SA0DxCW,cA1DwC,GA0DvB,MAAM;AACrB,UAAIC,QAAQ,GAAGvB,MAAM,CAACK,gBAAP,CAAwB,CAAxB,CAAf;;AAEA,UAAIL,MAAM,CAACK,gBAAP,CAAwB,CAAxB,MAA+B,SAAnC,EAA8C;AAC5CL,QAAAA,MAAM,CAACM,aAAP,CAAqBW,aAArB,CAAmCM,QAAQ,CAACL,EAAT,CAAYC,OAA/C,EAAwD,CAAxD;AACD,OAFD,MAEO,IAAInB,MAAM,CAACK,gBAAP,CAAwB,CAAxB,MAA+B,SAAnC,EAA8C;AACnD,cAAMW,OAAO,GAAGO,QAAQ,CAAC,KAAD,CAAxB;AACAhC,QAAAA,OAAO,CAACyB,OAAD,EAAUhB,MAAM,CAACQ,kBAAjB,CAAP;AACD;AACF,KAnEuC;;AAAA,SAqExCgB,kBArEwC,GAqElBC,SAAD,IAAe;AAClC,UAAIC,YAAY,GAAG,EAAnB;AACA,UAAIC,UAAU,GAAG,CAAjB;;AAEA,WAAK,IAAIC,GAAT,IAAgBC,MAAM,CAACC,IAAP,CAAYL,SAAZ,CAAhB,EAAwC;AACtC,YAAIM,MAAM,GAAGN,SAAS,CAACG,GAAD,CAAtB;;AAEA,YAAID,UAAU,GAAG,CAAjB,EAAoB;AAClBD,UAAAA,YAAY,GAAGA,YAAY,GAAG,IAAf,GAAsBK,MAAM,CAACC,IAA5C;AACD,SAFD,MAEO;AACLN,UAAAA,YAAY,GAAGK,MAAM,CAACC,IAAtB;AACD;;AACDL,QAAAA,UAAU,IAAI,CAAd;AACD;;AAED,aAAOD,YAAP;AACD,KArFuC;AAAA;;AAuFxC;AACAO,EAAAA,WAAW,CAACC,IAAD,EAAO;AAChB,SAAK9B,QAAL,CAAc;AAAC+B,MAAAA,WAAW,EAAEC,IAAI,CAACC,KAAL,CAAWH,IAAI,CAACI,QAAhB;AAAd,KAAd;AACD;;AAEDC,EAAAA,OAAO,CAACL,IAAD,EAAO;AACZ,SAAK9B,QAAL,CAAc;AAACF,MAAAA,eAAe,EAAEkC,IAAI,CAACC,KAAL,CAAWH,IAAI,CAACM,WAAhB;AAAlB,KAAd;AACD;;AAEDC,EAAAA,IAAI,CAACC,IAAD,EAAO;AACTA,IAAAA,IAAI,GAAGN,IAAI,CAACO,KAAL,CAAWD,IAAX,CAAP;AACA,SAAKE,IAAL,CAAUC,YAAV,IAA0B,KAAKD,IAAL,CAAUC,YAAV,CAAuBJ,IAAvB,CAA4BC,IAA5B,CAA1B;AACA,SAAKtC,QAAL,CAAc;AACZF,MAAAA,eAAe,EAAEwC,IADL;AAEZI,MAAAA,MAAM,EAAE;AAFI,KAAd;AAID;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBACE,oBAAC,cAAD,CAAgB,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,CAAC;AAAE9C,MAAAA;AAAF,KAAD,kBACC;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AACE,MAAA,SAAS,EAAC,iBADZ;AAEE,MAAA,GAAG,EACDD,MAAM,CAACK,gBAAP,KAA4B,EAA5B,GACI,EADJ,GAEIL,MAAM,CAACK,gBAAP,CAAwB,CAAxB,MAA+B,SAA/B,GACAL,MAAM,CAACK,gBAAP,CAAwB,CAAxB,EAA2B2C,OAA3B,CAAmCC,UAAnC,CAA8CC,IAA9C,CAAmDC,GADnD,GAEAnD,MAAM,CAACK,gBAAP,CAAwB,CAAxB,EAA2B+C,KAA3B,CAAiCC,MAAjC,CAAwC,CAAxC,EAA2CF,GAPnD;AASE,MAAA,GAAG,EAAC,EATN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAWE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AACE,MAAA,SAAS,EAAC,eADZ;AAEE,MAAA,OAAO,EAAE,KAAK7B,cAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAIE;AACE,MAAA,SAAS,EAAC,YADZ;AAEE,MAAA,KAAK,EAAE;AACLgC,QAAAA,UAAU,EAAEtD,MAAM,CAACC,gBAAP,GACR,SACAsD,OAAO,CAAC,wCAAD,CADP,GAEA,GAHQ,GAIR,SACAA,OAAO,CAAC,uCAAD,CADP,GAEA,GAPC;AAQLC,QAAAA,IAAI,EAAExD,MAAM,CAACC,gBAAP,GAA0B,MAA1B,GAAmC;AARpC,OAFT;AAYE,MAAA,OAAO,EAAE,KAAKE,eAZhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,eAiBE;AACE,MAAA,SAAS,EAAC,YADZ;AAEE,MAAA,OAAO,EAAE,KAAKO,WAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjBF,CAXF,eAgCE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAG,MAAA,EAAE,EAAC,WAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGV,MAAM,CAACK,gBAAP,KAA4B,EAA5B,GACG,mBADH,GAEGL,MAAM,CAACK,gBAAP,CAAwB,CAAxB,MAA+B,SAA/B,GACAb,aAAa,CAACQ,MAAM,CAACK,gBAAP,CAAwB,CAAxB,EAA2B2C,OAA3B,CAAmCS,KAApC,CADb,GAEAzD,MAAM,CAACK,gBAAP,CAAwB,CAAxB,EAA2B2B,IALjC,CADF,EAQGhC,MAAM,CAACK,gBAAP,CAAwB,CAAxB,MAA+B,SAA/B,gBACC;AAAK,MAAA,GAAG,EAAEV,WAAV;AAAuB,MAAA,GAAG,EAAC,EAA3B;AAA8B,MAAA,SAAS,EAAC,eAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,GAEGK,MAAM,CAACK,gBAAP,CAAwB,CAAxB,MAA+B,SAA/B,gBACF;AAAK,MAAA,GAAG,EAAEX,WAAV;AAAuB,MAAA,GAAG,EAAC,EAA3B;AAA8B,MAAA,SAAS,EAAC,eAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADE,GAGF,EAbJ,CADF,eAkBE;AAAG,MAAA,EAAE,EAAC,YAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGM,MAAM,CAACK,gBAAP,KAA4B,EAA5B,GACG,2CADH,GAEGL,MAAM,CAACK,gBAAP,CAAwB,CAAxB,MAA+B,SAA/B,GACAL,MAAM,CAACK,gBAAP,CAAwB,CAAxB,EAA2B2C,OAA3B,CAAmCU,YADnC,GAEA,KAAKlC,kBAAL,CAAwBxB,MAAM,CAACK,gBAAP,CAAwB,CAAxB,EAA2BsD,OAAnD,CALN,CAlBF,CAhCF,eA0DE,oBAAC,OAAD;AACF,MAAA,MAAM,EAAE,KAAKlB,IAAL,CAAUmB,IAAV,CAAe,IAAf,CADN;AAEF,MAAA,WAAW,EAAE,KAAK9D,KAAL,CAAWqC,WAFtB;AAGF,MAAA,cAAc,EAAE,MAAM,KAAK/B,QAAL,CAAc;AAAC0C,QAAAA,MAAM,EAAE;AAAT,OAAd,CAHpB;AAIF,MAAA,eAAe,EAAE,KAAKhD,KAAL,CAAWI,eAJ1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA1DF,CAFJ,CADF;AAsED;;AAhLuC;;AAkL1CL,iBAAiB,CAACgE,WAAlB,GAAgCzE,cAAhC;AAEA,eAAeS,iBAAf","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"../../styles/SessionController.css\";\n\nimport { SessionContext } from \"../../session-context\";\n\nimport { play, pause, playURI } from \"../../utils/spotifyInterface\";\nimport { formatYTTitle } from \"../../utils/youtubeInterface\";\n\nimport { popQueue } from \"../../utils/queueInterface\";\n\nimport spotifyIcon from \"../../resources/images/Spotify.png\";\nimport youtubeIcon from \"../../resources/images/Youtube.png\";\n\nimport SeekBar from \"./seekbar\"\n\nclass SessionController extends Component {\n  state = {\n    isPlaying: global.isContentPlaying,\n    currentPosition: 0\n  };\n\n  \n\n  playButtonPress = () => {\n    if (global.isContentPlaying) {\n      global.isContentPlaying = false;\n      this.setState({ isPlaying: false });\n      // Check Platform\n      if (global.currentlyPlaying[0] === \"Youtube\") {\n        global.youtubePlayer.pauseVideo();\n      } else if (global.currentlyPlaying[0] === \"Spotify\") {\n        pause(global.spotifyAccessToken);\n      }\n    } else {\n      global.isContentPlaying = true;\n      this.setState({ isPlaying: true });\n      // Check Platform\n      if (global.currentlyPlaying[0] === \"Youtube\") {\n        global.youtubePlayer.playVideo();\n      } else if (global.currentlyPlaying[0] === \"Spotify\") {\n        play(global.spotifyAccessToken);\n\n      }\n    }\n  };\n\n  skipPressed = () => {\n    if (global.sessionQueue.length === 0) {\n      console.log(\"queue empty\");\n      return;\n    }\n\n    // Pop Queue\n    var upNext = popQueue();\n\n    // Read next song and determine platform\n    if (upNext[0] === \"Spotify\") {\n      var songURI = upNext[1][\"uri\"];\n      // Pause Youtube if it was playing\n      global.youtubePlayer.pauseVideo();\n      playURI(songURI, global.spotifyAccessToken);\n    } else if (upNext[0] === \"Youtube\") {\n      // Pause Spotify if it was playing\n      pause(global.spotifyAccessToken);\n      global.youtubePlayer.loadVideoById(upNext[1].id.videoId, 0);\n    }\n\n    global.isContentPlaying = true;\n    global.currentlyPlaying = upNext;\n\n    this.context.updateSessionQueue(global.sessionQueue);\n  };\n\n  restartPressed = () => {\n    var songInfo = global.currentlyPlaying[1];\n\n    if (global.currentlyPlaying[0] === \"Youtube\") {\n      global.youtubePlayer.loadVideoById(songInfo.id.videoId, 0);\n    } else if (global.currentlyPlaying[1] === \"Spotify\") {\n      const songURI = songInfo[\"uri\"];\n      playURI(songURI, global.spotifyAccessToken);\n    }\n  };\n\n  formatArtistString = (artistObj) => {\n    var artistString = \"\";\n    var numArtists = 0;\n\n    for (var key in Object.keys(artistObj)) {\n      var artist = artistObj[key];\n\n      if (numArtists > 0) {\n        artistString = artistString + \", \" + artist.name;\n      } else {\n        artistString = artist.name;\n      }\n      numArtists += 1;\n    }\n\n    return artistString;\n  };\n\n  // Seek Bar\n  setDuration(data) {\n    this.setState({totalLength: Math.floor(data.duration)});\n  }\n\n  setTime(data) {\n    this.setState({currentPosition: Math.floor(data.currentTime)});\n  }\n\n  seek(time) {\n    time = Math.round(time);\n    this.refs.audioElement && this.refs.audioElement.seek(time);\n    this.setState({\n      currentPosition: time,\n      paused: false,\n    });\n  }\n\n  render() {\n    return (\n      <SessionContext.Consumer>\n        {({ isContentPlaying }) => (\n          <div className=\"controllerDiv\">\n            <img\n              className=\"currentTrackPic\"\n              src={\n                global.currentlyPlaying === \"\"\n                  ? \"\"\n                  : global.currentlyPlaying[0] === \"Youtube\"\n                  ? global.currentlyPlaying[1].snippet.thumbnails.high.url\n                  : global.currentlyPlaying[1].album.images[0].url\n              }\n              alt=\"\"></img>\n            <div className=\"controllerButtons\">\n              <button\n                className=\"restartButton\"\n                onClick={this.restartPressed}></button>\n              <button\n                className=\"playButton\"\n                style={{\n                  background: global.isContentPlaying\n                    ? \"url(\" +\n                      require(\"../../resources/images/PauseButton.png\") +\n                      \")\"\n                    : \"url(\" +\n                      require(\"../../resources/images/PlayButton.png\") +\n                      \")\",\n                  left: global.isContentPlaying ? \"-5px\" : \"\",\n                }}\n                onClick={this.playButtonPress}></button>\n              <button\n                className=\"skipButton\"\n                onClick={this.skipPressed}></button>\n            </div>\n            <div className=\"songText\">\n              <div className=\"TitleandPlatform\">\n                <p id=\"songTitle\">\n                  {global.currentlyPlaying === \"\"\n                    ? \"Nothings playing!\"\n                    : global.currentlyPlaying[0] === \"Youtube\"\n                    ? formatYTTitle(global.currentlyPlaying[1].snippet.title)\n                    : global.currentlyPlaying[1].name}\n                </p>\n                {global.currentlyPlaying[0] === \"Youtube\" ? (\n                  <img src={youtubeIcon} alt=\"\" className=\"youtubeIconCP\"></img>\n                ) : global.currentlyPlaying[0] === \"Spotify\" ? (\n                  <img src={spotifyIcon} alt=\"\" className=\"spotifyIconCP\"></img>\n                ) : (\n                  \"\"\n                )}\n              </div>\n\n              <p id=\"songArtist\">\n                {global.currentlyPlaying === \"\"\n                  ? \"Search a song or choose from your Library\"\n                  : global.currentlyPlaying[0] === \"Youtube\"\n                  ? global.currentlyPlaying[1].snippet.channelTitle\n                  : this.formatArtistString(global.currentlyPlaying[1].artists)}\n              </p>\n            </div>\n            <SeekBar\n          onSeek={this.seek.bind(this)}\n          trackLength={this.state.totalLength}\n          onSlidingStart={() => this.setState({paused: true})}\n          currentPosition={this.state.currentPosition} />\n          </div>\n        )}\n      </SessionContext.Consumer>\n    );\n  }\n}\nSessionController.contextType = SessionContext;\n\nexport default SessionController;\n"]},"metadata":{},"sourceType":"module"}