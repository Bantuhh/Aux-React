{"ast":null,"code":"var _jsxFileName = \"/Users/dbanta/Desktop/Aux React/aux-pwa/src/components/session/sessionController.jsx\";\nimport React, { Component, useContext } from \"react\";\nimport \"../../styles/SessionController.css\";\nimport { SessionContext } from \"../../session-context\";\nimport { play, pause, skipSongSpotify, queueSpotifySong, playURI } from \"../../utils/spotifyInterface\";\nimport { popQueue } from \"../../utils/queueInterface\";\n\nclass SessionController extends Component {\n  constructor(...args) {\n    super(...args);\n    this.sessionContext = useContext(SessionContext);\n    this.state = {\n      isPlaying: global.isContentPlaying,\n      currentTrack: {\n        songTitle: \"Ghost Voices (Hex Cougar Flip)\",\n        artist: \"Hex Cougar\",\n        albumImgURL: require(\"../../resources/images/GhostVoicesHex.png\")\n      }\n    };\n\n    this.playButtonPress = () => {\n      if (global.isContentPlaying) {\n        global.isContentPlaying = false;\n        this.setState({\n          isPlaying: false\n        });\n        pause(global.spotifyAccessToken);\n      } else {\n        global.isContentPlaying = true;\n        this.setState({\n          isPlaying: true\n        });\n        play(global.spotifyAccessToken);\n      }\n    };\n\n    this.skipPressed = () => {\n      if (global.sessionQueue.length === 0) {\n        console.log(\"queue empty\");\n        return;\n      } // Pop Queue\n\n\n      var upNext = popQueue(); // Read next song and determine platform\n\n      if (upNext[0] == \"Spotify\") {\n        var songURI = upNext[1][\"uri\"];\n        playURI(songURI, global.spotifyAccessToken);\n        global.isContentPlaying = true; // Set song as currently playing\n\n        global.currentlyPlaying = upNext;\n        this.sessionContext.updateSessionQueue(global.sessionQueue);\n      }\n    };\n\n    this.formatArtistString = artistObj => {\n      var artistString = \"\";\n      var numArtists = 0;\n\n      for (var key in Object.keys(artistObj)) {\n        var artist = artistObj[key];\n\n        if (numArtists > 0) {\n          artistString = artistString + \", \" + artist.name;\n        } else {\n          artistString = artist.name;\n        }\n\n        numArtists += 1;\n      }\n\n      return artistString;\n    };\n  }\n\n  render() {\n    const {\n      updateSessionState\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"controllerDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"currentTrackPic\",\n      src: global.currentlyPlaying == \"\" ? \"\" : global.currentlyPlaying[1].album.images[0].url,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"controllerButtons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"restartButton\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"playButton\",\n      style: {\n        background: global.isContentPlaying ? \"url(\" + require(\"../../resources/images/PauseButton.png\") + \")\" : \"url(\" + require(\"../../resources/images/PlayButton.png\") + \")\",\n        left: this.state.isPlaying ? \"-5px\" : \"\"\n      },\n      onClick: this.playButtonPress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"skipButton\",\n      onClick: this.skipPressed,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"songText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      id: \"songTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }\n    }, global.currentlyPlaying == \"\" ? \"Nothings playing!\" : global.currentlyPlaying[1].name), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"songArtist\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }\n    }, global.currentlyPlaying == \"\" ? \"Search a song or choose from your Library\" : this.formatArtistString(global.currentlyPlaying[1].artists))));\n  }\n\n}\n\nexport default SessionController;","map":{"version":3,"sources":["/Users/dbanta/Desktop/Aux React/aux-pwa/src/components/session/sessionController.jsx"],"names":["React","Component","useContext","SessionContext","play","pause","skipSongSpotify","queueSpotifySong","playURI","popQueue","SessionController","sessionContext","state","isPlaying","global","isContentPlaying","currentTrack","songTitle","artist","albumImgURL","require","playButtonPress","setState","spotifyAccessToken","skipPressed","sessionQueue","length","console","log","upNext","songURI","currentlyPlaying","updateSessionQueue","formatArtistString","artistObj","artistString","numArtists","key","Object","keys","name","render","updateSessionState","props","album","images","url","background","left","artists"],"mappings":"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","sourcesContent":["import React, { Component, useContext } from \"react\";\n\nimport \"../../styles/SessionController.css\";\n\nimport { SessionContext } from \"../../session-context\";\n\nimport {\n  play,\n  pause,\n  skipSongSpotify,\n  queueSpotifySong,\n  playURI,\n} from \"../../utils/spotifyInterface\";\n\nimport { popQueue } from \"../../utils/queueInterface\";\n\nclass SessionController extends Component {\n  sessionContext = useContext(SessionContext);\n\n  state = {\n    isPlaying: global.isContentPlaying,\n    currentTrack: {\n      songTitle: \"Ghost Voices (Hex Cougar Flip)\",\n      artist: \"Hex Cougar\",\n      albumImgURL: require(\"../../resources/images/GhostVoicesHex.png\"),\n    },\n  };\n\n  playButtonPress = () => {\n    if (global.isContentPlaying) {\n      global.isContentPlaying = false;\n      this.setState({ isPlaying: false });\n      pause(global.spotifyAccessToken);\n    } else {\n      global.isContentPlaying = true;\n      this.setState({ isPlaying: true });\n      play(global.spotifyAccessToken);\n    }\n  };\n\n  skipPressed = () => {\n    if (global.sessionQueue.length === 0) {\n      console.log(\"queue empty\");\n      return;\n    }\n\n    // Pop Queue\n    var upNext = popQueue();\n\n    // Read next song and determine platform\n    if (upNext[0] == \"Spotify\") {\n      var songURI = upNext[1][\"uri\"];\n\n      playURI(songURI, global.spotifyAccessToken);\n\n      global.isContentPlaying = true;\n\n      // Set song as currently playing\n      global.currentlyPlaying = upNext;\n\n      this.sessionContext.updateSessionQueue(global.sessionQueue);\n    }\n  };\n\n  formatArtistString = (artistObj) => {\n    var artistString = \"\";\n    var numArtists = 0;\n\n    for (var key in Object.keys(artistObj)) {\n      var artist = artistObj[key];\n\n      if (numArtists > 0) {\n        artistString = artistString + \", \" + artist.name;\n      } else {\n        artistString = artist.name;\n      }\n      numArtists += 1;\n    }\n\n    return artistString;\n  };\n\n  render() {\n    const { updateSessionState } = this.props;\n    return (\n      <div className=\"controllerDiv\">\n        <img\n          className=\"currentTrackPic\"\n          src={\n            global.currentlyPlaying == \"\"\n              ? \"\"\n              : global.currentlyPlaying[1].album.images[0].url\n          }\n          alt=\"\"></img>\n        <div className=\"controllerButtons\">\n          <button className=\"restartButton\"></button>\n          <button\n            className=\"playButton\"\n            style={{\n              background: global.isContentPlaying\n                ? \"url(\" +\n                  require(\"../../resources/images/PauseButton.png\") +\n                  \")\"\n                : \"url(\" +\n                  require(\"../../resources/images/PlayButton.png\") +\n                  \")\",\n              left: this.state.isPlaying ? \"-5px\" : \"\",\n            }}\n            onClick={this.playButtonPress}></button>\n          <button className=\"skipButton\" onClick={this.skipPressed}></button>\n        </div>\n        <div className=\"songText\">\n          <p id=\"songTitle\">\n            {global.currentlyPlaying == \"\"\n              ? \"Nothings playing!\"\n              : global.currentlyPlaying[1].name}\n          </p>\n          <p id=\"songArtist\">\n            {global.currentlyPlaying == \"\"\n              ? \"Search a song or choose from your Library\"\n              : this.formatArtistString(global.currentlyPlaying[1].artists)}\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SessionController;\n"]},"metadata":{},"sourceType":"module"}