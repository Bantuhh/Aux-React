{"ast":null,"code":"var _jsxFileName = \"/Users/dbanta/Desktop/Aux React/aux-pwa/src/components/library/playlistItem.jsx\";\nimport React, { Component } from \"react\";\nimport \"../../styles/PlaylistItem.css\";\nimport { NotificationContainer, NotificationManager } from \"react-notifications\";\nimport \"react-notifications/lib/notifications.css\";\nimport Spotify from \"spotify-web-api-js\";\nconst spotifyWebApi = new Spotify();\n\nclass PlaylistItem extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      playlistTracks: {}\n    };\n\n    this.createNotification = type => {\n      console.log(\"GOT TO CREATE NOTIFICATION\");\n\n      switch (type) {\n        case \"info\":\n          NotificationManager.info(\"Info message\");\n          break;\n\n        case \"success\":\n          NotificationManager.success(\"Success message\", \"Title here\");\n          break;\n\n        case \"warning\":\n          NotificationManager.warning(\"Warning message\", \"Close after 3000ms\", 3000);\n          break;\n\n        case \"error\":\n          NotificationManager.error(\"Make sure you are logged into your Spotify\", \"Error!\", 5000, () => {//alert(\"callback\");\n          });\n          break;\n      }\n\n      return () => {};\n    };\n\n    this.getPlaylistTracks = playlistID => {\n      spotifyWebApi.getMe().then(response => {\n        console.log(\"getMe: \", response);\n        var userID = response;\n      }, reason => {\n        console.log(\"GOT TO ERROR (getME)\");\n        this.createNotification(\"error\");\n        console.error(reason); // Error!\n      });\n      spotifyWebApi.getPlaylistTracks(userID, playlistID).then(response => {\n        this.setState({\n          playlistTracks: response.items\n        });\n      }, reason => {\n        console.log(\"GOT TO ERROR (getPlaylistTracks)\");\n        this.createNotification(\"error\");\n        console.error(reason); // Error!\n      });\n    };\n  }\n\n  render() {\n    var {\n      playlistInfo\n    } = this.props;\n    console.log(playlistInfo);\n    const playlistImgPath = playlistInfo.images[0].url;\n    var playlistID = playlistInfo.id;\n    console.log(\"playlistID: \", playlistID);\n    this.getPlaylistTracks(playlistID);\n    return React.createElement(\"div\", {\n      className: \"playlistItemDiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"playlistImg\",\n      src: playlistImgPath,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"playlistInfoDiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"playlistTitle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, playlistInfo.name), React.createElement(\"p\", {\n      className: \"numTracks\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, playlistInfo.tracks.total + \" songs\")), React.createElement(\"div\", {\n      className: \"playlistOptionsDiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"playlistOptions\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    })), React.createElement(NotificationContainer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default PlaylistItem;","map":{"version":3,"sources":["/Users/dbanta/Desktop/Aux React/aux-pwa/src/components/library/playlistItem.jsx"],"names":["React","Component","NotificationContainer","NotificationManager","Spotify","spotifyWebApi","PlaylistItem","state","playlistTracks","createNotification","type","console","log","info","success","warning","error","getPlaylistTracks","playlistID","getMe","then","response","userID","reason","setState","items","render","playlistInfo","props","playlistImgPath","images","url","id","name","tracks","total"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"../../styles/PlaylistItem.css\";\n\nimport {\n  NotificationContainer,\n  NotificationManager,\n} from \"react-notifications\";\nimport \"react-notifications/lib/notifications.css\";\n\nimport Spotify from \"spotify-web-api-js\";\nconst spotifyWebApi = new Spotify();\n\nclass PlaylistItem extends Component {\n  state = {\n    playlistTracks: {},\n  };\n\n  createNotification = (type) => {\n    console.log(\"GOT TO CREATE NOTIFICATION\");\n    switch (type) {\n      case \"info\":\n        NotificationManager.info(\"Info message\");\n        break;\n      case \"success\":\n        NotificationManager.success(\"Success message\", \"Title here\");\n        break;\n      case \"warning\":\n        NotificationManager.warning(\n          \"Warning message\",\n          \"Close after 3000ms\",\n          3000\n        );\n        break;\n      case \"error\":\n        NotificationManager.error(\n          \"Make sure you are logged into your Spotify\",\n          \"Error!\",\n          5000,\n          () => {\n            //alert(\"callback\");\n          }\n        );\n        break;\n    }\n    return () => {};\n  };\n\n  getPlaylistTracks = (playlistID) => {\n    spotifyWebApi.getMe().then(\n      (response) => {\n        console.log(\"getMe: \", response);\n        var userID = response;\n      },\n      (reason) => {\n        console.log(\"GOT TO ERROR (getME)\");\n        this.createNotification(\"error\");\n        console.error(reason); // Error!\n      }\n    );\n\n    spotifyWebApi.getPlaylistTracks(userID, playlistID).then(\n      (response) => {\n        this.setState({\n          playlistTracks: response.items,\n        });\n      },\n      (reason) => {\n        console.log(\"GOT TO ERROR (getPlaylistTracks)\");\n        this.createNotification(\"error\");\n        console.error(reason); // Error!\n      }\n    );\n  };\n\n  render() {\n    var { playlistInfo } = this.props;\n    console.log(playlistInfo);\n    const playlistImgPath = playlistInfo.images[0].url;\n\n    var playlistID = playlistInfo.id;\n\n    console.log(\"playlistID: \", playlistID);\n    this.getPlaylistTracks(playlistID);\n\n    return (\n      <div className=\"playlistItemDiv\">\n        <img className=\"playlistImg\" src={playlistImgPath} alt=\"\"></img>\n        <div className=\"playlistInfoDiv\">\n          <p className=\"playlistTitle\">{playlistInfo.name}</p>\n          <p className=\"numTracks\">{playlistInfo.tracks.total + \" songs\"}</p>\n        </div>\n        <div className=\"playlistOptionsDiv\">\n          <button className=\"playlistOptions\"></button>\n        </div>\n        <NotificationContainer />\n      </div>\n    );\n  }\n}\n\nexport default PlaylistItem;\n"]},"metadata":{},"sourceType":"module"}