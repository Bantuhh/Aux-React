{"ast":null,"code":"var _jsxFileName = \"/Users/dbanta/Desktop/Aux React/aux-pwa/src/components/search/searchWeb.jsx\";\nimport React, { Component } from \"react\";\nimport { SessionContext } from \"../../session-context\";\nimport { addSongToQueue } from \"../../utils/queueInterface\";\nimport { viewOnSpotify, playURI, pause } from \"../../utils/spotifyInterface\";\nimport { viewOnYoutube } from \"../../utils/youtubeInterface\";\nimport YTSearch from \"youtube-api-search\";\nimport \"../../styles/SearchWeb.css\";\nimport { NotificationContainer, NotificationManager } from \"react-notifications\";\nimport \"react-notifications/lib/notifications.css\";\nimport SearchResults from \"./searchResults\";\nimport SearchIcon from \"../../resources/images/SearchIcon.png\";\nimport Spotify from \"spotify-web-api-js\";\nconst spotifyWebApi = new Spotify();\nconst YOUTUBE_API_KEY = \"AIzaSyB3FeQ_UyFnXjkDV9V62tca3eLs4D0NQjQ\";\n\nclass SearchWeb extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      trackSearchResults: global.spotifyTrackSearchResults,\n      youtubeSearchResults: global.youtubeSearchResults,\n      spotifySearch: Object.keys(global.spotifyTrackSearchResults).length === 0 ? false : true,\n      youtubeSearch: false,\n      lastSpotifySearchQuery: global.lastSpotifySearchQuery,\n      songOptionsSelected: false,\n      selectedContentInfo: \"HI\",\n      selectedPlatform: \"Spotify\"\n    };\n\n    this.createNotification = type => {\n      console.log(\"GOT TO CREATE NOTIFICATION\");\n\n      switch (type) {\n        case \"info\":\n          NotificationManager.info(\"Info message\");\n          break;\n\n        case \"success\":\n          NotificationManager.success(\"I knew you could do it.\", \"Song added to queue\", 1500);\n          break;\n\n        case \"warning\":\n          NotificationManager.warning(\"Warning message\", \"Close after 3000ms\", 3000);\n          break;\n\n        case \"error\":\n          NotificationManager.error(\"Make sure you are logged into your Spotify\", \"Error!\", 5000, () => {//alert(\"callback\");\n          });\n          break;\n      }\n\n      return () => {};\n    };\n\n    this.spotifySearchTrack = () => {\n      this.setState({\n        selectedPlatform: \"Spotify\",\n        songOptionsSelected: false\n      });\n      var query = document.getElementById(\"searchQuery\").value; // Don't search if query is empty\n\n      if (query === \"\") {\n        return;\n      }\n\n      spotifyWebApi.searchTracks(query).then(response => {\n        console.log(response);\n        this.setState({\n          trackSearchResults: response.tracks.items,\n          spotifySearch: true,\n          youtubeSearch: false\n        });\n        global.spotifyTrackSearchResults = response.tracks.items;\n        global.lastSpotifySearchQuery = query;\n      }, reason => {\n        console.log(\"GOT TO ERROR\");\n        this.createNotification(\"error\");\n        console.error(reason); // Error!\n      });\n    };\n\n    this.addSongToQueue = (platform, songInfo) => {\n      addSongToQueue(platform, songInfo);\n      this.createNotification(\"success\");\n    };\n\n    this.showContentOptions = songInfo => {\n      console.log(songInfo);\n      this.setState({\n        songOptionsSelected: true,\n        selectedContentInfo: songInfo\n      });\n    };\n\n    this.playSongNow = songInfo => {\n      if (this.state.selectedPlatform === \"Youtube\") {\n        //Implement logic of playing youtube content immediately\n        pause(global.spotifyAccessToken);\n        this.context.loadYTVideo(songInfo.id.videoId);\n      } else {\n        const songURI = songInfo[\"uri\"];\n        global.youtubePlayer.pauseVideo();\n        playURI(songURI, global.spotifyAccessToken);\n      }\n\n      global.isContentPlaying = true; // Set song as currently playing\n\n      global.currentlyPlaying = [this.state.selectedPlatform, songInfo];\n      this.context.updateSessionQueue(global.sessionQueue);\n    };\n\n    this.formatArtistString = artistObj => {\n      var artistString = \"\";\n      var numArtists = 0;\n\n      for (var key in Object.keys(artistObj)) {\n        var artist = artistObj[key];\n\n        if (numArtists > 0) {\n          artistString = artistString + \", \" + artist.name;\n        } else {\n          artistString = artist.name;\n        }\n\n        numArtists += 1;\n      }\n\n      return artistString;\n    };\n\n    this.youtubeSearch = () => {\n      var query = document.getElementById(\"searchQuery\").value; // Don't search if query is empty\n\n      if (query === \"\") {\n        return;\n      }\n\n      YTSearch({\n        key: YOUTUBE_API_KEY,\n        term: query\n      }, videos => {\n        //do something with videos!\n        console.log(videos);\n        this.setState({\n          selectedPlatform: \"Youtube\",\n          youtubeSearchResults: videos,\n          songOptionsSelected: false,\n          youtubeSearch: true,\n          spotifySearch: false\n        });\n      });\n    };\n\n    this.addYTContentToQueue = (platform, songInfo) => {\n      console.log(\"addYTContentToQueue\");\n      this.createNotification(\"success\");\n      var currentSong = [platform, songInfo]; // If no songs currently in queue, add song to queue and skip to song\n\n      if (!global.isContentPlaying & global.sessionQueue.length === 0 & global.currentlyPlaying === \"\") {\n        if (currentSong !== \"None\") {\n          // Check the platform of the song\n          if (currentSong[0] === \"Youtube\") {\n            this.context.loadYTVideo(songInfo.id.videoId);\n            global.isContentPlaying = true; // Set song as currently playing\n\n            global.currentlyPlaying = currentSong;\n          }\n        }\n      } else {\n        // Push song to queue\n        global.sessionQueue.push(currentSong);\n        console.log(\"currentSong\", currentSong);\n        console.log(\"Added Song to Queue\");\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"searchFlex\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"searchMiddle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"searchQueryDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"searchInputDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"searchIcon\",\n      src: SearchIcon,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      id: \"searchQuery\",\n      placeholder: this.state.lastSpotifySearchQuery === \"\" ? \"Search a song or artist..\" : this.state.lastSpotifySearchQuery,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"searchButtonDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      id: \"spotifySearchBtn\",\n      onClick: this.spotifySearchTrack,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"youtubeSearchBtn\",\n      onClick: this.youtubeSearch,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"searchDivHeader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 13\n      }\n    }, this.state.spotifySearch ? \"Spotify Search\" : this.state.youtubeSearch ? \"Youtube Search\" : \"Enter a query and click desired platform to search..\")), /*#__PURE__*/React.createElement(SearchResults, {\n      trackSearchResults: this.state.trackSearchResults,\n      youtubeSearchResults: this.state.youtubeSearchResults,\n      playSongNow: this.playSongNow,\n      showContentOptions: this.showContentOptions,\n      addYTContentToQueue: this.addYTContentToQueue,\n      addSongToQueue: this.addSongToQueue,\n      selectedPlatform: this.state.selectedPlatform,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(NotificationContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 11\n      }\n    })), this.state.songOptionsSelected & this.state.selectedPlatform === \"Spotify\" ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"searchRight\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"songOptionsAlbumImg\",\n      src: this.state.selectedContentInfo.album.images[0].url,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"songOptionsTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 15\n      }\n    }, this.state.selectedContentInfo.name), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"songOptionsArtist\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 15\n      }\n    }, this.formatArtistString(this.state.selectedContentInfo.artists)), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"firstSeparatorLine\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"addToQueueBtn\",\n      onClick: () => this.addSongToQueue(this.state.selectedPlatform, this.state.selectedContentInfo),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"secondSeparatorLine\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"viewOnSpotifyBtn\",\n      onClick: () => viewOnSpotify(this.state.selectedContentInfo),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 15\n      }\n    })) : this.state.songOptionsSelected & this.state.selectedPlatform === \"Youtube\" ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"searchRight\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"songOptionsAlbumImg\",\n      src: this.state.selectedContentInfo.snippet.thumbnails.default.url,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"songOptionsTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 15\n      }\n    }, this.state.selectedContentInfo.snippet.title), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"songOptionsArtist\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 15\n      }\n    }, this.state.selectedContentInfo.snippet.channelTitle), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"firstSeparatorLine\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"addToQueueBtn\",\n      onClick: () => this.addYTContentToQueue(this.state.selectedPlatform, this.state.selectedContentInfo),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"secondSeparatorLine\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"viewOnYoutubeBtn\",\n      onClick: () => viewOnYoutube(this.state.selectedContentInfo),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 15\n      }\n    })) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"searchRight\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 13\n      }\n    }) // If nothing selected, show nothing on right side\n    );\n  }\n\n}\n\nSearchWeb.contextType = SessionContext;\nexport default SearchWeb;","map":{"version":3,"sources":["/Users/dbanta/Desktop/Aux React/aux-pwa/src/components/search/searchWeb.jsx"],"names":["React","Component","SessionContext","addSongToQueue","viewOnSpotify","playURI","pause","viewOnYoutube","YTSearch","NotificationContainer","NotificationManager","SearchResults","SearchIcon","Spotify","spotifyWebApi","YOUTUBE_API_KEY","SearchWeb","state","trackSearchResults","global","spotifyTrackSearchResults","youtubeSearchResults","spotifySearch","Object","keys","length","youtubeSearch","lastSpotifySearchQuery","songOptionsSelected","selectedContentInfo","selectedPlatform","createNotification","type","console","log","info","success","warning","error","spotifySearchTrack","setState","query","document","getElementById","value","searchTracks","then","response","tracks","items","reason","platform","songInfo","showContentOptions","playSongNow","spotifyAccessToken","context","loadYTVideo","id","videoId","songURI","youtubePlayer","pauseVideo","isContentPlaying","currentlyPlaying","updateSessionQueue","sessionQueue","formatArtistString","artistObj","artistString","numArtists","key","artist","name","term","videos","addYTContentToQueue","currentSong","push","render","album","images","url","artists","snippet","thumbnails","default","title","channelTitle","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { SessionContext } from \"../../session-context\";\n\nimport { addSongToQueue } from \"../../utils/queueInterface\";\n\nimport { viewOnSpotify, playURI, pause } from \"../../utils/spotifyInterface\";\n\nimport { viewOnYoutube } from \"../../utils/youtubeInterface\";\n\nimport YTSearch from \"youtube-api-search\";\n\nimport \"../../styles/SearchWeb.css\";\nimport {\n  NotificationContainer,\n  NotificationManager,\n} from \"react-notifications\";\nimport \"react-notifications/lib/notifications.css\";\n\nimport SearchResults from \"./searchResults\";\n\nimport SearchIcon from \"../../resources/images/SearchIcon.png\";\n\nimport Spotify from \"spotify-web-api-js\";\nconst spotifyWebApi = new Spotify();\n\nconst YOUTUBE_API_KEY = \"AIzaSyB3FeQ_UyFnXjkDV9V62tca3eLs4D0NQjQ\";\n\nclass SearchWeb extends Component {\n  state = {\n    trackSearchResults: global.spotifyTrackSearchResults,\n    youtubeSearchResults: global.youtubeSearchResults,\n    spotifySearch:\n      Object.keys(global.spotifyTrackSearchResults).length === 0 ? false : true,\n    youtubeSearch: false,\n    lastSpotifySearchQuery: global.lastSpotifySearchQuery,\n    songOptionsSelected: false,\n    selectedContentInfo: \"HI\",\n    selectedPlatform: \"Spotify\",\n  };\n\n  createNotification = (type) => {\n    console.log(\"GOT TO CREATE NOTIFICATION\");\n    switch (type) {\n      case \"info\":\n        NotificationManager.info(\"Info message\");\n        break;\n      case \"success\":\n        NotificationManager.success(\n          \"I knew you could do it.\",\n          \"Song added to queue\",\n          1500\n        );\n        break;\n      case \"warning\":\n        NotificationManager.warning(\n          \"Warning message\",\n          \"Close after 3000ms\",\n          3000\n        );\n        break;\n      case \"error\":\n        NotificationManager.error(\n          \"Make sure you are logged into your Spotify\",\n          \"Error!\",\n          5000,\n          () => {\n            //alert(\"callback\");\n          }\n        );\n        break;\n    }\n    return () => {};\n  };\n\n  spotifySearchTrack = () => {\n    this.setState({\n      selectedPlatform: \"Spotify\",\n      songOptionsSelected: false,\n    });\n\n    var query = document.getElementById(\"searchQuery\").value;\n\n    // Don't search if query is empty\n    if (query === \"\") {\n      return;\n    }\n\n    spotifyWebApi.searchTracks(query).then(\n      (response) => {\n        console.log(response);\n        this.setState({\n          trackSearchResults: response.tracks.items,\n          spotifySearch: true,\n          youtubeSearch: false,\n        });\n\n        global.spotifyTrackSearchResults = response.tracks.items;\n        global.lastSpotifySearchQuery = query;\n      },\n      (reason) => {\n        console.log(\"GOT TO ERROR\");\n        this.createNotification(\"error\");\n        console.error(reason); // Error!\n      }\n    );\n  };\n\n  // Add Spotify song to queue and send notification\n  addSongToQueue = (platform, songInfo) => {\n    addSongToQueue(platform, songInfo);\n    this.createNotification(\"success\");\n  };\n\n  showContentOptions = (songInfo) => {\n    console.log(songInfo);\n\n    this.setState({\n      songOptionsSelected: true,\n      selectedContentInfo: songInfo,\n    });\n  };\n\n  playSongNow = (songInfo) => {\n    if (this.state.selectedPlatform === \"Youtube\") {\n      //Implement logic of playing youtube content immediately\n      pause(global.spotifyAccessToken);\n      this.context.loadYTVideo(songInfo.id.videoId);\n    } else {\n      const songURI = songInfo[\"uri\"];\n      global.youtubePlayer.pauseVideo();\n      playURI(songURI, global.spotifyAccessToken);\n    }\n\n    global.isContentPlaying = true;\n\n    // Set song as currently playing\n    global.currentlyPlaying = [this.state.selectedPlatform, songInfo];\n\n    this.context.updateSessionQueue(global.sessionQueue);\n  };\n\n  formatArtistString = (artistObj) => {\n    var artistString = \"\";\n    var numArtists = 0;\n\n    for (var key in Object.keys(artistObj)) {\n      var artist = artistObj[key];\n\n      if (numArtists > 0) {\n        artistString = artistString + \", \" + artist.name;\n      } else {\n        artistString = artist.name;\n      }\n      numArtists += 1;\n    }\n\n    return artistString;\n  };\n\n  // Youtube API\n  youtubeSearch = () => {\n    var query = document.getElementById(\"searchQuery\").value;\n\n    // Don't search if query is empty\n    if (query === \"\") {\n      return;\n    }\n\n    YTSearch({ key: YOUTUBE_API_KEY, term: query }, (videos) => {\n      //do something with videos!\n      console.log(videos);\n\n      this.setState({\n        selectedPlatform: \"Youtube\",\n        youtubeSearchResults: videos,\n        songOptionsSelected: false,\n        youtubeSearch: true,\n        spotifySearch: false,\n      });\n    });\n  };\n\n  addYTContentToQueue = (platform, songInfo) => {\n    console.log(\"addYTContentToQueue\");\n    this.createNotification(\"success\");\n\n    var currentSong = [platform, songInfo];\n\n    // If no songs currently in queue, add song to queue and skip to song\n    if (\n      !global.isContentPlaying &\n      (global.sessionQueue.length === 0) &\n      (global.currentlyPlaying === \"\")\n    ) {\n      if (currentSong !== \"None\") {\n        // Check the platform of the song\n        if (currentSong[0] === \"Youtube\") {\n          this.context.loadYTVideo(songInfo.id.videoId);\n\n          global.isContentPlaying = true;\n\n          // Set song as currently playing\n          global.currentlyPlaying = currentSong;\n        }\n      }\n    } else {\n      // Push song to queue\n      global.sessionQueue.push(currentSong);\n\n      console.log(\"currentSong\", currentSong);\n\n      console.log(\"Added Song to Queue\");\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"searchFlex\">\n        <div className=\"searchMiddle\">\n          <div className=\"searchQueryDiv\">\n            <div className=\"searchInputDiv\">\n              <img className=\"searchIcon\" src={SearchIcon} alt=\"\"></img>\n              <input\n                type=\"text\"\n                id=\"searchQuery\"\n                placeholder={\n                  this.state.lastSpotifySearchQuery === \"\"\n                    ? \"Search a song or artist..\"\n                    : this.state.lastSpotifySearchQuery\n                }></input>\n            </div>\n            <div className=\"searchButtonDiv\">\n              <button\n                id=\"spotifySearchBtn\"\n                onClick={this.spotifySearchTrack}></button>\n              <button\n                id=\"youtubeSearchBtn\"\n                onClick={this.youtubeSearch}></button>\n            </div>\n            <p id=\"searchDivHeader\">\n              {this.state.spotifySearch\n                ? \"Spotify Search\"\n                : this.state.youtubeSearch\n                ? \"Youtube Search\"\n                : \"Enter a query and click desired platform to search..\"}\n            </p>\n          </div>\n          <SearchResults\n            trackSearchResults={this.state.trackSearchResults}\n            youtubeSearchResults={this.state.youtubeSearchResults}\n            playSongNow={this.playSongNow}\n            showContentOptions={this.showContentOptions}\n            addYTContentToQueue={this.addYTContentToQueue}\n            addSongToQueue={this.addSongToQueue}\n            selectedPlatform={this.state.selectedPlatform}></SearchResults>\n          <NotificationContainer />\n        </div>\n        {/* If Song Options was selected, show selected song info on right side */}\n        {\n          this.state.songOptionsSelected &\n          (this.state.selectedPlatform === \"Spotify\") ? (\n            <div className=\"searchRight\">\n              <img\n                className=\"songOptionsAlbumImg\"\n                src={this.state.selectedContentInfo.album.images[0].url}\n                alt=\"\"></img>\n\n              <p className=\"songOptionsTitle\">\n                {this.state.selectedContentInfo.name}\n              </p>\n              <p className=\"songOptionsArtist\">\n                {this.formatArtistString(\n                  this.state.selectedContentInfo.artists\n                )}\n              </p>\n              <div id=\"firstSeparatorLine\"></div>\n              <button\n                id=\"addToQueueBtn\"\n                onClick={() =>\n                  this.addSongToQueue(\n                    this.state.selectedPlatform,\n                    this.state.selectedContentInfo\n                  )\n                }></button>\n              <div id=\"secondSeparatorLine\"></div>\n              <button\n                id=\"viewOnSpotifyBtn\"\n                onClick={() =>\n                  viewOnSpotify(this.state.selectedContentInfo)\n                }></button>\n            </div>\n          ) : this.state.songOptionsSelected &\n            (this.state.selectedPlatform === \"Youtube\") ? (\n            <div className=\"searchRight\">\n              <img\n                className=\"songOptionsAlbumImg\"\n                src={\n                  this.state.selectedContentInfo.snippet.thumbnails.default.url\n                }\n                alt=\"\"></img>\n\n              <p className=\"songOptionsTitle\">\n                {this.state.selectedContentInfo.snippet.title}\n              </p>\n              <p className=\"songOptionsArtist\">\n                {this.state.selectedContentInfo.snippet.channelTitle}\n              </p>\n              <div id=\"firstSeparatorLine\"></div>\n              <button\n                id=\"addToQueueBtn\"\n                onClick={() =>\n                  this.addYTContentToQueue(\n                    this.state.selectedPlatform,\n                    this.state.selectedContentInfo\n                  )\n                }></button>\n              <div id=\"secondSeparatorLine\"></div>\n              <button\n                id=\"viewOnYoutubeBtn\"\n                onClick={() =>\n                  viewOnYoutube(this.state.selectedContentInfo)\n                }></button>\n            </div>\n          ) : (\n            <div className=\"searchRight\"></div>\n          )\n          // If nothing selected, show nothing on right side\n        }\n      </div>\n    );\n  }\n}\nSearchWeb.contextType = SessionContext;\n\nexport default SearchWeb;\n"]},"metadata":{},"sourceType":"module"}