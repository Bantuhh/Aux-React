{"ast":null,"code":"var _jsxFileName = \"/Users/dbanta/Desktop/Aux React/aux-pwa/src/components/search/searchWeb.jsx\";\nimport React, { Component } from \"react\";\nimport { addSongToQueue } from \"../../utils/queueInterface\";\nimport { viewOnSpotify } from \"../../utils/spotifyInterface\";\nimport \"../../styles/SearchWeb.css\";\nimport { NotificationContainer, NotificationManager } from \"react-notifications\";\nimport \"react-notifications/lib/notifications.css\";\nimport SearchResults from \"./searchResults\";\nimport SearchIcon from \"../../resources/images/SearchIcon.png\";\nimport Spotify from \"spotify-web-api-js\";\nconst spotifyWebApi = new Spotify();\n\nclass SearchWeb extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      trackSearchResults: global.spotifyTrackSearchResults,\n      spotifySearch: Object.keys(global.spotifyTrackSearchResults).length == 0 ? false : true,\n      lastSpotifySearchQuery: global.lastSpotifySearchQuery,\n      songOptionsSelected: false,\n      selectedSongInfo: \"HI\"\n    };\n\n    this.createNotification = type => {\n      console.log(\"GOT TO CREATE NOTIFICATION\");\n\n      switch (type) {\n        case \"info\":\n          NotificationManager.info(\"Info message\");\n          break;\n\n        case \"success\":\n          NotificationManager.success(\"Success message\", \"Title here\");\n          break;\n\n        case \"warning\":\n          NotificationManager.warning(\"Warning message\", \"Close after 3000ms\", 3000);\n          break;\n\n        case \"error\":\n          NotificationManager.error(\"Make sure you are logged into your Spotify\", \"Error!\", 5000, () => {//alert(\"callback\");\n          });\n          break;\n      }\n\n      return () => {};\n    };\n\n    this.spotifySearchTrack = () => {\n      var query = document.getElementById(\"searchQuery\").value;\n      spotifyWebApi.searchTracks(query).then(response => {\n        console.log(response);\n        this.setState({\n          trackSearchResults: response.tracks.items,\n          spotifySearch: true\n        });\n        global.spotifyTrackSearchResults = response.tracks.items;\n        global.lastSpotifySearchQuery = query;\n      }, reason => {\n        console.log(\"GOT TO ERROR\");\n        this.createNotification(\"error\");\n        console.error(reason); // Error!\n      });\n    };\n\n    this.showSongOptions = songInfo => {\n      console.log(songInfo);\n      this.setState({\n        songOptionsSelected: true,\n        selectedSongInfo: songInfo\n      });\n    };\n\n    this.formatArtistString = artistObj => {\n      var artistString = \"\";\n      var numArtists = 0;\n\n      for (var key in Object.keys(artistObj)) {\n        var artist = artistObj[key];\n\n        if (numArtists > 0) {\n          artistString = artistString + \", \" + artist.name;\n        } else {\n          artistString = artist.name;\n        }\n\n        numArtists += 1;\n      }\n\n      return artistString;\n    };\n\n    this.addToQueue = () => {};\n\n    this.viewOnSpotify = songInfo => {\n      let url = songInfo.external_urls.spotify;\n      var win = window.open(url, \"_blank\");\n      win.focus();\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"searchFlex\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"searchMiddle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"searchQueryDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"searchInputDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"searchIcon\",\n      src: SearchIcon,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      id: \"searchQuery\",\n      placeholder: this.state.lastSpotifySearchQuery === \"\" ? \"Search a song or artist..\" : this.state.lastSpotifySearchQuery,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"searchButtonDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      id: \"spotifySearchBtn\",\n      onClick: this.spotifySearchTrack,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"searchDivHeader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 13\n      }\n    }, this.state.spotifySearch ? \"Spotify Search\" : \"Enter a query and click desired platform to search..\")), /*#__PURE__*/React.createElement(SearchResults, {\n      trackSearchResults: this.state.trackSearchResults,\n      showSongOptions: this.showSongOptions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(NotificationContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }\n    })), this.state.songOptionsSelected ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"searchRight\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"songOptionsAlbumImg\",\n      src: this.state.selectedSongInfo.album.images[0].url,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"songOptionsTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }\n    }, this.state.selectedSongInfo.name), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"songOptionsArtist\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }\n    }, this.formatArtistString(this.state.selectedSongInfo.artists)), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"firstSeparatorLine\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"addToQueueBtn\",\n      onClick: () => addSongToQueue(this.state.selectedSongInfo),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"secondSeparatorLine\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"viewOnSpotifyBtn\",\n      onClick: () => viewOnSpotify(this.state.selectedSongInfo),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 13\n      }\n    })) :\n    /*#__PURE__*/\n    // If nothing selected, show nothing on right side\n    React.createElement(\"div\", {\n      className: \"searchRight\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }\n    }));\n  }\n\n}\n\nexport default SearchWeb;","map":{"version":3,"sources":["/Users/dbanta/Desktop/Aux React/aux-pwa/src/components/search/searchWeb.jsx"],"names":["React","Component","addSongToQueue","viewOnSpotify","NotificationContainer","NotificationManager","SearchResults","SearchIcon","Spotify","spotifyWebApi","SearchWeb","state","trackSearchResults","global","spotifyTrackSearchResults","spotifySearch","Object","keys","length","lastSpotifySearchQuery","songOptionsSelected","selectedSongInfo","createNotification","type","console","log","info","success","warning","error","spotifySearchTrack","query","document","getElementById","value","searchTracks","then","response","setState","tracks","items","reason","showSongOptions","songInfo","formatArtistString","artistObj","artistString","numArtists","key","artist","name","addToQueue","url","external_urls","spotify","win","window","open","focus","render","album","images","artists"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport { addSongToQueue } from \"../../utils/queueInterface\";\n\nimport { viewOnSpotify } from \"../../utils/spotifyInterface\";\n\nimport \"../../styles/SearchWeb.css\";\nimport {\n  NotificationContainer,\n  NotificationManager,\n} from \"react-notifications\";\nimport \"react-notifications/lib/notifications.css\";\n\nimport SearchResults from \"./searchResults\";\n\nimport SearchIcon from \"../../resources/images/SearchIcon.png\";\n\nimport Spotify from \"spotify-web-api-js\";\nconst spotifyWebApi = new Spotify();\n\nclass SearchWeb extends Component {\n  state = {\n    trackSearchResults: global.spotifyTrackSearchResults,\n    spotifySearch:\n      Object.keys(global.spotifyTrackSearchResults).length == 0 ? false : true,\n    lastSpotifySearchQuery: global.lastSpotifySearchQuery,\n    songOptionsSelected: false,\n    selectedSongInfo: \"HI\",\n  };\n\n  createNotification = (type) => {\n    console.log(\"GOT TO CREATE NOTIFICATION\");\n    switch (type) {\n      case \"info\":\n        NotificationManager.info(\"Info message\");\n        break;\n      case \"success\":\n        NotificationManager.success(\"Success message\", \"Title here\");\n        break;\n      case \"warning\":\n        NotificationManager.warning(\n          \"Warning message\",\n          \"Close after 3000ms\",\n          3000\n        );\n        break;\n      case \"error\":\n        NotificationManager.error(\n          \"Make sure you are logged into your Spotify\",\n          \"Error!\",\n          5000,\n          () => {\n            //alert(\"callback\");\n          }\n        );\n        break;\n    }\n    return () => {};\n  };\n\n  spotifySearchTrack = () => {\n    var query = document.getElementById(\"searchQuery\").value;\n    spotifyWebApi.searchTracks(query).then(\n      (response) => {\n        console.log(response);\n        this.setState({\n          trackSearchResults: response.tracks.items,\n          spotifySearch: true,\n        });\n\n        global.spotifyTrackSearchResults = response.tracks.items;\n        global.lastSpotifySearchQuery = query;\n      },\n      (reason) => {\n        console.log(\"GOT TO ERROR\");\n        this.createNotification(\"error\");\n        console.error(reason); // Error!\n      }\n    );\n  };\n\n  showSongOptions = (songInfo) => {\n    console.log(songInfo);\n\n    this.setState({\n      songOptionsSelected: true,\n      selectedSongInfo: songInfo,\n    });\n  };\n\n  formatArtistString = (artistObj) => {\n    var artistString = \"\";\n    var numArtists = 0;\n\n    for (var key in Object.keys(artistObj)) {\n      var artist = artistObj[key];\n\n      if (numArtists > 0) {\n        artistString = artistString + \", \" + artist.name;\n      } else {\n        artistString = artist.name;\n      }\n      numArtists += 1;\n    }\n\n    return artistString;\n  };\n\n  addToQueue = () => {};\n\n  viewOnSpotify = (songInfo) => {\n    let url = songInfo.external_urls.spotify;\n\n    var win = window.open(url, \"_blank\");\n    win.focus();\n  };\n\n  render() {\n    return (\n      <div className=\"searchFlex\">\n        <div className=\"searchMiddle\">\n          <div className=\"searchQueryDiv\">\n            <div className=\"searchInputDiv\">\n              <img className=\"searchIcon\" src={SearchIcon} alt=\"\"></img>\n              <input\n                type=\"text\"\n                id=\"searchQuery\"\n                placeholder={\n                  this.state.lastSpotifySearchQuery === \"\"\n                    ? \"Search a song or artist..\"\n                    : this.state.lastSpotifySearchQuery\n                }></input>\n            </div>\n            <div className=\"searchButtonDiv\">\n              <button\n                id=\"spotifySearchBtn\"\n                onClick={this.spotifySearchTrack}></button>\n            </div>\n            <p id=\"searchDivHeader\">\n              {this.state.spotifySearch\n                ? \"Spotify Search\"\n                : \"Enter a query and click desired platform to search..\"}\n            </p>\n          </div>\n          <SearchResults\n            trackSearchResults={this.state.trackSearchResults}\n            showSongOptions={this.showSongOptions}></SearchResults>\n          <NotificationContainer />\n        </div>\n        {/* If Song Options was selected, show selected song info on right side */}\n        {this.state.songOptionsSelected ? (\n          <div className=\"searchRight\">\n            <img\n              className=\"songOptionsAlbumImg\"\n              src={this.state.selectedSongInfo.album.images[0].url}\n              alt=\"\"></img>\n\n            <p className=\"songOptionsTitle\">\n              {this.state.selectedSongInfo.name}\n            </p>\n            <p className=\"songOptionsArtist\">\n              {this.formatArtistString(this.state.selectedSongInfo.artists)}\n            </p>\n            <div id=\"firstSeparatorLine\"></div>\n            <button\n              id=\"addToQueueBtn\"\n              onClick={() =>\n                addSongToQueue(this.state.selectedSongInfo)\n              }></button>\n            <div id=\"secondSeparatorLine\"></div>\n            <button\n              id=\"viewOnSpotifyBtn\"\n              onClick={() =>\n                viewOnSpotify(this.state.selectedSongInfo)\n              }></button>\n          </div>\n        ) : (\n          // If nothing selected, show nothing on right side\n          <div className=\"searchRight\"></div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default SearchWeb;\n"]},"metadata":{},"sourceType":"module"}