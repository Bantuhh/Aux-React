{"ast":null,"code":"var _jsxFileName = \"/Users/dbanta/Desktop/Aux React/aux-pwa/src/pages/accounts.jsx\";\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport MediaQuery from \"react-responsive\";\nimport NavBar from \"../components/navbar\";\nimport AccountsWeb from \"../components/accounts/accountsWeb\";\nimport AccountsMobile from \"../components/accounts/accountsMobile\";\n\nclass Accounts extends Component {\n  render() {\n    var express = require(\"express\"); // Express web server framework\n\n\n    var request = require(\"request\"); // \"Request\" library\n\n\n    var cors = require(\"cors\");\n\n    var querystring = require(\"querystring\");\n\n    var cookieParser = require(\"cookie-parser\");\n\n    var client_id = \"227cced9ee024965a232392f9d6fef70\"; // Your client id\n\n    var client_secret = \"77423075cabc461d95be888c4bb0efab\"; // Your secret\n\n    var redirect_uri = \"http://localhost:3000/Accounts\"; // Your redirect uri\n\n    /**\n     * Generates a random string containing numbers and letters\n     * @param  {number} length The length of the string\n     * @return {string} The generated string\n     */\n\n    var generateRandomString = function (length) {\n      var text = \"\";\n      var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n      for (var i = 0; i < length; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n      }\n\n      return text;\n    };\n\n    var stateKey = \"spotify_auth_state\";\n    var app = express();\n    app.use(express.static(__dirname + \"/public\")).use(cors()).use(cookieParser());\n    app.get(\"/login\", function (req, res) {\n      var state = generateRandomString(16);\n      res.cookie(stateKey, state); // your application requests authorization\n\n      var scope = \"user-read-private user-read-email\";\n      res.redirect(\"https://accounts.spotify.com/authorize?\" + querystring.stringify({\n        response_type: \"code\",\n        client_id: client_id,\n        scope: scope,\n        redirect_uri: redirect_uri,\n        state: state\n      }));\n    });\n    app.get(\"/callback\", function (req, res) {\n      // your application requests refresh and access tokens\n      // after checking the state parameter\n      var code = req.query.code || null;\n      var state = req.query.state || null;\n      var storedState = req.cookies ? req.cookies[stateKey] : null;\n\n      if (state === null || state !== storedState) {\n        res.redirect(\"/#\" + querystring.stringify({\n          error: \"state_mismatch\"\n        }));\n      } else {\n        res.clearCookie(stateKey);\n        var authOptions = {\n          url: \"https://accounts.spotify.com/api/token\",\n          form: {\n            code: code,\n            redirect_uri: redirect_uri,\n            grant_type: \"authorization_code\"\n          },\n          headers: {\n            Authorization: \"Basic \" + new Buffer(client_id + \":\" + client_secret).toString(\"base64\")\n          },\n          json: true\n        };\n        request.post(authOptions, function (error, response, body) {\n          if (!error && response.statusCode === 200) {\n            var access_token = body.access_token,\n                refresh_token = body.refresh_token;\n            var options = {\n              url: \"https://api.spotify.com/v1/me\",\n              headers: {\n                Authorization: \"Bearer \" + access_token\n              },\n              json: true\n            }; // use the access token to access the Spotify Web API\n\n            request.get(options, function (error, response, body) {\n              console.log(body);\n            }); // we can also pass the token to the browser to make requests from there\n\n            res.redirect(\"/#\" + querystring.stringify({\n              access_token: access_token,\n              refresh_token: refresh_token\n            }));\n          } else {\n            res.redirect(\"/#\" + querystring.stringify({\n              error: \"invalid_token\"\n            }));\n          }\n        });\n      }\n    });\n    app.get(\"/refresh_token\", function (req, res) {\n      // requesting access token from refresh token\n      var refresh_token = req.query.refresh_token;\n      var authOptions = {\n        url: \"https://accounts.spotify.com/api/token\",\n        headers: {\n          Authorization: \"Basic \" + new Buffer(client_id + \":\" + client_secret).toString(\"base64\")\n        },\n        form: {\n          grant_type: \"refresh_token\",\n          refresh_token: refresh_token\n        },\n        json: true\n      };\n      request.post(authOptions, function (error, response, body) {\n        if (!error && response.statusCode === 200) {\n          var access_token = body.access_token;\n          res.send({\n            access_token: access_token\n          });\n        }\n      });\n    });\n    console.log(\"Listening on 8888\");\n    app.listen(8888);\n    return React.createElement(\"div\", {\n      class: \"accounts\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(NavBar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }), React.createElement(MediaQuery, {\n      query: \"(min-device-width: 1224px)\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(MediaQuery, {\n      query: \"(min-width: 1225px)\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(AccountsWeb, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    })), React.createElement(MediaQuery, {\n      query: \"(max-width: 1224px)\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(AccountsWeb, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }))), React.createElement(MediaQuery, {\n      query: \"(max-device-width: 1224px)\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(MediaQuery, {\n      query: \"(min-device-width: 1024px)\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(AccountsMobile, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    })), React.createElement(MediaQuery, {\n      query: \"(max-device-width: 1023px)\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(AccountsMobile, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default Accounts;","map":{"version":3,"sources":["/Users/dbanta/Desktop/Aux React/aux-pwa/src/pages/accounts.jsx"],"names":["React","Component","Link","MediaQuery","NavBar","AccountsWeb","AccountsMobile","Accounts","render","express","require","request","cors","querystring","cookieParser","client_id","client_secret","redirect_uri","generateRandomString","length","text","possible","i","charAt","Math","floor","random","stateKey","app","use","static","__dirname","get","req","res","state","cookie","scope","redirect","stringify","response_type","code","query","storedState","cookies","error","clearCookie","authOptions","url","form","grant_type","headers","Authorization","Buffer","toString","json","post","response","body","statusCode","access_token","refresh_token","options","console","log","send","listen"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport MediaQuery from \"react-responsive\";\n\nimport NavBar from \"../components/navbar\";\n\nimport AccountsWeb from \"../components/accounts/accountsWeb\";\nimport AccountsMobile from \"../components/accounts/accountsMobile\";\n\nclass Accounts extends Component {\n  render() {\n    var express = require(\"express\"); // Express web server framework\n    var request = require(\"request\"); // \"Request\" library\n    var cors = require(\"cors\");\n    var querystring = require(\"querystring\");\n    var cookieParser = require(\"cookie-parser\");\n\n    var client_id = \"227cced9ee024965a232392f9d6fef70\"; // Your client id\n    var client_secret = \"77423075cabc461d95be888c4bb0efab\"; // Your secret\n    var redirect_uri = \"http://localhost:3000/Accounts\"; // Your redirect uri\n\n    /**\n     * Generates a random string containing numbers and letters\n     * @param  {number} length The length of the string\n     * @return {string} The generated string\n     */\n    var generateRandomString = function (length) {\n      var text = \"\";\n      var possible =\n        \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\n      for (var i = 0; i < length; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n      }\n      return text;\n    };\n\n    var stateKey = \"spotify_auth_state\";\n\n    var app = express();\n\n    app\n      .use(express.static(__dirname + \"/public\"))\n      .use(cors())\n      .use(cookieParser());\n\n    app.get(\"/login\", function (req, res) {\n      var state = generateRandomString(16);\n      res.cookie(stateKey, state);\n\n      // your application requests authorization\n      var scope = \"user-read-private user-read-email\";\n      res.redirect(\n        \"https://accounts.spotify.com/authorize?\" +\n          querystring.stringify({\n            response_type: \"code\",\n            client_id: client_id,\n            scope: scope,\n            redirect_uri: redirect_uri,\n            state: state,\n          })\n      );\n    });\n\n    app.get(\"/callback\", function (req, res) {\n      // your application requests refresh and access tokens\n      // after checking the state parameter\n\n      var code = req.query.code || null;\n      var state = req.query.state || null;\n      var storedState = req.cookies ? req.cookies[stateKey] : null;\n\n      if (state === null || state !== storedState) {\n        res.redirect(\n          \"/#\" +\n            querystring.stringify({\n              error: \"state_mismatch\",\n            })\n        );\n      } else {\n        res.clearCookie(stateKey);\n        var authOptions = {\n          url: \"https://accounts.spotify.com/api/token\",\n          form: {\n            code: code,\n            redirect_uri: redirect_uri,\n            grant_type: \"authorization_code\",\n          },\n          headers: {\n            Authorization:\n              \"Basic \" +\n              new Buffer(client_id + \":\" + client_secret).toString(\"base64\"),\n          },\n          json: true,\n        };\n\n        request.post(authOptions, function (error, response, body) {\n          if (!error && response.statusCode === 200) {\n            var access_token = body.access_token,\n              refresh_token = body.refresh_token;\n\n            var options = {\n              url: \"https://api.spotify.com/v1/me\",\n              headers: { Authorization: \"Bearer \" + access_token },\n              json: true,\n            };\n\n            // use the access token to access the Spotify Web API\n            request.get(options, function (error, response, body) {\n              console.log(body);\n            });\n\n            // we can also pass the token to the browser to make requests from there\n            res.redirect(\n              \"/#\" +\n                querystring.stringify({\n                  access_token: access_token,\n                  refresh_token: refresh_token,\n                })\n            );\n          } else {\n            res.redirect(\n              \"/#\" +\n                querystring.stringify({\n                  error: \"invalid_token\",\n                })\n            );\n          }\n        });\n      }\n    });\n\n    app.get(\"/refresh_token\", function (req, res) {\n      // requesting access token from refresh token\n      var refresh_token = req.query.refresh_token;\n      var authOptions = {\n        url: \"https://accounts.spotify.com/api/token\",\n        headers: {\n          Authorization:\n            \"Basic \" +\n            new Buffer(client_id + \":\" + client_secret).toString(\"base64\"),\n        },\n        form: {\n          grant_type: \"refresh_token\",\n          refresh_token: refresh_token,\n        },\n        json: true,\n      };\n\n      request.post(authOptions, function (error, response, body) {\n        if (!error && response.statusCode === 200) {\n          var access_token = body.access_token;\n          res.send({\n            access_token: access_token,\n          });\n        }\n      });\n    });\n\n    console.log(\"Listening on 8888\");\n    app.listen(8888);\n    return (\n      <div class=\"accounts\">\n        <NavBar></NavBar>\n\n        <MediaQuery query=\"(min-device-width: 1224px)\">\n          <MediaQuery query=\"(min-width: 1225px)\">\n            <AccountsWeb></AccountsWeb>\n          </MediaQuery>\n          <MediaQuery query=\"(max-width: 1224px)\">\n            <AccountsWeb></AccountsWeb>\n          </MediaQuery>\n        </MediaQuery>\n\n        <MediaQuery query=\"(max-device-width: 1224px)\">\n          <MediaQuery query=\"(min-device-width: 1024px)\">\n            <AccountsMobile></AccountsMobile>\n          </MediaQuery>\n\n          <MediaQuery query=\"(max-device-width: 1023px)\">\n            <AccountsMobile></AccountsMobile>\n          </MediaQuery>\n        </MediaQuery>\n      </div>\n    );\n  }\n}\n\nexport default Accounts;\n"]},"metadata":{},"sourceType":"module"}