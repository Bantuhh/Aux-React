{"ast":null,"code":"var _jsxFileName = \"/Users/dbanta/Desktop/Aux React/aux-pwa/src/components/session/sessionWeb.jsx\";\nimport React, { Component, useEffect } from \"react\";\nimport \"../../styles/SessionWeb.css\";\nimport SessionController from \"./sessionController\";\nimport SessionQueue from \"./sessionQueue\";\nimport Spotify from \"spotify-web-api-js\";\nconst spotifyWebApi = new Spotify();\n\nclass SessionWeb extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {};\n  }\n\n  render() {\n    useEffect(() => {\n      const script = document.createElement(\"script\");\n      script.src = \"https://sdk.scdn.co/spotify-player.js\";\n      script.async = true;\n      document.body.appendChild(script);\n      return () => {\n        document.body.removeChild(script);\n      };\n    }, []);\n\n    window.onSpotifyWebPlaybackSDKReady = () => {\n      const token = spotifyWebApi.getAccessToken().then(response => {\n        console.log(response);\n        return response;\n      }, reason => {\n        console.log(reason);\n        return reason;\n      });\n      console.log(\"Token: \", token);\n      const player = new Spotify.Player({\n        name: \"Web Playback SDK Quick Start Player\",\n        getOAuthToken: cb => {\n          cb(token);\n        }\n      }); // Error handling\n\n      player.addListener(\"initialization_error\", ({\n        message\n      }) => {\n        console.error(message);\n      });\n      player.addListener(\"authentication_error\", ({\n        message\n      }) => {\n        console.error(message);\n      });\n      player.addListener(\"account_error\", ({\n        message\n      }) => {\n        console.error(message);\n      });\n      player.addListener(\"playback_error\", ({\n        message\n      }) => {\n        console.error(message);\n      }); // Playback status updates\n\n      player.addListener(\"player_state_changed\", state => {\n        console.log(state);\n      }); // Ready\n\n      player.addListener(\"ready\", ({\n        device_id\n      }) => {\n        console.log(\"Ready with Device ID\", device_id);\n      }); // Not Ready\n\n      player.addListener(\"not_ready\", ({\n        device_id\n      }) => {\n        console.log(\"Device ID has gone offline\", device_id);\n      }); // Connect to the player!\n\n      player.connect();\n    };\n\n    const play = ({\n      spotify_uri,\n      playerInstance: {\n        _options: {\n          getOAuthToken,\n          id\n        }\n      }\n    }) => {\n      getOAuthToken(access_token => {\n        fetch(`https://api.spotify.com/v1/me/player/play?device_id=${id}`, {\n          method: \"PUT\",\n          body: JSON.stringify({\n            uris: [spotify_uri]\n          }),\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${access_token}`\n          }\n        });\n      });\n    };\n\n    return React.createElement(\"div\", {\n      className: \"sessionFlex\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"sessionMiddle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(SessionController, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }), React.createElement(SessionQueue, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"sessionRight\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default SessionWeb;","map":{"version":3,"sources":["/Users/dbanta/Desktop/Aux React/aux-pwa/src/components/session/sessionWeb.jsx"],"names":["React","Component","useEffect","SessionController","SessionQueue","Spotify","spotifyWebApi","SessionWeb","state","render","script","document","createElement","src","async","body","appendChild","removeChild","window","onSpotifyWebPlaybackSDKReady","token","getAccessToken","then","response","console","log","reason","player","Player","name","getOAuthToken","cb","addListener","message","error","device_id","connect","play","spotify_uri","playerInstance","_options","id","access_token","fetch","method","JSON","stringify","uris","headers","Authorization"],"mappings":"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","sourcesContent":["import React, { Component, useEffect } from \"react\";\n\nimport \"../../styles/SessionWeb.css\";\n\nimport SessionController from \"./sessionController\";\nimport SessionQueue from \"./sessionQueue\";\n\nimport Spotify from \"spotify-web-api-js\";\nconst spotifyWebApi = new Spotify();\n\nclass SessionWeb extends Component {\n  state = {};\n  render() {\n    useEffect(() => {\n      const script = document.createElement(\"script\");\n\n      script.src = \"https://sdk.scdn.co/spotify-player.js\";\n      script.async = true;\n\n      document.body.appendChild(script);\n\n      return () => {\n        document.body.removeChild(script);\n      };\n    }, []);\n\n    window.onSpotifyWebPlaybackSDKReady = () => {\n      const token = spotifyWebApi.getAccessToken().then(\n        (response) => {\n          console.log(response);\n          return response;\n        },\n        (reason) => {\n          console.log(reason);\n          return reason;\n        }\n      );\n\n      console.log(\"Token: \", token);\n\n      const player = new Spotify.Player({\n        name: \"Web Playback SDK Quick Start Player\",\n        getOAuthToken: (cb) => {\n          cb(token);\n        },\n      });\n\n      // Error handling\n      player.addListener(\"initialization_error\", ({ message }) => {\n        console.error(message);\n      });\n      player.addListener(\"authentication_error\", ({ message }) => {\n        console.error(message);\n      });\n      player.addListener(\"account_error\", ({ message }) => {\n        console.error(message);\n      });\n      player.addListener(\"playback_error\", ({ message }) => {\n        console.error(message);\n      });\n\n      // Playback status updates\n      player.addListener(\"player_state_changed\", (state) => {\n        console.log(state);\n      });\n\n      // Ready\n      player.addListener(\"ready\", ({ device_id }) => {\n        console.log(\"Ready with Device ID\", device_id);\n      });\n\n      // Not Ready\n      player.addListener(\"not_ready\", ({ device_id }) => {\n        console.log(\"Device ID has gone offline\", device_id);\n      });\n\n      // Connect to the player!\n      player.connect();\n    };\n\n    const play = ({\n      spotify_uri,\n      playerInstance: {\n        _options: { getOAuthToken, id },\n      },\n    }) => {\n      getOAuthToken((access_token) => {\n        fetch(`https://api.spotify.com/v1/me/player/play?device_id=${id}`, {\n          method: \"PUT\",\n          body: JSON.stringify({ uris: [spotify_uri] }),\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${access_token}`,\n          },\n        });\n      });\n    };\n\n    return (\n      <div className=\"sessionFlex\">\n        <div className=\"sessionMiddle\">\n          <SessionController></SessionController>\n          <SessionQueue></SessionQueue>\n        </div>\n        <div className=\"sessionRight\"></div>\n      </div>\n    );\n  }\n}\n\nexport default SessionWeb;\n"]},"metadata":{},"sourceType":"module"}