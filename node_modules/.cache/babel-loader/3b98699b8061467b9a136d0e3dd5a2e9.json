{"ast":null,"code":"var _jsxFileName = \"/Users/dbanta/Desktop/Aux React/aux-pwa/src/components/library/libraryMobile.jsx\";\nimport React, { Component } from \"react\";\nimport { SessionContext } from \"../../session-context\";\nimport { addSongToQueue, addPlaylistToQueue } from \"../../utils/queueInterface\";\nimport { viewOnSpotify, playURI, formatArtistString } from \"../../utils/spotifyInterface\";\nimport \"./Library.css\";\nimport { NotificationContainer, NotificationManager } from \"react-notifications\";\nimport \"react-notifications/lib/notifications.css\";\nimport LibraryResults from \"./libraryResults\";\nimport Spotify from \"spotify-web-api-js\";\nconst spotifyWebApi = new Spotify();\n\nclass LibraryMobile extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      spotifyFavoritesResults: global.spotifyFavoritesResults,\n      spoitfyPlaylistsResults: global.spoitfyPlaylistsResults,\n      selectedTab: \"Favorites\",\n      playlistSelected: false,\n      selectedPlaylistInfo: \"\",\n      selectedPlaylistTracksInfo: \"\",\n      songOptionsSelected: false,\n      selectedSongInfo: \"HI\",\n      playlistOptionsSelected: false,\n      selectedPlatform: \"Spotify\"\n    };\n\n    this.createNotification = type => {\n      console.log(\"GOT TO CREATE NOTIFICATION\");\n\n      switch (type) {\n        case \"info\":\n          NotificationManager.info(\"Info message\");\n          break;\n\n        case \"success\":\n          NotificationManager.success(\"I knew you could do it.\", \"Added song to queue\", 1500);\n          break;\n\n        case \"warning\":\n          NotificationManager.warning(\"Warning message\", \"Close after 3000ms\", 3000);\n          break;\n\n        case \"error\":\n          NotificationManager.error(\"Make sure you are logged into your Spotify\", \"Error!\", 5000, () => {//alert(\"callback\");\n          });\n          break;\n\n        default:\n          console.log(\"Not a known notification\");\n          break;\n      }\n\n      return () => {};\n    };\n\n    this.getSpotifyLibrary = () => {\n      this.setState({\n        selectedPlatform: \"Spotify\"\n      });\n      spotifyWebApi.getMySavedTracks({\n        limit: 50\n      }).then(response => {\n        console.log(response.items);\n        this.setState({\n          spotifyFavoritesResults: response.items\n        });\n        global.spotifyFavoritesResults = response.items;\n      }, reason => {\n        console.log(\"GOT TO ERROR\");\n        console.error(reason); // Error!\n      }); // Get next 50 favorites as well\n\n      spotifyWebApi.getMySavedTracks({\n        offset: 50,\n        limit: 50\n      }).then(response => {\n        var newResults = this.state.spotifyFavoritesResults;\n        var newKey = 50;\n\n        for (var key in response.items) {\n          newResults[newKey] = response.items[key];\n          newKey += 1;\n        }\n\n        this.setState({\n          spotifyFavoritesResults: newResults\n        });\n        global.spotifyFavoritesResults = newResults;\n        console.log(newResults);\n      }, reason => {\n        console.log(\"GOT TO ERROR\");\n        console.error(reason); // Error!\n      });\n      spotifyWebApi.getUserPlaylists().then(response => {\n        this.setState({\n          spoitfyPlaylistsResults: response.items\n        });\n        global.spoitfyPlaylistsResults = response.items;\n      }, reason => {\n        console.log(\"GOT TO ERROR\");\n        console.error(reason); // Error!\n      });\n      spotifyWebApi.getMe().then(response => {\n        global.spotifyUserID = response.id;\n      }, reason => {\n        console.log(\"GOT TO ERROR (getME)\");\n        console.error(reason); // Error!\n\n        this.createNotification(\"error\");\n      });\n    };\n\n    this.tabClick = tabName => {\n      var i, tablinks;\n      tablinks = document.getElementsByClassName(\"tablinks\");\n\n      for (i = 0; i < tablinks.length; i++) {\n        if (tablinks[i].id === tabName) {\n          tablinks[i].className = \"tablinks active\";\n        } else {\n          tablinks[i].className = \"tablinks\";\n        }\n      }\n\n      this.setState({\n        selectedTab: tabName\n      });\n    };\n\n    this.getPlaylistTracks = playlistID => {\n      const userID = global.spotifyUserID;\n      spotifyWebApi.getPlaylistTracks(userID, playlistID).then(response => {\n        this.setState({\n          selectedPlaylistTracksInfo: response.items\n        });\n      }, reason => {\n        console.log(\"GOT TO ERROR (getPlaylistTracks)\");\n        this.createNotification(\"error\");\n        console.error(reason); // Error!\n      });\n    };\n\n    this.showPlaylist = playlistInfo => {\n      console.log(playlistInfo);\n      var div = document.getElementsByClassName(\"libraryDiv\")[0];\n      div.style.height = \"65%\";\n      this.getPlaylistTracks(playlistInfo.id);\n      this.setState({\n        playlistSelected: true,\n        selectedPlaylistInfo: playlistInfo\n      });\n    };\n\n    this.backToLibraryFromPlaylist = () => {\n      this.setState({\n        playlistSelected: false,\n        selectedTab: \"Playlists\"\n      });\n      var div = document.getElementsByClassName(\"libraryDiv\")[0];\n      div.style.height = \"78%\";\n    };\n\n    this.showSongOptions = songInfo => {\n      var songInfoCopy = songInfo.track;\n      this.setState({\n        songOptionsSelected: true,\n        playlistOptionsSelected: false,\n        selectedSongInfo: songInfoCopy\n      });\n    };\n\n    this.showPlaylistOptions = playlistInfo => {\n      this.setState({\n        playlistOptionsSelected: true,\n        songOptionsSelected: false,\n        selectedPlaylistInfo: playlistInfo\n      });\n    };\n\n    this.playSongNow = songInfo => {\n      var songInfoCopy = songInfo.track;\n      const songURI = songInfoCopy[\"uri\"];\n      global.youtubePlayer.pauseVideo();\n      playURI(songURI, global.spotifyAccessToken); // Reset Song Progress Bar\n\n      global.currentContentPosition = 0;\n      global.isContentPlaying = true; // Set song as currently playing\n\n      global.currentlyPlaying = [\"Spotify\", songInfoCopy];\n      this.context.updateSessionQueue(global.sessionQueue);\n    };\n\n    this.addSongToQueue = (platform, songInfo) => {\n      addSongToQueue(platform, songInfo);\n      this.createNotification(\"success\");\n    };\n\n    this.addPlaylistToQueue = (platform, playlistInfo) => {\n      addPlaylistToQueue(platform, playlistInfo);\n      this.createNotification(\"success\");\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"libraryFlexMobile\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 7\n      }\n    }, !this.state.playlistSelected ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"libraryMiddleMobile\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"libraryQueryDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"libraryTabDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: this.state.selectedTab === \"Favorites\" ? \"tablinks active\" : \"tablinks\",\n      onClick: () => this.tabClick(\"Favorites\"),\n      id: \"Favorites\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 17\n      }\n    }, \"Favorites\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: this.state.selectedTab === \"Playlists\" ? \"tablinks active\" : \"tablinks\",\n      onClick: () => this.tabClick(\"Playlists\"),\n      id: \"Playlists\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 17\n      }\n    }, \"Playlists\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"libraryButtonDivMobile\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      id: \"spotifyLibraryBtn\",\n      onClick: this.getSpotifyLibrary,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"libraryDivHeader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 15\n      }\n    }, this.state.spotifyFavoritesResults.length > 0 ? \"Spotify \" + this.state.selectedTab : \"Click desired platform to see library..\")), /*#__PURE__*/React.createElement(LibraryResults, {\n      selectedTab: this.state.selectedTab,\n      showPlaylist: this.showPlaylist,\n      showingPlaylistContent: this.state.playlistSelected,\n      showSongOptions: this.showSongOptions,\n      playSongNow: this.playSongNow,\n      addSongToQueue: this.addSongToQueue,\n      libraryPullResults: this.state.selectedTab === \"Favorites\" ? this.state.spotifyFavoritesResults : this.state.spoitfyPlaylistsResults,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 13\n      }\n    })) :\n    /*#__PURE__*/\n    // Else, if a playlist is selected, show playlist tracks\n    React.createElement(\"div\", {\n      className: \"libraryMiddle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"playlistHeaderDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      id: \"backToLibraryBtn\",\n      onClick: this.backToLibraryFromPlaylist,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"playlistOptionsBtn\",\n      onClick: () => this.showPlaylistOptions(this.state.selectedPlaylistInfo),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"playlistHeaderInfoDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      id: \"playlistHeaderImg\",\n      src: this.state.selectedPlaylistInfo.images[0].url,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"playlistHeaderTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 17\n      }\n    }, this.state.selectedPlaylistInfo.name), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"numTracksHeader\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 17\n      }\n    }, this.state.selectedPlaylistInfo.tracks.total + \" songs\"))), /*#__PURE__*/React.createElement(LibraryResults, {\n      selectedTab: \"Favorites\",\n      showPlaylist: this.showPlaylist,\n      showingPlaylistContent: this.state.playlistSelected,\n      showSongOptions: this.showSongOptions,\n      addSongToQueue: this.addSongToQueue,\n      playSongNow: this.playSongNow,\n      libraryPullResults: this.state.selectedPlaylistTracksInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(NotificationContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }\n    }), this.state.songOptionsSelected ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"libraryRight\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"songOptionsAlbumImg\",\n      src: this.state.selectedSongInfo.album.images[0].url,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"songOptionsTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 13\n      }\n    }, this.state.selectedSongInfo.name), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"songOptionsArtist\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 13\n      }\n    }, formatArtistString(this.state.selectedSongInfo.artists)), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"firstSeparatorLine\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"addToQueueBtn\",\n      onClick: () => this.addSongToQueue(this.state.selectedPlatform, this.state.selectedSongInfo),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"secondSeparatorLine\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"viewOnSpotifyBtn\",\n      onClick: () => viewOnSpotify(this.state.selectedSongInfo),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 13\n      }\n    })) : // If Playlist Options was selected, show selected playlist info on right side\n    this.state.playlistOptionsSelected ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"libraryRight\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"songOptionsAlbumImg\",\n      src: this.state.selectedPlaylistInfo.images[0].url,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"songOptionsTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 13\n      }\n    }, this.state.selectedPlaylistInfo.name), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"songOptionsArtist\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 13\n      }\n    }, this.state.selectedPlaylistInfo.tracks.total + \" songs\"), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"firstSeparatorLine\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"addToQueueBtn\",\n      onClick: () => this.addPlaylistToQueue(this.state.selectedPlatform, this.state.selectedPlaylistInfo),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"secondSeparatorLine\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      id: \"viewOnSpotifyBtn\",\n      onClick: () => viewOnSpotify(this.state.selectedPlaylistInfo),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 13\n      }\n    })) :\n    /*#__PURE__*/\n    // If nothing selected, show nothing on right side\n    React.createElement(\"div\", {\n      className: \"libraryRight\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 11\n      }\n    }));\n  }\n\n}\n\nLibraryMobile.contextType = SessionContext;\nexport default LibraryMobile;","map":{"version":3,"sources":["/Users/dbanta/Desktop/Aux React/aux-pwa/src/components/library/libraryMobile.jsx"],"names":["React","Component","SessionContext","addSongToQueue","addPlaylistToQueue","viewOnSpotify","playURI","formatArtistString","NotificationContainer","NotificationManager","LibraryResults","Spotify","spotifyWebApi","LibraryMobile","state","spotifyFavoritesResults","global","spoitfyPlaylistsResults","selectedTab","playlistSelected","selectedPlaylistInfo","selectedPlaylistTracksInfo","songOptionsSelected","selectedSongInfo","playlistOptionsSelected","selectedPlatform","createNotification","type","console","log","info","success","warning","error","getSpotifyLibrary","setState","getMySavedTracks","limit","then","response","items","reason","offset","newResults","newKey","key","getUserPlaylists","getMe","spotifyUserID","id","tabClick","tabName","i","tablinks","document","getElementsByClassName","length","className","getPlaylistTracks","playlistID","userID","showPlaylist","playlistInfo","div","style","height","backToLibraryFromPlaylist","showSongOptions","songInfo","songInfoCopy","track","showPlaylistOptions","playSongNow","songURI","youtubePlayer","pauseVideo","spotifyAccessToken","currentContentPosition","isContentPlaying","currentlyPlaying","context","updateSessionQueue","sessionQueue","platform","render","images","url","name","tracks","total","album","artists","contextType"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { SessionContext } from \"../../session-context\";\n\nimport { addSongToQueue, addPlaylistToQueue } from \"../../utils/queueInterface\";\n\nimport { viewOnSpotify, playURI, formatArtistString } from \"../../utils/spotifyInterface\";\n\nimport \"./Library.css\";\n\nimport {\n  NotificationContainer,\n  NotificationManager,\n} from \"react-notifications\";\nimport \"react-notifications/lib/notifications.css\";\n\nimport LibraryResults from \"./libraryResults\";\n\nimport Spotify from \"spotify-web-api-js\";\nconst spotifyWebApi = new Spotify();\n\nclass LibraryMobile extends Component {\n  state = {\n    spotifyFavoritesResults: global.spotifyFavoritesResults,\n    spoitfyPlaylistsResults: global.spoitfyPlaylistsResults,\n    selectedTab: \"Favorites\",\n    playlistSelected: false,\n    selectedPlaylistInfo: \"\",\n    selectedPlaylistTracksInfo: \"\",\n    songOptionsSelected: false,\n    selectedSongInfo: \"HI\",\n    playlistOptionsSelected: false,\n    selectedPlatform: \"Spotify\",\n  };\n\n  createNotification = (type) => {\n    console.log(\"GOT TO CREATE NOTIFICATION\");\n    switch (type) {\n      case \"info\":\n        NotificationManager.info(\"Info message\");\n        break;\n      case \"success\":\n        NotificationManager.success(\n          \"I knew you could do it.\",\n          \"Added song to queue\",\n          1500\n        );\n        break;\n      case \"warning\":\n        NotificationManager.warning(\n          \"Warning message\",\n          \"Close after 3000ms\",\n          3000\n        );\n        break;\n      case \"error\":\n        NotificationManager.error(\n          \"Make sure you are logged into your Spotify\",\n          \"Error!\",\n          5000,\n          () => {\n            //alert(\"callback\");\n          }\n        );\n        break;\n      default:\n        console.log(\"Not a known notification\")\n        break;\n    }\n    return () => {};\n  };\n\n  getSpotifyLibrary = () => {\n    this.setState({\n      selectedPlatform: \"Spotify\",\n    });\n\n    spotifyWebApi.getMySavedTracks({ limit: 50 }).then(\n      (response) => {\n        console.log(response.items);\n        this.setState({\n          spotifyFavoritesResults: response.items,\n        });\n        global.spotifyFavoritesResults = response.items;\n      },\n      (reason) => {\n        console.log(\"GOT TO ERROR\");\n        console.error(reason); // Error!\n      }\n    );\n\n    // Get next 50 favorites as well\n    spotifyWebApi.getMySavedTracks({ offset: 50, limit: 50 }).then(\n      (response) => {\n        var newResults = this.state.spotifyFavoritesResults;\n        var newKey = 50;\n        for (var key in response.items) {\n          newResults[newKey] = response.items[key]\n          newKey += 1;\n        }\n        this.setState({\n          spotifyFavoritesResults: newResults,\n        });\n        global.spotifyFavoritesResults = newResults;\n        console.log(newResults);\n      },\n      (reason) => {\n        console.log(\"GOT TO ERROR\");\n        console.error(reason); // Error!\n      }\n    );\n\n    spotifyWebApi.getUserPlaylists().then(\n      (response) => {\n        this.setState({\n          spoitfyPlaylistsResults: response.items,\n        });\n        global.spoitfyPlaylistsResults = response.items;\n      },\n      (reason) => {\n        console.log(\"GOT TO ERROR\");\n        console.error(reason); // Error!\n      }\n    );\n\n    spotifyWebApi.getMe().then(\n      (response) => {\n        global.spotifyUserID = response.id;\n      },\n      (reason) => {\n        console.log(\"GOT TO ERROR (getME)\");\n        console.error(reason); // Error!\n        this.createNotification(\"error\");\n      }\n    );\n  };\n\n  tabClick = (tabName) => {\n    var i, tablinks;\n\n    tablinks = document.getElementsByClassName(\"tablinks\");\n\n    for (i = 0; i < tablinks.length; i++) {\n      if (tablinks[i].id === tabName) {\n        tablinks[i].className = \"tablinks active\";\n      } else {\n        tablinks[i].className = \"tablinks\";\n      }\n    }\n\n    this.setState({\n      selectedTab: tabName,\n    });\n  };\n\n  getPlaylistTracks = (playlistID) => {\n    const userID = global.spotifyUserID;\n\n    spotifyWebApi.getPlaylistTracks(userID, playlistID).then(\n      (response) => {\n        this.setState({\n          selectedPlaylistTracksInfo: response.items,\n        });\n      },\n      (reason) => {\n        console.log(\"GOT TO ERROR (getPlaylistTracks)\");\n        this.createNotification(\"error\");\n        console.error(reason); // Error!\n      }\n    );\n  };\n\n  showPlaylist = (playlistInfo) => {\n    console.log(playlistInfo);\n\n    var div = document.getElementsByClassName(\"libraryDiv\")[0];\n    div.style.height = \"65%\";\n\n    this.getPlaylistTracks(playlistInfo.id);\n\n    this.setState({\n      playlistSelected: true,\n      selectedPlaylistInfo: playlistInfo,\n    });\n\n    \n  };\n\n  backToLibraryFromPlaylist = () => {\n    \n\n    this.setState({\n      playlistSelected: false,\n      selectedTab: \"Playlists\",\n    });\n\n    var div = document.getElementsByClassName(\"libraryDiv\")[0];\n    div.style.height = \"78%\";\n  };\n\n  showSongOptions = (songInfo) => {\n    var songInfoCopy = songInfo.track;\n\n    this.setState({\n      songOptionsSelected: true,\n      playlistOptionsSelected: false,\n      selectedSongInfo: songInfoCopy,\n    });\n  };\n\n  showPlaylistOptions = (playlistInfo) => {\n    this.setState({\n      playlistOptionsSelected: true,\n      songOptionsSelected: false,\n      selectedPlaylistInfo: playlistInfo,\n    });\n  };\n\n  playSongNow = (songInfo) => {\n    var songInfoCopy = songInfo.track;\n\n    const songURI = songInfoCopy[\"uri\"];\n\n    global.youtubePlayer.pauseVideo();\n\n    playURI(songURI, global.spotifyAccessToken);\n\n    // Reset Song Progress Bar\n    global.currentContentPosition = 0;\n\n    global.isContentPlaying = true;\n\n    // Set song as currently playing\n    global.currentlyPlaying = [\"Spotify\", songInfoCopy];\n\n    this.context.updateSessionQueue(global.sessionQueue);\n  };\n\n  // Add Spotify song to queue and send notification\n  addSongToQueue = (platform, songInfo) => {\n    addSongToQueue(platform, songInfo);\n    this.createNotification(\"success\");\n  };\n\n  // Add Spotify song to queue and send notification\n  addPlaylistToQueue = (platform, playlistInfo) => {\n    addPlaylistToQueue(platform, playlistInfo);\n    this.createNotification(\"success\");\n  };\n\n  render() {\n    return (\n      <div className=\"libraryFlexMobile\">\n        {/* If a playlist is not selected, show library */}\n        {!this.state.playlistSelected ? (\n          <div className=\"libraryMiddleMobile\">\n            <div className=\"libraryQueryDiv\">\n              <div className=\"libraryTabDiv\">\n                <button\n                  className={\n                    this.state.selectedTab === \"Favorites\"\n                      ? \"tablinks active\"\n                      : \"tablinks\"\n                  }\n                  onClick={() => this.tabClick(\"Favorites\")}\n                  id=\"Favorites\">\n                  Favorites\n                </button>\n                <button\n                  className={\n                    this.state.selectedTab === \"Playlists\"\n                      ? \"tablinks active\"\n                      : \"tablinks\"\n                  }\n                  onClick={() => this.tabClick(\"Playlists\")}\n                  id=\"Playlists\">\n                  Playlists\n                </button>\n              </div>\n              <div className=\"libraryButtonDivMobile\">\n                <button\n                  id=\"spotifyLibraryBtn\"\n                  onClick={this.getSpotifyLibrary}></button>\n              </div>\n              <p id=\"libraryDivHeader\">\n                {this.state.spotifyFavoritesResults.length > 0\n                  ? \"Spotify \" + this.state.selectedTab\n                  : \"Click desired platform to see library..\"}\n              </p>\n            </div>\n            <LibraryResults\n              selectedTab={this.state.selectedTab}\n              showPlaylist={this.showPlaylist}\n              showingPlaylistContent={this.state.playlistSelected}\n              showSongOptions={this.showSongOptions}\n              playSongNow={this.playSongNow}\n              addSongToQueue={this.addSongToQueue}\n              libraryPullResults={\n                this.state.selectedTab === \"Favorites\"\n                  ? this.state.spotifyFavoritesResults\n                  : this.state.spoitfyPlaylistsResults\n              }></LibraryResults>\n          </div>\n        ) : (\n          // Else, if a playlist is selected, show playlist tracks\n          <div className=\"libraryMiddle\">\n            <div className=\"playlistHeaderDiv\">\n              <button\n                id=\"backToLibraryBtn\"\n                onClick={this.backToLibraryFromPlaylist}></button>\n              <button\n                id=\"playlistOptionsBtn\"\n                onClick={() =>\n                  this.showPlaylistOptions(this.state.selectedPlaylistInfo)\n                }></button>\n\n              <div className=\"playlistHeaderInfoDiv\">\n                <img\n                  id=\"playlistHeaderImg\"\n                  src={this.state.selectedPlaylistInfo.images[0].url}\n                  alt=\"\"></img>\n                <p className=\"playlistHeaderTitle\">\n                  {this.state.selectedPlaylistInfo.name}\n                </p>\n                <p className=\"numTracksHeader\">\n                  {this.state.selectedPlaylistInfo.tracks.total + \" songs\"}\n                </p>\n              </div>\n            </div>\n            <LibraryResults\n              selectedTab={\"Favorites\"}\n              showPlaylist={this.showPlaylist}\n              showingPlaylistContent={this.state.playlistSelected}\n              showSongOptions={this.showSongOptions}\n              addSongToQueue={this.addSongToQueue}\n              playSongNow={this.playSongNow}\n              libraryPullResults={\n                this.state.selectedPlaylistTracksInfo\n              }></LibraryResults>\n          </div>\n        )}\n        <NotificationContainer />\n\n        {/* If Song Options was selected, show selected song info on right side */}\n        {this.state.songOptionsSelected ? (\n          <div className=\"libraryRight\">\n            <img\n              className=\"songOptionsAlbumImg\"\n              src={this.state.selectedSongInfo.album.images[0].url}\n              alt=\"\"></img>\n\n            <p className=\"songOptionsTitle\">\n              {this.state.selectedSongInfo.name}\n            </p>\n            <p className=\"songOptionsArtist\">\n              {formatArtistString(this.state.selectedSongInfo.artists)}\n            </p>\n            <div id=\"firstSeparatorLine\"></div>\n            <button\n              id=\"addToQueueBtn\"\n              onClick={() =>\n                this.addSongToQueue(\n                  this.state.selectedPlatform,\n                  this.state.selectedSongInfo\n                )\n              }></button>\n            <div id=\"secondSeparatorLine\"></div>\n            <button\n              id=\"viewOnSpotifyBtn\"\n              onClick={() =>\n                viewOnSpotify(this.state.selectedSongInfo)\n              }></button>\n          </div>\n        ) : // If Playlist Options was selected, show selected playlist info on right side\n        this.state.playlistOptionsSelected ? (\n          <div className=\"libraryRight\">\n            <img\n              className=\"songOptionsAlbumImg\"\n              src={this.state.selectedPlaylistInfo.images[0].url}\n              alt=\"\"></img>\n\n            <p className=\"songOptionsTitle\">\n              {this.state.selectedPlaylistInfo.name}\n            </p>\n            <p className=\"songOptionsArtist\">\n              {this.state.selectedPlaylistInfo.tracks.total + \" songs\"}\n            </p>\n            <div id=\"firstSeparatorLine\"></div>\n            <button\n              id=\"addToQueueBtn\"\n              onClick={() =>\n                this.addPlaylistToQueue(\n                  this.state.selectedPlatform,\n                  this.state.selectedPlaylistInfo\n                )\n              }></button>\n            <div id=\"secondSeparatorLine\"></div>\n            <button\n              id=\"viewOnSpotifyBtn\"\n              onClick={() =>\n                viewOnSpotify(this.state.selectedPlaylistInfo)\n              }></button>\n          </div>\n        ) : (\n          // If nothing selected, show nothing on right side\n          <div className=\"libraryRight\"></div>\n        )}\n      </div>\n    );\n  }\n}\n\nLibraryMobile.contextType = SessionContext;\n\nexport default LibraryMobile;\n"]},"metadata":{},"sourceType":"module"}