{"ast":null,"code":"var _jsxFileName = \"/Users/dbanta/Desktop/Aux React/aux-pwa/src/components/session/sessionController.jsx\";\nimport React, { Component } from \"react\";\nimport \"../../styles/SessionController.css\";\nimport { play, pause, skipSongSpotify } from \"../../utils/spotifyInterface\";\nimport { popQueue } from \"../../utils/queueInterface\";\n\nclass SessionController extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isPlaying: false,\n      currentTrack: {\n        songTitle: \"Ghost Voices (Hex Cougar Flip)\",\n        artist: \"Hex Cougar\",\n        albumImgURL: require(\"../../resources/images/GhostVoicesHex.png\")\n      }\n    };\n\n    this.playButtonPress = () => {\n      if (this.state.isPlaying) {\n        this.setState({\n          isPlaying: false\n        });\n        console.log(this.state.isPlaying);\n        pause(global.spotifyAccessToken);\n      } else {\n        this.setState({\n          isPlaying: true\n        });\n        console.log(this.state.isPlaying);\n        play(global.spotifyAccessToken);\n      }\n    };\n\n    this.skipPressed = () => {\n      if (global.sessionQueue.length === 0) {\n        return;\n      } // Pop Queue\n\n\n      var upNext = popQueue(); // Read next song and determine platform\n\n      if (upNext[0] == \"Spotify\") {\n        var songURI = upNext[1][\"uri\"];\n        console.log(\"songURI\", songURI);\n        queueSpotifySong(songURI, global.spotifyAccessToken);\n        skipSongSpotify(global.spotifyAccessToken);\n        global.isContentPlaying = true; // Set song as currently playing\n\n        global.currentlyPlaying = upNext;\n      }\n    };\n  }\n\n  // Spotify Web Api funcs\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"controllerDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"currentTrackPic\",\n      src: this.state.currentTrack.albumImgURL,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"controllerButtons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"restartButton\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"playButton\",\n      style: {\n        background: this.state.isPlaying ? \"url(\" + require(\"../../resources/images/PauseButton.png\") + \")\" : \"url(\" + require(\"../../resources/images/PlayButton.png\") + \")\",\n        left: this.state.isPlaying ? \"-5px\" : \"\"\n      },\n      onClick: this.playButtonPress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"skipButton\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"songText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      id: \"songTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    }, this.state.currentTrack.songTitle), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"songArtist\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }\n    }, this.state.currentTrack.artist)));\n  }\n\n}\n\nexport default SessionController;","map":{"version":3,"sources":["/Users/dbanta/Desktop/Aux React/aux-pwa/src/components/session/sessionController.jsx"],"names":["React","Component","play","pause","skipSongSpotify","popQueue","SessionController","state","isPlaying","currentTrack","songTitle","artist","albumImgURL","require","playButtonPress","setState","console","log","global","spotifyAccessToken","skipPressed","sessionQueue","length","upNext","songURI","queueSpotifySong","isContentPlaying","currentlyPlaying","render","background","left"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"../../styles/SessionController.css\";\n\nimport { play, pause, skipSongSpotify } from \"../../utils/spotifyInterface\";\n\nimport { popQueue } from \"../../utils/queueInterface\";\n\nclass SessionController extends Component {\n  state = {\n    isPlaying: false,\n    currentTrack: {\n      songTitle: \"Ghost Voices (Hex Cougar Flip)\",\n      artist: \"Hex Cougar\",\n      albumImgURL: require(\"../../resources/images/GhostVoicesHex.png\"),\n    },\n  };\n\n  playButtonPress = () => {\n    if (this.state.isPlaying) {\n      this.setState({ isPlaying: false });\n      console.log(this.state.isPlaying);\n      pause(global.spotifyAccessToken);\n    } else {\n      this.setState({ isPlaying: true });\n      console.log(this.state.isPlaying);\n      play(global.spotifyAccessToken);\n    }\n  };\n\n  skipPressed = () => {\n    if (global.sessionQueue.length === 0) {\n      return;\n    }\n\n    // Pop Queue\n    var upNext = popQueue();\n\n    // Read next song and determine platform\n    if (upNext[0] == \"Spotify\") {\n      var songURI = upNext[1][\"uri\"];\n      console.log(\"songURI\", songURI);\n\n      queueSpotifySong(songURI, global.spotifyAccessToken);\n      skipSongSpotify(global.spotifyAccessToken);\n\n      global.isContentPlaying = true;\n\n      // Set song as currently playing\n      global.currentlyPlaying = upNext;\n    }\n  };\n\n  // Spotify Web Api funcs\n\n  render() {\n    return (\n      <div className=\"controllerDiv\">\n        <img\n          className=\"currentTrackPic\"\n          src={this.state.currentTrack.albumImgURL}\n          alt=\"\"></img>\n        <div className=\"controllerButtons\">\n          <button className=\"restartButton\"></button>\n          <button\n            className=\"playButton\"\n            style={{\n              background: this.state.isPlaying\n                ? \"url(\" +\n                  require(\"../../resources/images/PauseButton.png\") +\n                  \")\"\n                : \"url(\" +\n                  require(\"../../resources/images/PlayButton.png\") +\n                  \")\",\n              left: this.state.isPlaying ? \"-5px\" : \"\",\n            }}\n            onClick={this.playButtonPress}></button>\n          <button className=\"skipButton\"></button>\n        </div>\n        <div className=\"songText\">\n          <p id=\"songTitle\">{this.state.currentTrack.songTitle}</p>\n          <p id=\"songArtist\">{this.state.currentTrack.artist}</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SessionController;\n"]},"metadata":{},"sourceType":"module"}