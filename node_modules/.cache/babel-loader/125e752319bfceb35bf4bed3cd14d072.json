{"ast":null,"code":"import { viewOnSpotify, queueSpotifySong, skipSongSpotify, playURI } from \"./spotifyInterface\";\nexport function addSongToQueue(platform, songInfo) {\n  console.log(\"AddSongToQueue\");\n  console.log(platform);\n  console.log(songInfo);\n  var currentSong = [platform, songInfo]; // If no songs currently in queue, add song to queue and skip to song\n\n  if (!global.isContentPlaying) {\n    if (currentSong != \"None\") {\n      // Check the platform of the song\n      if (currentSong[0] == \"Spotify\") {\n        var songURI = currentSong[1][\"uri\"];\n        playURI(songURI, global.spotifyAccessToken);\n        global.isContentPlaying = true; // Set song as currently playing\n\n        global.currentlyPlaying = upNext;\n      }\n    } // Set song as currently playing\n\n\n    global.currentlyPlaying = [platform, songInfo];\n  } else {\n    // Push song to queue\n    global.sessionQueue.push([platform, songInfo]);\n    console.log(\"Added Song to Queue\");\n  }\n}\nexport function addPlaylistToQueue(platform, playlistInfo) {\n  console.log(platform);\n  console.log(playlistInfo);\n} // Removes first item from queue and returns it\n\nexport function popQueue() {\n  var upNext = global.sessionQueue.shift();\n  return upNext;\n}","map":{"version":3,"sources":["/Users/dbanta/Desktop/Aux React/aux-pwa/src/utils/queueInterface.js"],"names":["viewOnSpotify","queueSpotifySong","skipSongSpotify","playURI","addSongToQueue","platform","songInfo","console","log","currentSong","global","isContentPlaying","songURI","spotifyAccessToken","currentlyPlaying","upNext","sessionQueue","push","addPlaylistToQueue","playlistInfo","popQueue","shift"],"mappings":"AAAA,SACEA,aADF,EAEEC,gBAFF,EAGEC,eAHF,EAIEC,OAJF,QAKO,oBALP;AAOA,OAAO,SAASC,cAAT,CAAwBC,QAAxB,EAAkCC,QAAlC,EAA4C;AACjDC,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AAEA,MAAIG,WAAW,GAAG,CAACJ,QAAD,EAAWC,QAAX,CAAlB,CALiD,CAOjD;;AACA,MAAI,CAACI,MAAM,CAACC,gBAAZ,EAA8B;AAC5B,QAAIF,WAAW,IAAI,MAAnB,EAA2B;AACzB;AACA,UAAIA,WAAW,CAAC,CAAD,CAAX,IAAkB,SAAtB,EAAiC;AAC/B,YAAIG,OAAO,GAAGH,WAAW,CAAC,CAAD,CAAX,CAAe,KAAf,CAAd;AAEAN,QAAAA,OAAO,CAACS,OAAD,EAAUF,MAAM,CAACG,kBAAjB,CAAP;AAEAH,QAAAA,MAAM,CAACC,gBAAP,GAA0B,IAA1B,CAL+B,CAO/B;;AACAD,QAAAA,MAAM,CAACI,gBAAP,GAA0BC,MAA1B;AACD;AACF,KAb2B,CAc5B;;;AACAL,IAAAA,MAAM,CAACI,gBAAP,GAA0B,CAACT,QAAD,EAAWC,QAAX,CAA1B;AACD,GAhBD,MAgBO;AACL;AACAI,IAAAA,MAAM,CAACM,YAAP,CAAoBC,IAApB,CAAyB,CAACZ,QAAD,EAAWC,QAAX,CAAzB;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACD;AACF;AAED,OAAO,SAASU,kBAAT,CAA4Bb,QAA5B,EAAsCc,YAAtC,EAAoD;AACzDZ,EAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYW,YAAZ;AACD,C,CAED;;AACA,OAAO,SAASC,QAAT,GAAoB;AACzB,MAAIL,MAAM,GAAGL,MAAM,CAACM,YAAP,CAAoBK,KAApB,EAAb;AAEA,SAAON,MAAP;AACD","sourcesContent":["import {\n  viewOnSpotify,\n  queueSpotifySong,\n  skipSongSpotify,\n  playURI,\n} from \"./spotifyInterface\";\n\nexport function addSongToQueue(platform, songInfo) {\n  console.log(\"AddSongToQueue\");\n  console.log(platform);\n  console.log(songInfo);\n\n  var currentSong = [platform, songInfo];\n\n  // If no songs currently in queue, add song to queue and skip to song\n  if (!global.isContentPlaying) {\n    if (currentSong != \"None\") {\n      // Check the platform of the song\n      if (currentSong[0] == \"Spotify\") {\n        var songURI = currentSong[1][\"uri\"];\n\n        playURI(songURI, global.spotifyAccessToken);\n\n        global.isContentPlaying = true;\n\n        // Set song as currently playing\n        global.currentlyPlaying = upNext;\n      }\n    }\n    // Set song as currently playing\n    global.currentlyPlaying = [platform, songInfo];\n  } else {\n    // Push song to queue\n    global.sessionQueue.push([platform, songInfo]);\n\n    console.log(\"Added Song to Queue\");\n  }\n}\n\nexport function addPlaylistToQueue(platform, playlistInfo) {\n  console.log(platform);\n  console.log(playlistInfo);\n}\n\n// Removes first item from queue and returns it\nexport function popQueue() {\n  var upNext = global.sessionQueue.shift();\n\n  return upNext;\n}\n"]},"metadata":{},"sourceType":"module"}