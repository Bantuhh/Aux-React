{"ast":null,"code":"var _jsxFileName = \"/Users/dbanta/Desktop/Aux React/aux-pwa/src/components/session/sessionController.jsx\";\nimport React, { Component } from \"react\";\nimport ReactDOM from 'react-dom';\nimport \"./SessionController.css\";\nimport { SessionContext } from \"../../session-context\";\nimport { play, pause, playURI, seek } from \"../../utils/spotifyInterface\";\nimport { formatYTTitle } from \"../../utils/youtubeInterface\";\nimport { popQueue } from \"../../utils/queueInterface\";\nimport spotifyIcon from \"../../resources/images/Spotify.png\";\nimport youtubeIcon from \"../../resources/images/Youtube.png\";\nimport SeekBar from \"./seekbar\";\n\nclass SessionController extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isPlaying: global.isContentPlaying,\n      isEditingQueue: false,\n      editQueueText: \"Edit Queue\"\n    };\n\n    this.playButtonPress = () => {\n      if (global.isContentPlaying) {\n        global.isContentPlaying = false;\n        this.setState({\n          isPlaying: false\n        }); // Check Platform\n\n        if (global.currentlyPlaying[0] === \"Youtube\") {\n          global.youtubePlayer.pauseVideo();\n        } else if (global.currentlyPlaying[0] === \"Spotify\") {\n          pause(global.spotifyAccessToken);\n        }\n      } else {\n        global.isContentPlaying = true;\n        this.setState({\n          isPlaying: true\n        }); // Check Platform\n\n        if (global.currentlyPlaying[0] === \"Youtube\") {\n          global.youtubePlayer.playVideo();\n        } else if (global.currentlyPlaying[0] === \"Spotify\") {\n          play(global.spotifyAccessToken);\n        }\n      }\n    };\n\n    this.skipPressed = () => {\n      if (global.sessionQueue.length === 0) {\n        console.log(\"queue empty\");\n        return;\n      } // Pop Queue\n\n\n      var upNext = popQueue(); // Read next song and determine platform\n\n      if (upNext[0] === \"Spotify\") {\n        var songURI = upNext[1][\"uri\"]; // Pause Youtube if it was playing\n\n        global.youtubePlayer.pauseVideo();\n        playURI(songURI, global.spotifyAccessToken);\n      } else if (upNext[0] === \"Youtube\") {\n        // Pause Spotify if it was playing\n        pause(global.spotifyAccessToken);\n        global.youtubePlayer.loadVideoById(upNext[1].id, 0);\n      }\n\n      global.isContentPlaying = true;\n      global.currentlyPlaying = upNext; // Reset Song Progress Bar\n\n      global.currentContentPosition = 0; // Updates State of Session\n\n      this.context.updateSessionQueue(global.sessionQueue);\n    };\n\n    this.restartPressed = () => {\n      var songInfo = global.currentlyPlaying[1];\n\n      if (global.currentlyPlaying[0] === \"Youtube\") {\n        global.youtubePlayer.loadVideoById(songInfo.id.videoId, 0);\n      } else if (global.currentlyPlaying[1] === \"Spotify\") {\n        const songURI = songInfo[\"uri\"];\n        playURI(songURI, global.spotifyAccessToken);\n      }\n\n      global.currentContentPosition = 0;\n    };\n\n    this.formatArtistString = artistObj => {\n      var artistString = \"\";\n      var numArtists = 0;\n\n      for (var key in Object.keys(artistObj)) {\n        var artist = artistObj[key];\n\n        if (numArtists > 0) {\n          artistString = artistString + \", \" + artist.name;\n        } else {\n          artistString = artist.name;\n        }\n\n        numArtists += 1;\n      }\n\n      return artistString;\n    };\n\n    this.getCurrentTrackLength = () => {\n      var currTrack = global.currentlyPlaying;\n      var trackLength = 0;\n\n      if (currTrack === \"\") {\n        trackLength = 0;\n      } else if (currTrack[0] === \"Spotify\") {\n        trackLength = Math.round(currTrack[1].duration_ms / 1000);\n      } else if (currTrack[0] === \"Youtube\") {\n        var duration = currTrack[1].contentDetails.duration; // Parse out hours minutes and seconds from duration string \"PT4M15S\" \"4 Mins, 15 Secs\"\n\n        var hourStr = duration.split(\"H\")[0];\n        var minStr = \"\";\n        var minutes = 0;\n        var secStr = \"\";\n        var seconds = 0;\n\n        if (hourStr === duration) {\n          // Duration does not have Hour\n          minStr = duration.split(\"M\")[0];\n          minStr = minStr.split(\"T\")[1];\n          minutes = parseInt(minStr);\n          secStr = duration.split(\"M\")[1];\n          secStr = secStr.split(\"S\")[0];\n          seconds = parseInt(secStr);\n          trackLength = minutes * 60 + seconds;\n        } else {\n          // Duration does have Hour\n          hourStr = hourStr.split(\"T\")[1];\n          var hours = parseInt(hourStr);\n          minStr = duration.split(\"M\")[0];\n          minStr = minStr.split(\"H\")[1];\n          minutes = parseInt(minStr);\n          secStr = duration.split(\"M\")[1];\n          secStr = secStr.split(\"S\")[0];\n          seconds = parseInt(secStr);\n          trackLength = hours * 60 * 60 + minutes * 60 + seconds;\n        }\n      }\n\n      return trackLength;\n    };\n\n    this.seek = time => {\n      if (global.currentlyPlaying !== \"\") {\n        if (global.currentlyPlaying[0] === \"Youtube\") {\n          global.currentContentPosition = time;\n          global.youtubePlayer.seekTo(time, true);\n          global.youtubePlayer.playVideo();\n        } else if (global.currentlyPlaying[0] === \"Spotify\") {\n          global.currentContentPosition = time; // TODO: FINISH SEEK LOGIC HERE\n\n          seek(time * 1000, global.spotifyAccessToken);\n          play(global.spotifyAccessToken);\n        }\n\n        global.isContentPlaying = true;\n        this.context.updateSessionQueue(global.sessionQueue);\n      } else {\n        console.log(\"Nothing is currently playing.\");\n      }\n    };\n\n    this.onSlidingStart = () => {\n      console.log(\"Sliding Start\"); // Pause content while seeking\n\n      global.isContentPlaying = false;\n\n      if (global.currentlyPlaying !== \"\") {\n        if (global.currentlyPlaying[0] === \"Youtube\") {\n          global.youtubePlayer.pauseVideo();\n        } else if (global.currentlyPlaying[0] === \"Spotify\") {\n          pause(global.spotifyAccessToken);\n        }\n      } // Updates State of Session\n\n\n      this.context.updateSessionQueue(global.sessionQueue);\n    };\n\n    this.queueButtonClicked = () => {\n      let element = document.getElementById('editQueueButton');\n\n      if (!this.state.isEditingQueue) {\n        ReactDOM.findDOMNode(element).style.color = \"red\"; // ReactDOM.findDOMNode(element).style.text = \"Done Editing\";\n      } else {\n        ReactDOM.findDOMNode(element).style.color = \"white\"; // ReactDOM.findDOMNode(element).style.text = \"Edit Queue\";\n      }\n\n      this.setState({\n        editQueueText: !this.state.isEditingQueue ? \"Done Editing\" : \"Edit Queue\",\n        isEditingQueue: !this.state.isEditingQueue\n      });\n      this.props.editQueue();\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(SessionContext.Consumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 7\n      }\n    }, ({\n      isContentPlaying\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      id: this.props.deviceType === \"Web\" ? \"controllerDiv\" : \"controllerDivMobile\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: \"currentTrackPic\",\n      src: global.currentlyPlaying === \"\" ? \"\" : global.currentlyPlaying[0] === \"Youtube\" ? global.currentlyPlaying[1].snippet.thumbnails.high.url : global.currentlyPlaying[1].album.images[0].url,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"controllerButtons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"buttonBox\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: require(\"../../resources/images/RestartButton.png\"),\n      id: \"restartButton\",\n      onClick: this.restartPressed,\n      alt: \"Restart Button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"buttonBox\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      id: \"playButton\",\n      src: global.isContentPlaying ? require(\"../../resources/images/PauseButton.png\") : require(\"../../resources/images/PlayButton.png\"),\n      style: {\n        left: global.isContentPlaying ? \"-5px\" : \"\",\n        width: global.isContentPlaying ? \"50%\" : \"44%\"\n      },\n      onClick: this.playButtonPress,\n      alt: \"Play Button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"buttonBox\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: require(\"../../resources/images/SkipButton.png\"),\n      id: \"skipButton\",\n      onClick: this.skipPressed,\n      alt: \"Skip Button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 17\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"songText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"TitleandPlatform\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      id: \"songTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 17\n      }\n    }, global.currentlyPlaying === \"\" ? \"Nothings playing!\" : global.currentlyPlaying[0] === \"Youtube\" ? formatYTTitle(global.currentlyPlaying[1].snippet.title) : global.currentlyPlaying[1].name), global.currentlyPlaying[0] === \"Youtube\" ? /*#__PURE__*/React.createElement(\"img\", {\n      src: youtubeIcon,\n      alt: \"\",\n      className: \"youtubeIconCP\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 19\n      }\n    }) : global.currentlyPlaying[0] === \"Spotify\" ? /*#__PURE__*/React.createElement(\"img\", {\n      src: spotifyIcon,\n      alt: \"\",\n      className: \"spotifyIconCP\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 19\n      }\n    }) : \"\"), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"songArtist\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 15\n      }\n    }, global.currentlyPlaying === \"\" ? \"Search a song or choose from your Library\" : global.currentlyPlaying[0] === \"Youtube\" ? global.currentlyPlaying[1].snippet.channelTitle : this.formatArtistString(global.currentlyPlaying[1].artists))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"seekbarDiv\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(SeekBar, {\n      onSeek: this.seek.bind(this),\n      trackLength: this.getCurrentTrackLength(),\n      onSlidingStart: () => this.onSlidingStart(),\n      currentPosition: Math.trunc(global.currentContentPosition),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"upNextText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 13\n      }\n    }, \"Up Next:\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"editQueueButton\",\n      id: \"editQueueButton\",\n      onClick: this.queueButtonClicked,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 13\n      }\n    }, this.state.editQueueText)));\n  }\n\n}\n\nSessionController.contextType = SessionContext;\nexport default SessionController;","map":{"version":3,"sources":["/Users/dbanta/Desktop/Aux React/aux-pwa/src/components/session/sessionController.jsx"],"names":["React","Component","ReactDOM","SessionContext","play","pause","playURI","seek","formatYTTitle","popQueue","spotifyIcon","youtubeIcon","SeekBar","SessionController","state","isPlaying","global","isContentPlaying","isEditingQueue","editQueueText","playButtonPress","setState","currentlyPlaying","youtubePlayer","pauseVideo","spotifyAccessToken","playVideo","skipPressed","sessionQueue","length","console","log","upNext","songURI","loadVideoById","id","currentContentPosition","context","updateSessionQueue","restartPressed","songInfo","videoId","formatArtistString","artistObj","artistString","numArtists","key","Object","keys","artist","name","getCurrentTrackLength","currTrack","trackLength","Math","round","duration_ms","duration","contentDetails","hourStr","split","minStr","minutes","secStr","seconds","parseInt","hours","time","seekTo","onSlidingStart","queueButtonClicked","element","document","getElementById","findDOMNode","style","color","props","editQueue","render","deviceType","snippet","thumbnails","high","url","album","images","require","left","width","title","channelTitle","artists","bind","trunc","contextType"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AAEA,OAAO,yBAAP;AAEA,SAASC,cAAT,QAA+B,uBAA/B;AAEA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,OAAtB,EAA+BC,IAA/B,QAA2C,8BAA3C;AACA,SAASC,aAAT,QAA8B,8BAA9B;AAEA,SAASC,QAAT,QAAyB,4BAAzB;AAEA,OAAOC,WAAP,MAAwB,oCAAxB;AACA,OAAOC,WAAP,MAAwB,oCAAxB;AAEA,OAAOC,OAAP,MAAoB,WAApB;;AAGA,MAAMC,iBAAN,SAAgCZ,SAAhC,CAA0C;AAAA;AAAA;AAAA,SACxCa,KADwC,GAChC;AACNC,MAAAA,SAAS,EAAEC,MAAM,CAACC,gBADZ;AAENC,MAAAA,cAAc,EAAE,KAFV;AAGNC,MAAAA,aAAa,EAAE;AAHT,KADgC;;AAAA,SASxCC,eATwC,GAStB,MAAM;AACtB,UAAIJ,MAAM,CAACC,gBAAX,EAA6B;AAC3BD,QAAAA,MAAM,CAACC,gBAAP,GAA0B,KAA1B;AACA,aAAKI,QAAL,CAAc;AAAEN,UAAAA,SAAS,EAAE;AAAb,SAAd,EAF2B,CAG3B;;AACA,YAAIC,MAAM,CAACM,gBAAP,CAAwB,CAAxB,MAA+B,SAAnC,EAA8C;AAC5CN,UAAAA,MAAM,CAACO,aAAP,CAAqBC,UAArB;AACD,SAFD,MAEO,IAAIR,MAAM,CAACM,gBAAP,CAAwB,CAAxB,MAA+B,SAAnC,EAA8C;AACnDjB,UAAAA,KAAK,CAACW,MAAM,CAACS,kBAAR,CAAL;AACD;AACF,OATD,MASO;AACLT,QAAAA,MAAM,CAACC,gBAAP,GAA0B,IAA1B;AACA,aAAKI,QAAL,CAAc;AAAEN,UAAAA,SAAS,EAAE;AAAb,SAAd,EAFK,CAGL;;AACA,YAAIC,MAAM,CAACM,gBAAP,CAAwB,CAAxB,MAA+B,SAAnC,EAA8C;AAC5CN,UAAAA,MAAM,CAACO,aAAP,CAAqBG,SAArB;AACD,SAFD,MAEO,IAAIV,MAAM,CAACM,gBAAP,CAAwB,CAAxB,MAA+B,SAAnC,EAA8C;AACnDlB,UAAAA,IAAI,CAACY,MAAM,CAACS,kBAAR,CAAJ;AAED;AACF;AACF,KA9BuC;;AAAA,SAgCxCE,WAhCwC,GAgC1B,MAAM;AAClB,UAAIX,MAAM,CAACY,YAAP,CAAoBC,MAApB,KAA+B,CAAnC,EAAsC;AACpCC,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA;AACD,OAJiB,CAMlB;;;AACA,UAAIC,MAAM,GAAGvB,QAAQ,EAArB,CAPkB,CASlB;;AACA,UAAIuB,MAAM,CAAC,CAAD,CAAN,KAAc,SAAlB,EAA6B;AAC3B,YAAIC,OAAO,GAAGD,MAAM,CAAC,CAAD,CAAN,CAAU,KAAV,CAAd,CAD2B,CAE3B;;AACAhB,QAAAA,MAAM,CAACO,aAAP,CAAqBC,UAArB;AACAlB,QAAAA,OAAO,CAAC2B,OAAD,EAAUjB,MAAM,CAACS,kBAAjB,CAAP;AACD,OALD,MAKO,IAAIO,MAAM,CAAC,CAAD,CAAN,KAAc,SAAlB,EAA6B;AAClC;AACA3B,QAAAA,KAAK,CAACW,MAAM,CAACS,kBAAR,CAAL;AACAT,QAAAA,MAAM,CAACO,aAAP,CAAqBW,aAArB,CAAmCF,MAAM,CAAC,CAAD,CAAN,CAAUG,EAA7C,EAAiD,CAAjD;AACD;;AAEDnB,MAAAA,MAAM,CAACC,gBAAP,GAA0B,IAA1B;AACAD,MAAAA,MAAM,CAACM,gBAAP,GAA0BU,MAA1B,CAtBkB,CAwBlB;;AACAhB,MAAAA,MAAM,CAACoB,sBAAP,GAAgC,CAAhC,CAzBkB,CA2BlB;;AACA,WAAKC,OAAL,CAAaC,kBAAb,CAAgCtB,MAAM,CAACY,YAAvC;AAGD,KA/DuC;;AAAA,SAiExCW,cAjEwC,GAiEvB,MAAM;AACrB,UAAIC,QAAQ,GAAGxB,MAAM,CAACM,gBAAP,CAAwB,CAAxB,CAAf;;AAEA,UAAIN,MAAM,CAACM,gBAAP,CAAwB,CAAxB,MAA+B,SAAnC,EAA8C;AAC5CN,QAAAA,MAAM,CAACO,aAAP,CAAqBW,aAArB,CAAmCM,QAAQ,CAACL,EAAT,CAAYM,OAA/C,EAAwD,CAAxD;AAED,OAHD,MAGO,IAAIzB,MAAM,CAACM,gBAAP,CAAwB,CAAxB,MAA+B,SAAnC,EAA8C;AACnD,cAAMW,OAAO,GAAGO,QAAQ,CAAC,KAAD,CAAxB;AACAlC,QAAAA,OAAO,CAAC2B,OAAD,EAAUjB,MAAM,CAACS,kBAAjB,CAAP;AAED;;AACDT,MAAAA,MAAM,CAACoB,sBAAP,GAAgC,CAAhC;AAGD,KA/EuC;;AAAA,SAiFxCM,kBAjFwC,GAiFlBC,SAAD,IAAe;AAClC,UAAIC,YAAY,GAAG,EAAnB;AACA,UAAIC,UAAU,GAAG,CAAjB;;AAEA,WAAK,IAAIC,GAAT,IAAgBC,MAAM,CAACC,IAAP,CAAYL,SAAZ,CAAhB,EAAwC;AACtC,YAAIM,MAAM,GAAGN,SAAS,CAACG,GAAD,CAAtB;;AAEA,YAAID,UAAU,GAAG,CAAjB,EAAoB;AAClBD,UAAAA,YAAY,GAAGA,YAAY,GAAG,IAAf,GAAsBK,MAAM,CAACC,IAA5C;AACD,SAFD,MAEO;AACLN,UAAAA,YAAY,GAAGK,MAAM,CAACC,IAAtB;AACD;;AACDL,QAAAA,UAAU,IAAI,CAAd;AACD;;AAED,aAAOD,YAAP;AACD,KAjGuC;;AAAA,SAoGxCO,qBApGwC,GAoGhB,MAAM;AAC5B,UAAIC,SAAS,GAAGpC,MAAM,CAACM,gBAAvB;AACA,UAAI+B,WAAW,GAAG,CAAlB;;AAEA,UAAID,SAAS,KAAK,EAAlB,EAAsB;AACpBC,QAAAA,WAAW,GAAG,CAAd;AACD,OAFD,MAEO,IAAID,SAAS,CAAC,CAAD,CAAT,KAAiB,SAArB,EAAgC;AACrCC,QAAAA,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWH,SAAS,CAAC,CAAD,CAAT,CAAaI,WAAb,GAA2B,IAAtC,CAAd;AACD,OAFM,MAEA,IAAIJ,SAAS,CAAC,CAAD,CAAT,KAAiB,SAArB,EAAgC;AACrC,YAAIK,QAAQ,GAAGL,SAAS,CAAC,CAAD,CAAT,CAAaM,cAAb,CAA4BD,QAA3C,CADqC,CAGrC;;AACA,YAAIE,OAAO,GAAGF,QAAQ,CAACG,KAAT,CAAe,GAAf,EAAoB,CAApB,CAAd;AAEA,YAAIC,MAAM,GAAG,EAAb;AACA,YAAIC,OAAO,GAAG,CAAd;AAEA,YAAIC,MAAM,GAAG,EAAb;AACA,YAAIC,OAAO,GAAG,CAAd;;AAEA,YAAIL,OAAO,KAAKF,QAAhB,EAA0B;AAAE;AAC1BI,UAAAA,MAAM,GAAGJ,QAAQ,CAACG,KAAT,CAAe,GAAf,EAAoB,CAApB,CAAT;AACAC,UAAAA,MAAM,GAAGA,MAAM,CAACD,KAAP,CAAa,GAAb,EAAkB,CAAlB,CAAT;AACAE,UAAAA,OAAO,GAAGG,QAAQ,CAACJ,MAAD,CAAlB;AAEAE,UAAAA,MAAM,GAAGN,QAAQ,CAACG,KAAT,CAAe,GAAf,EAAoB,CAApB,CAAT;AACAG,UAAAA,MAAM,GAAGA,MAAM,CAACH,KAAP,CAAa,GAAb,EAAkB,CAAlB,CAAT;AACAI,UAAAA,OAAO,GAAGC,QAAQ,CAACF,MAAD,CAAlB;AAEAV,UAAAA,WAAW,GAAIS,OAAO,GAAG,EAAX,GAAiBE,OAA/B;AAED,SAXD,MAWO;AAAE;AACPL,UAAAA,OAAO,GAAGA,OAAO,CAACC,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAAV;AACA,cAAIM,KAAK,GAAGD,QAAQ,CAACN,OAAD,CAApB;AAEAE,UAAAA,MAAM,GAAGJ,QAAQ,CAACG,KAAT,CAAe,GAAf,EAAoB,CAApB,CAAT;AACAC,UAAAA,MAAM,GAAGA,MAAM,CAACD,KAAP,CAAa,GAAb,EAAkB,CAAlB,CAAT;AACAE,UAAAA,OAAO,GAAGG,QAAQ,CAACJ,MAAD,CAAlB;AAEAE,UAAAA,MAAM,GAAGN,QAAQ,CAACG,KAAT,CAAe,GAAf,EAAoB,CAApB,CAAT;AACAG,UAAAA,MAAM,GAAGA,MAAM,CAACH,KAAP,CAAa,GAAb,EAAkB,CAAlB,CAAT;AACAI,UAAAA,OAAO,GAAGC,QAAQ,CAACF,MAAD,CAAlB;AAEAV,UAAAA,WAAW,GAAIa,KAAK,GAAG,EAAR,GAAa,EAAd,GAAqBJ,OAAO,GAAG,EAA/B,GAAqCE,OAAnD;AACD;AACF;;AAED,aAAOX,WAAP;AACD,KApJuC;;AAAA,SAsJxC9C,IAtJwC,GAsJhC4D,IAAD,IAAU;AACf,UAAInD,MAAM,CAACM,gBAAP,KAA4B,EAAhC,EAAoC;AAElC,YAAIN,MAAM,CAACM,gBAAP,CAAwB,CAAxB,MAA+B,SAAnC,EAA8C;AAC5CN,UAAAA,MAAM,CAACoB,sBAAP,GAAgC+B,IAAhC;AACAnD,UAAAA,MAAM,CAACO,aAAP,CAAqB6C,MAArB,CAA4BD,IAA5B,EAAkC,IAAlC;AACAnD,UAAAA,MAAM,CAACO,aAAP,CAAqBG,SAArB;AACD,SAJD,MAIO,IAAIV,MAAM,CAACM,gBAAP,CAAwB,CAAxB,MAA+B,SAAnC,EAA8C;AACnDN,UAAAA,MAAM,CAACoB,sBAAP,GAAgC+B,IAAhC,CADmD,CAEnD;;AAEA5D,UAAAA,IAAI,CAAC4D,IAAI,GAAC,IAAN,EAAYnD,MAAM,CAACS,kBAAnB,CAAJ;AACArB,UAAAA,IAAI,CAACY,MAAM,CAACS,kBAAR,CAAJ;AACD;;AACDT,QAAAA,MAAM,CAACC,gBAAP,GAA0B,IAA1B;AAEA,aAAKoB,OAAL,CAAaC,kBAAb,CAAgCtB,MAAM,CAACY,YAAvC;AACD,OAhBD,MAgBO;AACLE,QAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACD;AAGF,KA5KuC;;AAAA,SA8KxCsC,cA9KwC,GA8KvB,MAAM;AACrBvC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EADqB,CAErB;;AACAf,MAAAA,MAAM,CAACC,gBAAP,GAA0B,KAA1B;;AACA,UAAID,MAAM,CAACM,gBAAP,KAA4B,EAAhC,EAAoC;AAElC,YAAIN,MAAM,CAACM,gBAAP,CAAwB,CAAxB,MAA+B,SAAnC,EAA8C;AAC5CN,UAAAA,MAAM,CAACO,aAAP,CAAqBC,UAArB;AAED,SAHD,MAGO,IAAIR,MAAM,CAACM,gBAAP,CAAwB,CAAxB,MAA+B,SAAnC,EAA8C;AACnDjB,UAAAA,KAAK,CAACW,MAAM,CAACS,kBAAR,CAAL;AACD;AAEF,OAboB,CAcrB;;;AACA,WAAKY,OAAL,CAAaC,kBAAb,CAAgCtB,MAAM,CAACY,YAAvC;AACD,KA9LuC;;AAAA,SAgMxC0C,kBAhMwC,GAgMnB,MAAM;AACzB,UAAIC,OAAO,GAAGC,QAAQ,CAACC,cAAT,CAAwB,iBAAxB,CAAd;;AAEA,UAAI,CAAC,KAAK3D,KAAL,CAAWI,cAAhB,EAAgC;AAE9BhB,QAAAA,QAAQ,CAACwE,WAAT,CAAqBH,OAArB,EAA8BI,KAA9B,CAAoCC,KAApC,GAA4C,KAA5C,CAF8B,CAG9B;AACD,OAJD,MAIO;AACL1E,QAAAA,QAAQ,CAACwE,WAAT,CAAqBH,OAArB,EAA8BI,KAA9B,CAAoCC,KAApC,GAA4C,OAA5C,CADK,CAEL;AACD;;AAED,WAAKvD,QAAL,CAAc;AACZF,QAAAA,aAAa,EAAE,CAAC,KAAKL,KAAL,CAAWI,cAAZ,GAA6B,cAA7B,GAA8C,YADjD;AAEZA,QAAAA,cAAc,EAAE,CAAC,KAAKJ,KAAL,CAAWI;AAFhB,OAAd;AAMA,WAAK2D,KAAL,CAAWC,SAAX;AAEH,KApNyC;AAAA;;AAsNxCC,EAAAA,MAAM,GAAG;AAEP,wBACE,oBAAC,cAAD,CAAgB,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,CAAC;AAAE9D,MAAAA;AAAF,KAAD,kBACC;AAAK,MAAA,EAAE,EAAE,KAAK4D,KAAL,CAAWG,UAAX,KAA0B,KAA1B,GAAkC,eAAlC,GAAoD,qBAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE;AACE,MAAA,SAAS,EAAC,iBADZ;AAEE,MAAA,GAAG,EACDhE,MAAM,CAACM,gBAAP,KAA4B,EAA5B,GACI,EADJ,GAEIN,MAAM,CAACM,gBAAP,CAAwB,CAAxB,MAA+B,SAA/B,GACAN,MAAM,CAACM,gBAAP,CAAwB,CAAxB,EAA2B2D,OAA3B,CAAmCC,UAAnC,CAA8CC,IAA9C,CAAmDC,GADnD,GAEApE,MAAM,CAACM,gBAAP,CAAwB,CAAxB,EAA2B+D,KAA3B,CAAiCC,MAAjC,CAAwC,CAAxC,EAA2CF,GAPnD;AASE,MAAA,GAAG,EAAC,EATN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAYE;AAAK,MAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,EAAE,EAAC,WAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AACA,MAAA,GAAG,EAAEG,OAAO,CAAC,0CAAD,CADZ;AAEA,MAAA,EAAE,EAAC,eAFH;AAGA,MAAA,OAAO,EAAE,KAAKhD,cAHd;AAIA,MAAA,GAAG,EAAC,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,eAQE;AAAK,MAAA,EAAE,EAAC,WAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AACE,MAAA,EAAE,EAAC,YADL;AAEE,MAAA,GAAG,EAAGvB,MAAM,CAACC,gBAAP,GAEAsE,OAAO,CAAC,wCAAD,CAFP,GAIAA,OAAO,CAAC,uCAAD,CANf;AAOE,MAAA,KAAK,EAAE;AAELC,QAAAA,IAAI,EAAExE,MAAM,CAACC,gBAAP,GAA0B,MAA1B,GAAmC,EAFpC;AAGLwE,QAAAA,KAAK,EAAEzE,MAAM,CAACC,gBAAP,GAA0B,KAA1B,GAAkC;AAHpC,OAPT;AAYE,MAAA,OAAO,EAAE,KAAKG,eAZhB;AAaE,MAAA,GAAG,EAAC,aAbN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CARF,eAwBI;AAAK,MAAA,EAAE,EAAC,WAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AACE,MAAA,GAAG,EAAEmE,OAAO,CAAC,uCAAD,CADd;AAEE,MAAA,EAAE,EAAC,YAFL;AAGE,MAAA,OAAO,EAAE,KAAK5D,WAHhB;AAIE,MAAA,GAAG,EAAC,aAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CAxBJ,CAZF,eA4CE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAG,MAAA,EAAE,EAAC,WAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGX,MAAM,CAACM,gBAAP,KAA4B,EAA5B,GACG,mBADH,GAEGN,MAAM,CAACM,gBAAP,CAAwB,CAAxB,MAA+B,SAA/B,GACAd,aAAa,CAACQ,MAAM,CAACM,gBAAP,CAAwB,CAAxB,EAA2B2D,OAA3B,CAAmCS,KAApC,CADb,GAEA1E,MAAM,CAACM,gBAAP,CAAwB,CAAxB,EAA2B4B,IALjC,CADF,EAQGlC,MAAM,CAACM,gBAAP,CAAwB,CAAxB,MAA+B,SAA/B,gBACC;AAAK,MAAA,GAAG,EAAEX,WAAV;AAAuB,MAAA,GAAG,EAAC,EAA3B;AAA8B,MAAA,SAAS,EAAC,eAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,GAEGK,MAAM,CAACM,gBAAP,CAAwB,CAAxB,MAA+B,SAA/B,gBACF;AAAK,MAAA,GAAG,EAAEZ,WAAV;AAAuB,MAAA,GAAG,EAAC,EAA3B;AAA8B,MAAA,SAAS,EAAC,eAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADE,GAGF,EAbJ,CADF,eAkBE;AAAG,MAAA,EAAE,EAAC,YAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGM,MAAM,CAACM,gBAAP,KAA4B,EAA5B,GACG,2CADH,GAEGN,MAAM,CAACM,gBAAP,CAAwB,CAAxB,MAA+B,SAA/B,GACAN,MAAM,CAACM,gBAAP,CAAwB,CAAxB,EAA2B2D,OAA3B,CAAmCU,YADnC,GAEA,KAAKjD,kBAAL,CAAwB1B,MAAM,CAACM,gBAAP,CAAwB,CAAxB,EAA2BsE,OAAnD,CALN,CAlBF,CA5CF,eAsEE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEE,oBAAC,OAAD;AACE,MAAA,MAAM,EAAE,KAAKrF,IAAL,CAAUsF,IAAV,CAAe,IAAf,CADV;AAEE,MAAA,WAAW,EAAE,KAAK1C,qBAAL,EAFf;AAGE,MAAA,cAAc,EAAE,MAAM,KAAKkB,cAAL,EAHxB;AAIE,MAAA,eAAe,EAAEf,IAAI,CAACwC,KAAL,CAAW9E,MAAM,CAACoB,sBAAlB,CAJnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAtEF,eA8EE;AAAG,MAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBA9EF,eA+EE;AAAQ,MAAA,SAAS,EAAC,iBAAlB;AAAoC,MAAA,EAAE,EAAC,iBAAvC;AAAyD,MAAA,OAAO,EAAE,KAAKkC,kBAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA4F,KAAKxD,KAAL,CAAWK,aAAvG,CA/EF,CAFJ,CADF;AAuFD;;AA/SuC;;AAiT1CN,iBAAiB,CAACkF,WAAlB,GAAgC5F,cAAhC;AAEA,eAAeU,iBAAf","sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from 'react-dom'\n\nimport \"./SessionController.css\";\n\nimport { SessionContext } from \"../../session-context\";\n\nimport { play, pause, playURI, seek } from \"../../utils/spotifyInterface\";\nimport { formatYTTitle } from \"../../utils/youtubeInterface\";\n\nimport { popQueue } from \"../../utils/queueInterface\";\n\nimport spotifyIcon from \"../../resources/images/Spotify.png\";\nimport youtubeIcon from \"../../resources/images/Youtube.png\";\n\nimport SeekBar from \"./seekbar\"\n\n\nclass SessionController extends Component {\n  state = {\n    isPlaying: global.isContentPlaying,\n    isEditingQueue: false,\n    editQueueText: \"Edit Queue\"\n  };\n\n  \n\n  playButtonPress = () => {\n    if (global.isContentPlaying) {\n      global.isContentPlaying = false;\n      this.setState({ isPlaying: false });\n      // Check Platform\n      if (global.currentlyPlaying[0] === \"Youtube\") {\n        global.youtubePlayer.pauseVideo();\n      } else if (global.currentlyPlaying[0] === \"Spotify\") {\n        pause(global.spotifyAccessToken);\n      }\n    } else {\n      global.isContentPlaying = true;\n      this.setState({ isPlaying: true });\n      // Check Platform\n      if (global.currentlyPlaying[0] === \"Youtube\") {\n        global.youtubePlayer.playVideo();\n      } else if (global.currentlyPlaying[0] === \"Spotify\") {\n        play(global.spotifyAccessToken);\n\n      }\n    }\n  };\n\n  skipPressed = () => {\n    if (global.sessionQueue.length === 0) {\n      console.log(\"queue empty\");\n      return;\n    }\n\n    // Pop Queue\n    var upNext = popQueue();\n\n    // Read next song and determine platform\n    if (upNext[0] === \"Spotify\") {\n      var songURI = upNext[1][\"uri\"];\n      // Pause Youtube if it was playing\n      global.youtubePlayer.pauseVideo();\n      playURI(songURI, global.spotifyAccessToken);\n    } else if (upNext[0] === \"Youtube\") {\n      // Pause Spotify if it was playing\n      pause(global.spotifyAccessToken);\n      global.youtubePlayer.loadVideoById(upNext[1].id, 0);\n    }\n\n    global.isContentPlaying = true;\n    global.currentlyPlaying = upNext;\n\n    // Reset Song Progress Bar\n    global.currentContentPosition = 0;\n\n    // Updates State of Session\n    this.context.updateSessionQueue(global.sessionQueue);\n\n\n  };\n\n  restartPressed = () => {\n    var songInfo = global.currentlyPlaying[1];\n\n    if (global.currentlyPlaying[0] === \"Youtube\") {\n      global.youtubePlayer.loadVideoById(songInfo.id.videoId, 0);\n      \n    } else if (global.currentlyPlaying[1] === \"Spotify\") {\n      const songURI = songInfo[\"uri\"];\n      playURI(songURI, global.spotifyAccessToken);\n\n    }\n    global.currentContentPosition = 0;\n\n   \n  };\n\n  formatArtistString = (artistObj) => {\n    var artistString = \"\";\n    var numArtists = 0;\n\n    for (var key in Object.keys(artistObj)) {\n      var artist = artistObj[key];\n\n      if (numArtists > 0) {\n        artistString = artistString + \", \" + artist.name;\n      } else {\n        artistString = artist.name;\n      }\n      numArtists += 1;\n    }\n\n    return artistString;\n  };\n\n\n  getCurrentTrackLength = () => {\n    var currTrack = global.currentlyPlaying\n    var trackLength = 0;\n\n    if (currTrack === \"\") {\n      trackLength = 0;\n    } else if (currTrack[0] === \"Spotify\") {\n      trackLength = Math.round(currTrack[1].duration_ms / 1000)\n    } else if (currTrack[0] === \"Youtube\") {\n      var duration = currTrack[1].contentDetails.duration;\n\n      // Parse out hours minutes and seconds from duration string \"PT4M15S\" \"4 Mins, 15 Secs\"\n      var hourStr = duration.split(\"H\")[0];\n\n      var minStr = \"\";\n      var minutes = 0;\n\n      var secStr = \"\";\n      var seconds = 0;\n\n      if (hourStr === duration) { // Duration does not have Hour\n        minStr = duration.split(\"M\")[0];\n        minStr = minStr.split(\"T\")[1];\n        minutes = parseInt(minStr);\n\n        secStr = duration.split(\"M\")[1];\n        secStr = secStr.split(\"S\")[0];\n        seconds = parseInt(secStr);\n        \n        trackLength = (minutes * 60) + seconds\n\n      } else { // Duration does have Hour\n        hourStr = hourStr.split(\"T\")[1];\n        var hours = parseInt(hourStr);\n\n        minStr = duration.split(\"M\")[0];\n        minStr = minStr.split(\"H\")[1];\n        minutes = parseInt(minStr);\n\n        secStr = duration.split(\"M\")[1];\n        secStr = secStr.split(\"S\")[0];\n        seconds = parseInt(secStr);\n        \n        trackLength = (hours * 60 * 60) + (minutes * 60) + seconds\n      }\n    }\n\n    return trackLength\n  }\n\n  seek = (time) => {\n    if (global.currentlyPlaying !== \"\") {\n    \n      if (global.currentlyPlaying[0] === \"Youtube\") {\n        global.currentContentPosition = time;\n        global.youtubePlayer.seekTo(time, true)\n        global.youtubePlayer.playVideo();\n      } else if (global.currentlyPlaying[0] === \"Spotify\") {\n        global.currentContentPosition = time;\n        // TODO: FINISH SEEK LOGIC HERE\n        \n        seek(time*1000, global.spotifyAccessToken);\n        play(global.spotifyAccessToken)\n      }\n      global.isContentPlaying = true;\n\n      this.context.updateSessionQueue(global.sessionQueue);\n    } else {\n      console.log(\"Nothing is currently playing.\")\n    }\n\n\n  }\n\n  onSlidingStart = () => {\n    console.log(\"Sliding Start\")\n    // Pause content while seeking\n    global.isContentPlaying = false;\n    if (global.currentlyPlaying !== \"\") {\n    \n      if (global.currentlyPlaying[0] === \"Youtube\") {\n        global.youtubePlayer.pauseVideo();\n\n      } else if (global.currentlyPlaying[0] === \"Spotify\") {\n        pause(global.spotifyAccessToken)\n      }\n\n    } \n    // Updates State of Session\n    this.context.updateSessionQueue(global.sessionQueue);\n  }\n\n  queueButtonClicked = () => {\n    let element = document.getElementById('editQueueButton');\n    \n    if (!this.state.isEditingQueue) {\n      \n      ReactDOM.findDOMNode(element).style.color = \"red\";\n      // ReactDOM.findDOMNode(element).style.text = \"Done Editing\";\n    } else {\n      ReactDOM.findDOMNode(element).style.color = \"white\";\n      // ReactDOM.findDOMNode(element).style.text = \"Edit Queue\";\n    }\n    \n    this.setState({\n      editQueueText: !this.state.isEditingQueue ? \"Done Editing\" : \"Edit Queue\",\n      isEditingQueue: !this.state.isEditingQueue \n      \n    })\n\n    this.props.editQueue();\n    \n}\n\n  render() {\n\n    return (\n      <SessionContext.Consumer>\n        {({ isContentPlaying }) => (\n          <div id={this.props.deviceType === \"Web\" ? \"controllerDiv\" : \"controllerDivMobile\"}>\n\n            <img\n              className=\"currentTrackPic\"\n              src={\n                global.currentlyPlaying === \"\"\n                  ? \"\"\n                  : global.currentlyPlaying[0] === \"Youtube\"\n                  ? global.currentlyPlaying[1].snippet.thumbnails.high.url\n                  : global.currentlyPlaying[1].album.images[0].url\n              }\n              alt=\"\"></img>\n            <div className=\"controllerButtons\">\n              <div id=\"buttonBox\">\n                <img\n                src={require(\"../../resources/images/RestartButton.png\")}\n                id=\"restartButton\"\n                onClick={this.restartPressed}\n                alt='Restart Button'></img>\n                </div>\n              <div id=\"buttonBox\">\n                <img\n                  id=\"playButton\"\n                  src={ global.isContentPlaying\n                      ? \n                        require(\"../../resources/images/PauseButton.png\")\n                      : \n                        require(\"../../resources/images/PlayButton.png\")}\n                  style={{\n                    \n                    left: global.isContentPlaying ? \"-5px\" : \"\",\n                    width: global.isContentPlaying ? \"50%\" : \"44%\"\n                  }}\n                  onClick={this.playButtonPress}\n                  alt='Play Button'></img>\n                </div>\n                <div id=\"buttonBox\">\n                <img\n                  src={require(\"../../resources/images/SkipButton.png\")}\n                  id=\"skipButton\"\n                  onClick={this.skipPressed}\n                  alt='Skip Button'></img>\n                </div>\n            </div>\n            <div className=\"songText\">\n              <div className=\"TitleandPlatform\">\n                <p id=\"songTitle\">\n                  {global.currentlyPlaying === \"\"\n                    ? \"Nothings playing!\"\n                    : global.currentlyPlaying[0] === \"Youtube\"\n                    ? formatYTTitle(global.currentlyPlaying[1].snippet.title)\n                    : global.currentlyPlaying[1].name}\n                </p>\n                {global.currentlyPlaying[0] === \"Youtube\" ? (\n                  <img src={youtubeIcon} alt=\"\" className=\"youtubeIconCP\"></img>\n                ) : global.currentlyPlaying[0] === \"Spotify\" ? (\n                  <img src={spotifyIcon} alt=\"\" className=\"spotifyIconCP\"></img>\n                ) : (\n                  \"\"\n                )}\n              </div>\n\n              <p id=\"songArtist\">\n                {global.currentlyPlaying === \"\"\n                  ? \"Search a song or choose from your Library\"\n                  : global.currentlyPlaying[0] === \"Youtube\"\n                  ? global.currentlyPlaying[1].snippet.channelTitle\n                  : this.formatArtistString(global.currentlyPlaying[1].artists)}\n              </p>\n            </div>\n            <div className=\"seekbarDiv\">\n\n              <SeekBar\n                onSeek={this.seek.bind(this)}\n                trackLength={this.getCurrentTrackLength()}\n                onSlidingStart={() => this.onSlidingStart()} \n                currentPosition={Math.trunc(global.currentContentPosition)} />\n            </div>\n            <p className=\"upNextText\">Up Next:</p>\n            <button className=\"editQueueButton\" id=\"editQueueButton\" onClick={this.queueButtonClicked}>{this.state.editQueueText}</button>\n          </div>\n        )}\n      </SessionContext.Consumer>\n    );\n  }\n}\nSessionController.contextType = SessionContext;\n\nexport default SessionController;\n"]},"metadata":{},"sourceType":"module"}