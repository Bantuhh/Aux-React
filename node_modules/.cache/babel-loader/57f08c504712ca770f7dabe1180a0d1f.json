{"ast":null,"code":"import { viewOnSpotify, queueSpotifySong, skipSongSpotify, playURI } from \"./spotifyInterface\";\nimport Spotify from \"spotify-web-api-js\";\nconst spotifyWebApi = new Spotify();\nexport function addSongToQueue(platform, songInfo) {\n  console.log(\"AddSongToQueue\");\n  var currentSong = [platform, songInfo]; // If no songs currently in queue, add song to queue and skip to song\n\n  if (!global.isContentPlaying & global.sessionQueue.length == 0) {\n    if (currentSong != \"None\") {\n      // Check the platform of the song\n      if (currentSong[0] == \"Spotify\") {\n        var songURI = currentSong[1][\"uri\"];\n        playURI(songURI, global.spotifyAccessToken);\n        global.isContentPlaying = true; // Set song as currently playing\n\n        global.currentlyPlaying = currentSong;\n      }\n    }\n  } else {\n    // Push song to queue\n    global.sessionQueue.push(currentSong);\n    console.log(\"currentSong\", currentSong);\n    console.log(\"Added Song to Queue\");\n  }\n}\nexport function addPlaylistToQueue(platform, playlistInfo) {\n  console.log(platform);\n  console.log(playlistInfo);\n  const playlistID = playlistInfo.id;\n  const userID = global.spotifyUserID;\n  var trackCounter = 0;\n  spotifyWebApi.getPlaylistTracks(userID, playlistID).then(response => {\n    console.log(response.items);\n\n    for (const songInfo in response.items) {\n      var realSongInfo = songInfo.track;\n      var currentSong = [platform, realSongInfo]; // If no song playing and queue empty, play first song in playlist and add rest to queue\n\n      if (!global.isContentPlaying & global.sessionQueue.length == 0 & trackCounter == 0) {\n        console.log(\"Playing first song..\");\n        console.log(realSongInfo);\n        var songURI = realSongInfo[\"uri\"];\n        playURI(songURI, global.spotifyAccessToken);\n        global.isContentPlaying = true; // Set song as currently playing\n\n        global.currentlyPlaying = currentSong;\n        trackCounter += 1;\n        continue;\n      } // Push song to queue\n\n\n      global.sessionQueue.push(currentSong);\n      console.log(\"currentSong\", currentSong);\n      console.log(\"Added Song to Queue\");\n    }\n  }, reason => {\n    console.log(\"GOT TO ERROR (getPlaylistTracks)\");\n    this.createNotification(\"error\");\n    console.error(reason); // Error!\n  });\n} // Removes first item from queue and returns it\n\nexport function popQueue() {\n  var upNext = global.sessionQueue.shift();\n  return upNext;\n}","map":{"version":3,"sources":["/Users/dbanta/Desktop/Aux React/aux-pwa/src/utils/queueInterface.js"],"names":["viewOnSpotify","queueSpotifySong","skipSongSpotify","playURI","Spotify","spotifyWebApi","addSongToQueue","platform","songInfo","console","log","currentSong","global","isContentPlaying","sessionQueue","length","songURI","spotifyAccessToken","currentlyPlaying","push","addPlaylistToQueue","playlistInfo","playlistID","id","userID","spotifyUserID","trackCounter","getPlaylistTracks","then","response","items","realSongInfo","track","reason","createNotification","error","popQueue","upNext","shift"],"mappings":"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","sourcesContent":["import {\n  viewOnSpotify,\n  queueSpotifySong,\n  skipSongSpotify,\n  playURI,\n} from \"./spotifyInterface\";\n\nimport Spotify from \"spotify-web-api-js\";\nconst spotifyWebApi = new Spotify();\n\nexport function addSongToQueue(platform, songInfo) {\n  console.log(\"AddSongToQueue\");\n\n  var currentSong = [platform, songInfo];\n\n  // If no songs currently in queue, add song to queue and skip to song\n  if (!global.isContentPlaying & (global.sessionQueue.length == 0)) {\n    if (currentSong != \"None\") {\n      // Check the platform of the song\n      if (currentSong[0] == \"Spotify\") {\n        var songURI = currentSong[1][\"uri\"];\n\n        playURI(songURI, global.spotifyAccessToken);\n\n        global.isContentPlaying = true;\n\n        // Set song as currently playing\n        global.currentlyPlaying = currentSong;\n      }\n    }\n  } else {\n    // Push song to queue\n    global.sessionQueue.push(currentSong);\n\n    console.log(\"currentSong\", currentSong);\n\n    console.log(\"Added Song to Queue\");\n  }\n}\n\nexport function addPlaylistToQueue(platform, playlistInfo) {\n  console.log(platform);\n  console.log(playlistInfo);\n\n  const playlistID = playlistInfo.id;\n  const userID = global.spotifyUserID;\n\n  var trackCounter = 0;\n\n  spotifyWebApi.getPlaylistTracks(userID, playlistID).then(\n    (response) => {\n      console.log(response.items);\n      for (const songInfo in response.items) {\n        var realSongInfo = songInfo.track;\n        var currentSong = [platform, realSongInfo];\n\n        // If no song playing and queue empty, play first song in playlist and add rest to queue\n        if (\n          !global.isContentPlaying &\n          (global.sessionQueue.length == 0) &\n          (trackCounter == 0)\n        ) {\n          console.log(\"Playing first song..\");\n          console.log(realSongInfo);\n          var songURI = realSongInfo[\"uri\"];\n\n          playURI(songURI, global.spotifyAccessToken);\n\n          global.isContentPlaying = true;\n\n          // Set song as currently playing\n          global.currentlyPlaying = currentSong;\n\n          trackCounter += 1;\n\n          continue;\n        }\n\n        // Push song to queue\n        global.sessionQueue.push(currentSong);\n\n        console.log(\"currentSong\", currentSong);\n\n        console.log(\"Added Song to Queue\");\n      }\n    },\n    (reason) => {\n      console.log(\"GOT TO ERROR (getPlaylistTracks)\");\n      this.createNotification(\"error\");\n      console.error(reason); // Error!\n    }\n  );\n}\n\n// Removes first item from queue and returns it\nexport function popQueue() {\n  var upNext = global.sessionQueue.shift();\n\n  return upNext;\n}\n"]},"metadata":{},"sourceType":"module"}